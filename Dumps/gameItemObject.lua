{
	name: gameItemObject,
	functions: {
		GetItemID() => (gameItemID),
		GetItemData() => (whandle:gameItemData),
		QueueEventToChildItems(evt: handle:redEvent),
		GetAnimationParameters() => (array:CName),
		IsClientSideOnlyGadget() => (Bool),
		IsConnectedWithDrop() => (Bool),
		GetConnectedItemDrop() => (whandle:gameItemDropObject),
		OnGameAttached() => (Bool),
		OnItemLooted(evt: handle:ItemLootedEvent) => (Bool),
		OnEvaluateLootQuality(evt: handle:EvaluateLootQualityEvent) => (Bool),
		EvaluateLootQuality(),
		HasValidLootQuality() => (Bool),
		IsContainer() => (Bool),
		GetDefaultHighlight() => (handle:FocusForcedHighlightData),
		GetCurrentOutline() => (EFocusOutlineType),
		ShouldRegisterToHUD() => (Bool),
		IsQuest() => (Bool),
		DeterminGameplayRole() => (EGameplayRole),
		GetIsIconic() => (Bool),
		GetLootQuality() => (gamedataQuality),
		ToggleLootHighlight(enable: Bool),
		HasIndividualTimeDilation(reason: CName) => (Bool),
		SetIndividualTimeDilation(reason: CName, dilation: Float, duration: Float, easeInCurve: CName, easeOutCurve: CName, ignoreGlobalDilation: Bool),
		UnsetIndividualTimeDilation(easeOutCurve: CName),
		GetTimeDilationValue() => (Float),
		IsIgnoringGlobalTimeDilation() => (Bool),
		IsIgnoringTimeDilation() => (Bool),
		GetName() => (CName),
		GetAudioName(),
		GetDisplayName() => (String),
		GetDisplayDescription(),
		GetGame() => (ScriptGameInstance),
		EnableTransformUpdates(enable: Bool),
		IsSelectedForDebugging() => (Bool),
		IsPlayerControlled() => (Bool),
		GetOwner() => (whandle:gameObject),
		GetTracedActionName() => (String),
		RegisterInputListener(listener: handle:IScriptable, name: CName),
		RegisterInputListenerWithOwner(listener: handle:IScriptable, name: CName),
		UnregisterInputListener(listener: handle:IScriptable, name: CName),
		GetCurveValue(curveName: CName, isDebug: Bool) => (x: Float, y: Float),
		GetCurrentContext() => (CName),
		PlayerLastUsedPad() => (Bool),
		PlayerLastUsedKBM() => (Bool),
		TriggerEvent(eventName: CName, data: handle:IScriptable, flags: Int32) => (Bool),
		GetPS() => (handle:gameObjectPS),
		GetBasePS() => (handle:gameObjectPS),
		HasTag(tag: CName) => (Bool),
		ReplicateAnimFeature(obj: handle:gameObject, inputName: CName, value: handle:animAnimFeature),
		ReplicateAnimEvent(obj: handle:gameObject, eventName: CName),
		QueueReplicatedEvent(evt: handle:redEvent),
		ReplicateInputFloat(obj: handle:gameObject, inputName: CName, value: Float),
		ReplicateInputBool(obj: handle:gameObject, inputName: CName, value: Bool),
		ReplicateInputInt(obj: handle:gameObject, inputName: CName, value: Int32),
		ReplicateInputVector(obj: handle:gameObject, inputName: CName, value: Vector4),
		OnDeviceLinkRequest(evt: handle:DeviceLinkRequest) => (Bool),
		GetDeviceLink() => (handle:DeviceLinkComponentPS),
		OnTransformUpdated(),
		GetPersistentID() => (gamePersistentID),
		GetPSOwnerData() => (PSOwnerData),
		GetPSClassName() => (CName),
		SendEventToDefaultPS(evt: handle:redEvent),
		IsConnectedToSecuritySystem() => (Bool),
		GetSecuritySystem() => (handle:SecuritySystemControllerPS),
		IsTargetTresspassingMyZone(target: handle:gameObject) => (Bool),
		OnAddOrRemoveListenerForGameObject(evt: handle:AddOrRemoveListenerForGOEvent) => (Bool),
		OnAddStatusEffectTriggerListener(evt: handle:AddStatusEffectListenerEvent) => (Bool),
		OnRemoveStatusEffectTriggerListener(evt: handle:RemoveStatusEffectListenerEvent) => (Bool),
		OnRequestComponents(ri: entEntityRequestComponentsInterface) => (Bool),
		OnTakeControl(ri: entEntityResolveComponentsInterface) => (Bool),
		OnGameAttached() => (Bool),
		OnDetach() => (Bool),
		ShouldForceRegisterInHUDManager() => (Bool),
		ShouldRegisterToHUD() => (Bool),
		RegisterToHUDManager(shouldRegister: Bool),
		RequestHUDRefresh(updateData: handle:HUDActorUpdateData),
		RequestHUDRefresh(targetID: entEntityID, updateData: handle:HUDActorUpdateData),
		CanScanThroughWalls() => (Bool),
		IsScannerDataDirty() => (Bool),
		SetScannerDirty(dirty: Bool),
		CanRevealRemoteActionsWheel() => (Bool),
		IsInitialized() => (Bool),
		IsLogicReady() => (Bool),
		ShouldReactToTarget(targetID: entEntityID) => (Bool),
		GetSensesComponent() => (handle:senseComponent),
		GetAttitudeAgent() => (handle:gameAttitudeAgent),
		GetScannerAttitudeTweak() => (TweakDBID),
		GetAttitudeTowards(target: handle:gameObject) => (EAIAttitude),
		IsHostile() => (Bool),
		GetTargetTrackerComponent() => (handle:AITargetTrackerComponent),
		OnEventReplicated(evt: handle:redEvent),
		PassUpdate(dt: Float),
		Update(dt: Float),
		OnStatusEffectApplied(evt: handle:gameeventsApplyStatusEffectEvent) => (Bool),
		HandleICEBreakerUpdate(evt: handle:gameeventsApplyStatusEffectEvent),
		ApplyStatusEffectPackages(evt: handle:gameeventsApplyStatusEffectEvent),
		StartStatusEffectVFX(evt: handle:gameeventsApplyStatusEffectEvent),
		StartStatusEffectSFX(evt: handle:gameeventsApplyStatusEffectEvent),
		OnStatusEffectRemoved(evt: handle:gameeventsRemoveStatusEffect) => (Bool),
		RemoveStatusEffectPackages(evt: handle:gameeventsRemoveStatusEffect),
		StopStatusEffectVFX(evt: handle:gameeventsRemoveStatusEffect),
		StopStatusEffectSFX(evt: handle:gameeventsRemoveStatusEffect),
		OnHit(evt: handle:gameeventsHitEvent) => (Bool),
		OnVehicleHit(evt: handle:gameeventsVehicleHitEvent) => (Bool),
		OnHitProjection(evt: handle:gameeventsProjectedHitEvent) => (Bool),
		OnAttitudeChanged(evt: handle:gameeventsAttitudeChangedEvent) => (Bool),
		ProcessDamagePipeline(evt: handle:gameeventsHitEvent),
		ReactToHitProcess(hitEvent: handle:gameeventsHitEvent),
		OnHitBlockedOrDeflected(hitEvent: handle:gameeventsHitEvent),
		OnHitAnimation(hitEvent: handle:gameeventsHitEvent),
		OnHitUI(hitEvent: handle:gameeventsHitEvent),
		DisplayHitUI(dmgInfos: array:gameuiDamageInfo),
		DisplayKillUI(killInfo: gameuiKillInfo),
		OnHitSounds(hitEvent: handle:gameeventsHitEvent),
		OnHitVFX(hitEvent: handle:gameeventsHitEvent),
		OnDamageReceived(evt: handle:gameeventsDamageReceivedEvent) => (Bool),
		Record1DamageInHistory(source: handle:gameObject),
		OnRecord1DamageInHistoryEvent(evt: handle:Record1DamageInHistoryEvent) => (Bool),
		FindAndRewardKiller(killType: gameKillType, instigator: whandle:gameObject),
		RewardKiller(killer: whandle:gameObject, killType: gameKillType, isAnyDamageNonlethal: Bool),
		ForceDefeatReward(value: Bool),
		DisableKillReward(value: Bool),
		OnChangeRewardSettingsEvent(evt: handle:ChangeRewardSettingsEvent) => (Bool),
		OnWillDieSoonEventEvent(evt: handle:WillDieSoonEvent) => (Bool),
		CheckIfPreventionShouldReact(damageDealers: array:whandle:gameObject),
		IsVehicle() => (Bool),
		IsPuppet() => (Bool),
		IsPlayer() => (Bool),
		IsReplacer() => (Bool),
		IsVRReplacer() => (Bool),
		IsJohnnyReplacer() => (Bool),
		IsNPC() => (Bool),
		IsContainer() => (Bool),
		IsShardContainer() => (Bool),
		IsDevice() => (Bool),
		IsSensor() => (Bool),
		IsTurret() => (Bool),
		IsActive() => (Bool),
		IsPrevention() => (Bool),
		IsDropPoint() => (Bool),
		IsDrone() => (Bool),
		IsItem() => (Bool),
		IsDead() => (Bool),
		IsDeadNoStatPool() => (Bool),
		UpdateAdditionalScanningData(),
		OnOutlineItemRequestEvent(evt: handle:OutlineItemRequestEvent) => (Bool),
		OnOutlineRequestEvent(evt: handle:OutlineRequestEvent) => (Bool),
		StartUpdate(),
		FireSingleE3Tick(),
		OnFakeUpdate(evt: handle:FakeUpdateEvent) => (Bool),
		EvaluateLastFrameRequest(),
		ClearLastFrame(),
		Suppress(),
		OnSuppressOutlineEvent(evt: handle:SuppressOutlineEvent) => (Bool),
		SetUpProperOutline(),
		FadeOutOutlines(),
		OnFadeOutOutlinesUpdate(evt: handle:FadeOutOutlinesUpdate) => (Bool),
		CalculateRealTimePassed() => (Float),
		OnForceFadeOutlineEventForWeapon(evt: handle:ForceFadeOutlineEventForWeapon) => (Bool),
		CalculateAmountOfTicks() => (Int32),
		CalculateOpacity(outlineStrength: Float) => (Float),
		ShouldEnableOutlineRed() => (Bool),
		ShouldEnableOutlineGreen() => (Bool),
		OnDebugOutlineEvent(evt: handle:DebugOutlineEvent) => (Bool),
		OnScanningModeChanged(evt: handle:gameScanningModeEvent) => (Bool),
		OnScanningLookedAt(evt: handle:gameScanningLookAtEvent) => (Bool),
		OnLookedAtEvent(evt: handle:LookedAtEvent) => (Bool),
		OnPulseEvent(evt: handle:gameVisionModeUpdateVisuals) => (Bool),
		PulseNetwork(revealNetworkAtEnd: Bool),
		GetTakeOverControlSystem() => (handle:TakeOverControlSystem),
		GetTaggingSystem() => (handle:FocusModeTaggingSystem),
		CanBeTagged() => (Bool),
		OnTagObjectEvent(evt: handle:TagObjectEvent) => (Bool),
		GetDefaultHighlight() => (handle:FocusForcedHighlightData),
		UpdateDefaultHighlight(),
		GetCurrentOutline() => (EFocusOutlineType),
		GetDefaultHighlightType() => (EFocusForcedHighlightType),
		HasHighlight(highlightType: EFocusForcedHighlightType, outlineType: EFocusOutlineType) => (Bool),
		HasOutlineOrFill(highlightType: EFocusForcedHighlightType, outlineType: EFocusOutlineType) => (Bool),
		HasHighlight(highlightType: EFocusForcedHighlightType, outlineType: EFocusOutlineType, sourceID: entEntityID) => (Bool),
		HasHighlight(highlightType: EFocusForcedHighlightType, outlineType: EFocusOutlineType, sourceID: entEntityID, sourceName: CName) => (Bool),
		HasRevealRequest(data: gameVisionModeSystemRevealIdentifier) => (Bool),
		CancelForcedVisionAppearance(data: handle:FocusForcedHighlightData),
		ForceVisionAppearance(data: handle:FocusForcedHighlightData),
		SendReactivateHighlightEvent(),
		GetObjectToForwardHighlight() => (array:whandle:gameObject),
		OnHUDInstruction(evt: handle:HUDInstruction) => (Bool),
		TryOpenQuickhackMenu(shouldOpen: Bool),
		SendQuickhackCommands(shouldOpen: Bool),
		SendForceRevealObjectEvent(reveal: Bool, reason: CName, instigatorID: entEntityID, lifetime: Float, delay: Float),
		RestoreRevealState(),
		IsHighlightedInFocusMode() => (Bool),
		IsScanned() => (Bool),
		GetBraindanceLayer() => (braindanceVisionMode),
		IsObjectRevealed() => (Bool),
		GetFastTravelSystem() => (handle:FastTravelSystem),
		GetNetworkSystem() => (handle:NetworkSystem),
		CanOverrideNetworkContext() => (Bool),
		IsAccessPoint() => (Bool),
		StartPingingNetwork(),
		StopPingingNetwork(),
		GetNetworkLinkSlotName() => (CName, transform: WorldTransform),
		GetNetworkLinkSlotName() => (CName),
		GetRoleMappinSlotName() => (CName),
		GetQuickHackIndicatorSlotName() => (CName),
		GetPhoneCallIndicatorSlotName() => (CName),
		IsNetworkLinkDynamic() => (Bool),
		GetNetworkBeamEndpoint() => (Vector4),
		IsNetworkKnownToPlayer() => (Bool),
		CanPlayerUseQuickHackVulnerability(data: TweakDBID) => (Bool),
		IsConnectedToBackdoorDevice() => (Bool),
		IsInIconForcedVisibilityRange() => (Bool),
		EvaluateMappinsVisualState(),
		IsGameplayRelevant() => (Bool),
		ShouldSendGameAttachedEventToPS() => (Bool),
		GetContentScale() => (TweakDBID),
		IsGameplayRoleValid(role: EGameplayRole) => (Bool),
		DeterminGameplayRole() => (EGameplayRole),
		DeterminGameplayRoleMappinVisuaState(data: SDeviceMappinData) => (EMappinVisualState),
		DeterminGameplayRoleMappinRange(data: SDeviceMappinData) => (Float),
		OnGameplayRoleChangeNotification(evt: handle:GameplayRoleChangeNotification) => (Bool),
		IsHackingPlayer() => (Bool),
		IsQuickHackAble() => (Bool),
		IsQuickHacksExposed() => (Bool),
		IsBreached() => (Bool),
		IsBackdoor() => (Bool),
		IsActiveBackdoor() => (Bool),
		IsBodyDisposalPossible() => (Bool),
		IsControllingDevices() => (Bool),
		HasAnySlaveDevices() => (Bool),
		IsFastTravelPoint() => (Bool),
		IsExplosive() => (Bool),
		HasImportantInteraction() => (Bool),
		HasAnyDirectInteractionActive() => (Bool),
		ShouldEnableRemoteLayer() => (Bool),
		IsTechie() => (Bool),
		IsSolo() => (Bool),
		IsNetrunner() => (Bool),
		IsAnyPlaystyleValid() => (Bool),
		IsHackingSkillCheckActive() => (Bool),
		IsDemolitionSkillCheckActive() => (Bool),
		IsEngineeringSkillCheckActive() => (Bool),
		CanPassEngineeringSkillCheck() => (Bool),
		CanPassDemolitionSkillCheck() => (Bool),
		CanPassHackingSkillCheck() => (Bool),
		HasDirectActionsActive() => (Bool),
		HasActiveDistraction() => (Bool),
		HasActiveQuickHackUpload() => (Bool),
		IsInvestigating() => (Bool),
		IsInvestigatingObject(targetID: handle:gameObject) => (Bool),
		IsTaggedinFocusMode() => (Bool),
		IsQuest() => (Bool),
		OnSetAsQuestImportantEvent(evt: handle:gameSetAsQuestImportantEvent) => (Bool),
		ToggleQuestImportance(isImportant: Bool),
		MarkAsQuest(isQuest: Bool),
		IsGrouppedClue() => (Bool),
		HasAnyClue() => (Bool),
		IsClueInspected() => (Bool),
		GetLinkedClueData(clueIndex: Int32) => (LinkedFocusClueData),
		GetAvailableClueIndex() => (Int32),
		PurgeScannerBlackboard(),
		OnlinkedClueTagEvent(evt: handle:linkedClueTagEvent) => (Bool),
		CompileScannerChunks() => (Bool),
		FillObjectDescription() => (arr: array:gameScanningTooltipElementDef),
		GetScannableObjects() => (array:gameScanningTooltipElementDef),
		ShouldShowScanner() => (Bool),
		IsScaningCluesBlocked() => (Bool),
		IsBraindanceBlocked() => (Bool),
		IsPhotoModeBlocked() => (Bool),
		ResolveFocusClueExtendedDescription(clueIndex: Int32),
		ResolveFocusClueConclusion(clueIndex: Int32, conclusionData: gameScanningTooltipElementDef),
		ResolveFacts(facts: array:SFactOperationData),
		GetFocusClueSystem() => (handle:FocusCluesSystem),
		IsAnyClueEnabled() => (Bool),
		IsCurrentTarget() => (Bool),
		IsCurrentlyScanned() => (Bool),
		GetFreeWorkspotRefForAIAction(aiAction: gamedataWorkspotActionType) => (NodeRef),
		GetFreeWorkspotDataForAIAction(aiAction: gamedataWorkspotActionType) => (handle:WorkspotEntryData),
		HasFreeWorkspotForInvestigation() => (Bool),
		GetFreeWorkspotsCountForAIAction(aiAction: gamedataWorkspotActionType) => (Int32),
		GetNumberOfWorkpotsForAIAction(aiAction: gamedataWorkspotActionType) => (Int32),
		GetTotalCountOfInvestigationSlots() => (Int32),
		GetStimBroadcasterComponent() => (handle:StimBroadcasterComponent),
		GetUISlotComponent() => (handle:entSlotComponent),
		GetSquadMemberComponent() => (handle:SquadMemberBaseComponent),
		GetStatusEffectComponent() => (handle:gameStatusEffectComponent),
		GetSourceShootComponent() => (handle:gameSourceShootComponent),
		GetTargetShootComponent() => (handle:gameTargetShootComponent),
		OnAnimFeatureReplicated(inputName: CName, value: handle:animAnimFeature),
		OnAnimEventReplicated(eventName: CName),
		GetPlaystyleMappinLocalPos() => (Vector4),
		GetPlaystyleMappinSlotWorldPos() => (Vector4),
		GetPlaystyleMappinSlotWorldTransform() => (WorldTransform),
		GetFxResourceByKey(key: CName) => (gameFxResource),
		OnDelayPrereqEvent(evt: handle:DelayPrereqEvent) => (Bool),
		OnTriggerAttackEffectorWithDelay(evt: handle:TriggerAttackEffectorWithDelay) => (Bool),
		OnToggleOffMeshConnections(evt: handle:ToggleOffMeshConnections) => (Bool),
		EnableOffMeshConnections(player: Bool, npc: Bool),
		DisableOffMeshConnections(player: Bool, npc: Bool),
		OnPhysicalDestructionEvent(evt: handle:entPhysicalDestructionEvent) => (Bool),
		GetHudManager() => (handle:HUDManager),
		TriggerMenuEvent(eventName: CName),
		GetAcousticQuerryStartPoint() => (Vector4),
		CanBeInvestigated() => (Bool),
		GetPreventionSystem() => (handle:PreventionSystem),
		GetLootQuality() => (gamedataQuality),
		GetIsIconic() => (Bool),
		GetAnimationSystemForcedVisibilityManager() => (handle:AnimationSystemForcedVisibilityManager),
		ToggleForcedVisibilityInAnimSystem(sourceName: CName, isVisibe: Bool, transitionTime: Float, entityID: entEntityID, forcedVisibleOnlyInFrustum: Bool),
		ClearForcedVisibilityInAnimSystem(),
		HasVisibilityForcedInAnimSystem() => (Bool),
		OnToggleVisibilityInAnimSystemEvent(evt: handle:ToggleVisibilityInAnimSystemEvent) => (Bool),
		OnSetGlitchOnUIEvent(evt: handle:SetGlitchOnUIEvent) => (Bool),
		OnCustomUIAnimationEvent(evt: handle:CustomUIAnimationEvent) => (Bool),
		OnSmartGunLockEvent(evt: handle:gamesmartGunSmartGunLockEvent) => (Bool),
		Dispose(),
		GetEntity() => (entEntityGameInterface),
		FindComponentByName(componentName: CName) => (handle:entIComponent),
		QueueEvent(evt: handle:redEvent),
		GetEntityID() => (entEntityID),
		CanServiceEvent(evtName: CName) => (Bool),
		QueueEventForNodeID(nodeID: worldGlobalNodeRef, evt: handle:redEvent) => (Bool),
		QueueEventForEntityID(entityID: entEntityID, evt: handle:redEvent) => (Bool),
		IsControlledByAnyPeer() => (Bool),
		IsControlledByLocalPeer() => (Bool),
		IsControlledByAnotherClient() => (Bool),
		IsAttached() => (Bool),
		IsReplicated() => (Bool),
		GetControllingPeerID() => (Uint32),
		MatchVisualTag(visualTag: CName) => (Bool),
		MatchVisualTags(visualTags: array:CName) => (Bool),
		GetWorldPosition() => (Vector4),
		GetWorldOrientation() => (Quaternion),
		GetWorldYaw() => (Float),
		GetWorldForward() => (Vector4),
		GetWorldRight() => (Vector4),
		GetWorldUp() => (Vector4),
		PrefetchAppearanceChange(newAppearanceName: CName),
		ScheduleAppearanceChange(newAppearanceName: CName),
		GetCurrentAppearanceName() => (CName),
		OnInspectorDebugDraw() => (box: handle:rendInfoBox),
		GetWorldTransform() => (WorldTransform),
		ToString() => (String),
		GetClassName() => (CName),
		IsA(className: CName) => (Bool),
		IsExactlyA(className: CName) => (Bool),
	},
	staticFunctions: {
		DetectScriptableCycles(),
	},
	properties: {
		updateBucket: UpdateBucketEnum,
		lootQuality: gamedataQuality,
		isIconic: Bool,
		persistentState: handle:gamePersistentState,
		playerSocket: gamePlayerSocket,
		tags: redTagList,
		displayName: LocalizationString,
		displayDescription: LocalizationString,
		audioResourceName: CName,
		visibilityCheckDistance: Float,
		forceRegisterInHudManager: Bool,
		prereqListeners: array:handle:GameObjectListener,
		statusEffectListeners: array:handle:StatusEffectTriggerListener,
		outlineRequestsManager: handle:OutlineRequestManager,
		outlineFadeCounter: Int32,
		fadeOutStarted: Bool,
		lastEngineTime: Float,
		accumulatedTimePasssed: Float,
		scanningComponent: handle:gameScanningComponent,
		visionComponent: handle:gameVisionModeComponent,
		isHighlightedInFocusMode: Bool,
		statusEffectComponent: handle:gameStatusEffectComponent,
		lastFrameGreen: handle:OutlineRequest,
		lastFrameRed: handle:OutlineRequest,
		markAsQuest: Bool,
		e3HighlightHackStarted: Bool,
		e3ObjectRevealed: Bool,
		forceHighlightSource: entEntityID,
		workspotMapper: handle:WorkspotMapperComponent,
		stimBroadcaster: handle:StimBroadcasterComponent,
		uiSlotComponent: handle:entSlotComponent,
		squadMemberComponent: handle:SquadMemberBaseComponent,
		sourceShootComponent: handle:gameSourceShootComponent,
		targetShootComponent: handle:gameTargetShootComponent,
		receivedDamageHistory: array:DamageHistoryEntry,
		forceDefeatReward: Bool,
		killRewardDisabled: Bool,
		willDieSoon: Bool,
		isScannerDataDirty: Bool,
		hasVisibilityForcedInAnimSystem: Bool,
		isDead: Bool,
		customCameraTarget: ECustomCameraTarget,
		renderSceneLayerMask: RenderSceneLayerMask,
	}
}