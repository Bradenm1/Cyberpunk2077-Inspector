{
	name: gameTransactionSystem,
	functions: {
		PrefetchItemAppearance(obj: handle:gameObject, itemID: gameItemID, newAppearanceName: CName),
		ChangeItemAppearance(obj: handle:gameObject, itemID: gameItemID, newAppearanceName: CName, useSuffixes: Bool),
		ChangeItemAppearanceWithItemData(),
		GetItemAppearance(obj: handle:gameObject, itemID: gameItemID) => (CName),
		ResetItemAppearance(obj: handle:gameObject, itemID: gameItemID),
		RemoveMoney(obj: handle:gameObject, amount: Int32, currency: CName) => (Bool),
		GiveMoney(source: handle:gameObject, target: handle:gameObject, amount: Int32, currency: CName) => (Bool),
		RemoveItem(obj: handle:gameObject, itemID: gameItemID, amount: Int32) => (Bool),
		RemoveItemByTDBID(obj: handle:gameObject, tdbID: TweakDBID, amount: Int32) => (Bool),
		GiveItem(obj: handle:gameObject, itemID: gameItemID, amount: Int32) => (Bool),
		GiveItemByTDBID(obj: handle:gameObject, tdbID: TweakDBID, amount: Int32) => (Bool),
		GiveItems(obj: handle:gameObject, itemList: array:gameItemModParams) => (Bool),
		GiveItemByItemData(obj: handle:gameObject, itemData: handle:gameItemData) => (Bool),
		GivePreviewItemByItemData(obj: handle:gameObject, itemData: handle:gameItemData) => (Bool),
		GiveItemByItemQuery(obj: handle:gameObject, itemQueryTDBID: TweakDBID, amount: Uint32, seed: Uint64, telemetryLogSource: String) => (Bool),
		GiveItemByItemArrayQuery(obj: handle:gameObject, itemQueryTDBID: TweakDBID, seed: Uint64) => (Bool),
		TransferItem(source: handle:gameObject, target: handle:gameObject, itemID: gameItemID, amount: Int32) => (Bool),
		TransferAllItems(source: handle:gameObject, target: handle:gameObject) => (Bool),
		TakeItem(newOwner: handle:gameObject, itemToLoot: whandle:gameItemObject) => (Bool),
		SellItem(seller: handle:gameObject, buyer: handle:gameObject, itemID: gameItemID, amount: Int32, currency: CName, price: Int32) => (Bool),
		SellItemStrict(seller: handle:gameObject, buyer: handle:gameObject, itemID: gameItemID, amount: Int32, currency: CName, price: Int32) => (Bool),
		HasItem(obj: handle:gameObject, itemID: gameItemID) => (Bool),
		HasTag(obj: handle:gameObject, tag: CName, itemID: gameItemID) => (Bool),
		GetItemQuantity(obj: handle:gameObject, itemID: gameItemID) => (Int32),
		GetItemQuantityByTag(obj: handle:gameObject, tag: CName) => (Int32),
		GetTotalItemQuantity(obj: handle:gameObject) => (Int32),
		GetItemList(obj: handle:gameObject) => (Bool, itemList: array:whandle:gameItemData),
		GetItemListByTag(obj: handle:gameObject, tag: CName) => (Bool, itemList: array:whandle:gameItemData),
		GetItemListByTags(obj: handle:gameObject, tagList: array:CName) => (Bool, itemList: array:whandle:gameItemData),
		GetNumItems(obj: handle:gameObject, tagFilters: array:CName) => (Int32),
		GetItemData(obj: handle:gameObject, itemID: gameItemID) => (whandle:gameItemData),
		GetItemDataByOwnerEntityId(id: entEntityID, itemID: gameItemID) => (whandle:gameItemData),
		InitializeSlots(obj: handle:gameObject) => (Bool, slotIDList: array:TweakDBID),
		RefreshAttachment(obj: handle:gameObject, keepWorldTransform: Bool) => (slotID: TweakDBID),
		AddItemToSlot(obj: handle:gameObject, slotID: TweakDBID, itemID: gameItemID, highPriority: Bool, itemObject: whandle:gameItemObject, plane: ERenderingPlane, keepWorldTransform: Bool, ignoreRestrictions: Bool) => (Bool),
		RemoveItemFromSlot(obj: handle:gameObject, slotID: TweakDBID, shouldDestroyEntity: Bool, keepWorldTransform: Bool, skipSendAnimEquipEvents: Bool) => (Bool),
		RemoveItemFromAnySlot(obj: handle:gameObject, itemID: gameItemID, shouldDestroyEntity: Bool, keepWorldTransform: Bool) => (Bool),
		ChangeItemToSlot(obj: handle:gameObject, newSlotID: TweakDBID, itemID: gameItemID) => (Bool),
		IsSlotEmpty(obj: handle:gameObject, slotID: TweakDBID) => (Bool),
		IsSlotEmptySpawningItem(obj: handle:gameObject, slotID: TweakDBID) => (Bool),
		HasItemDataInSlot(obj: handle:gameObject, slotID: TweakDBID, itemID: gameItemID) => (Bool),
		HasItemInSlot(obj: handle:gameObject, slotID: TweakDBID, itemID: gameItemID) => (Bool),
		HasItemInAnySlot(obj: handle:gameObject, itemID: gameItemID) => (Bool),
		CanPlaceItemInSlot(obj: handle:gameObject, slotID: TweakDBID, itemID: gameItemID) => (Bool),
		GetItemInSlot(obj: handle:gameObject, slotID: TweakDBID) => (handle:gameItemObject),
		GetItemInSlotByItemID(obj: handle:gameObject, itemID: gameItemID) => (handle:gameItemObject),
		ClearAllSlots(obj: handle:gameObject) => (Bool),
		CycleActiveItemInSlot(obj: handle:gameObject, slotID: TweakDBID) => (gameItemID),
		SetActiveItemInSlot(obj: handle:gameObject, slotID: TweakDBID, itemID: gameItemID) => (Bool),
		EquipActiveItemInSlot(obj: handle:gameObject, slotID: TweakDBID, highPriority: Bool) => (Bool),
		GetActiveItemInSlot(obj: handle:gameObject, slotID: TweakDBID) => (gameItemID),
		CanItemBeActiveInSlot(obj: handle:gameObject, slotID: TweakDBID, itemID: gameItemID) => (Bool),
		GetNextActiveItemInSlot(obj: handle:gameObject, slotID: TweakDBID) => (gameItemID),
		RemovePart(obj: handle:gameObject, itemID: gameItemID, slotID: TweakDBID, shouldUpdateEntity: Bool) => (gameItemID),
		AddPart(obj: handle:gameObject, itemID: gameItemID, partItemID: gameItemID, slotID: TweakDBID) => (Bool),
		ForcePartInSlot(obj: handle:gameObject, itemID: gameItemID, partItemID: gameItemID, slotID: TweakDBID) => (Bool),
		GetEmptySlotsOnItem(obj: handle:gameObject, itemID: gameItemID) => (emptySlots: array:TweakDBID),
		GetAvailableSlotsOnItem(obj: handle:gameObject, itemID: gameItemID) => (availableSlots: array:TweakDBID),
		GetUsedSlotsOnItem(obj: handle:gameObject, itemID: gameItemID) => (used: array:TweakDBID),
		GetItemsInstallableInSlot(obj: handle:gameObject, itemID: gameItemID, slotID: TweakDBID) => (installableItems: array:gameItemID),
		CalculateTemporaryStatsBundle(obj: handle:gameObject, rootPartID: gameItemID, replacementPartID: gameItemID, slotIdForReplacement: TweakDBID) => (handle:gameStatsBundleHandler),
		ReinitializeStatsOnEntityItems(obj: handle:gameObject),
		ReleaseItem(owner: handle:gameObject, item: whandle:gameItemObject) => (Bool),
		RemoveAllItems(obj: handle:gameObject) => (Bool),
		ThrowItem(owner: handle:gameObject, item: whandle:gameObject, setUpAndLaunchEvent: handle:gameprojectileSetUpAndLaunchEvent) => (Bool),
		RegisterInventoryListener(owner: handle:gameObject, callback: handle:gameInventoryScriptCallback) => (handle:gameInventoryScriptListener),
		RegisterAttachmentSlotListener(owner: handle:gameObject, callback: handle:gameAttachmentSlotsScriptCallback) => (handle:gameAttachmentSlotsScriptListener),
		UnregisterInventoryListener(owner: handle:gameObject, listener: handle:gameInventoryScriptListener),
		UnregisterAttachmentSlotListener(owner: handle:gameObject, listener: handle:gameAttachmentSlotsScriptListener),
		OnItemAddedToEquipmentSlot(owner: handle:gameObject, itemID: gameItemID) => (Bool),
		OnItemRemovedFromEquipmentSlot(owner: handle:gameObject, itemID: gameItemID) => (Bool),
		MatchVisualTag(entity: handle:entEntity, tag: CName, matchUsingDefaultAppearance: Bool) => (Bool),
		ToString() => (String),
		GetClassName() => (CName),
		IsA(className: CName) => (Bool),
		IsExactlyA(className: CName) => (Bool),
	},
	staticFunctions: {
		DetectScriptableCycles(),
	},
	properties: {
	}
}