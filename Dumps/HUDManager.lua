{
	name: HUDManager,
	functions: {
		OnAttach(),
		OnDetach(),
		InitializeHUD(),
		InitializeModules(),
		UninitializeHUD(),
		PlayerAttachedCallback(playerPuppet: handle:gameObject),
		PlayerDetachedCallback(playerPuppet: handle:gameObject),
		GetPlayerSMBlackboard() => (handle:gameIBlackboard),
		OnRegister(request: handle:HUDManagerRegistrationRequest),
		OnRefreshSingleActor(request: handle:RefreshActorRequest),
		OnLockQHackInput(request: handle:LockQHackInput),
		IsQHackInputLocked() => (Bool),
		OnRevealQuickhackMenu(request: handle:RevealQuickhackMenu),
		CloseQHackMenu(),
		OnRevealActorNotification(request: handle:RevealStatusNotification),
		OnTagActorNotification(request: handle:TagStatusNotification),
		OnClueClueLockNotification(request: handle:ClueLockNotification),
		OnClueActorNotification(request: handle:ClueStatusNotification),
		OnVisionModeChanged(value: Int32) => (Bool),
		OnPlayerTargetChanged(value: entEntityID) => (Bool),
		OnBraindanceToggle(value: Bool) => (Bool),
		OnPlayerTargetChangedRequest(evt: handle:PlayerTargetChangedRequest),
		ResolveLookAtTarget(newTarget: entEntityID),
		RegisterToInput(),
		UnregisterToInput(),
		IsBraindanceActive() => (Bool),
		OnQuickHackPanelOpened(value: Bool) => (Bool),
		OnBodyCarryStateChanged(value: Bool) => (Bool),
		OnGrappleStateChanged(value: Int32) => (Bool),
		OnBreachingNetwork(value: String) => (Bool),
		IsHackingMinigameActive() => (Bool),
		SendQuickHackPanelStateEvent(isOpened: Bool),
		OnQuickHackSetDescriptionVisibility(evt: handle:QuickHackSetDescriptionVisibilityRequest),
		SetQhuickHackDescriptionVisibility(value: Bool),
		IsQHDescriptionVisible() => (Bool),
		OnAction(action: gameinputScriptListenerAction, consumer: gameinputScriptListenerActionConsumer) => (Bool),
		OnStickInputChanged(value: Vector4) => (Bool),
		JumpToNextTarget(right: Bool),
		JumpToTarget(inputVector: Vector4, dotThreshold: Float),
		ClearQuickHackTargetData(targetID: entEntityID),
		LookAtNearestCroshairTarget(targetEntityID: entEntityID),
		LookAtNewTarget(lookAtComponent: whandle:gameTargetingComponent, vecToNextObject: Vector4),
		FillLookAtRequestData(lookAtComponent: whandle:gameTargetingComponent) => (gameaimAssistAimRequest),
		OnNameplateChanged(value: Variant) => (Bool),
		OnNemaplateChangedRequest(evt: handle:NemaplateChangedRequest),
		OnScannerTargetChanged(value: entEntityID) => (Bool),
		RequestTimeDilation(eventId: CName, val: Bool),
		OnScannerTargetChangedRequest(request: handle:ScannerTargetChangedRequest),
		OnResolveRadial(request: handle:ResolveQuickHackRadialRequest),
		IsRegistered(id: entEntityID) => (Bool),
		ProcessRegistration(request: handle:HUDManagerRegistrationRequest),
		RegisterActor_Script(request: handle:HUDManagerRegistrationRequest),
		UnregisterActor_Script(request: handle:HUDManagerRegistrationRequest),
		ResolveCurrentTarget() => (Bool),
		SetNewTarget(newTarget: handle:gameHudActor) => (Bool),
		ReactToTargetChanged(),
		CanShowHintMessage() => (Bool),
		IsCyberdeckEquipped() => (Bool),
		RefreshHUD(),
		RefreshHudForSingleActor(actor: handle:gameHudActor, targetModules: array:whandle:HUDModule),
		CreateJob(actor: handle:gameHudActor) => (HUDJob),
		CreateJobsForClueActors(actors: array:handle:gameHudActor) => (array:HUDJob),
		CreateJobsByActorType(actors: array:handle:gameHudActor, type: HUDActorType) => (array:HUDJob),
		CreateJobs(actors: array:handle:gameHudActor) => (array:HUDJob),
		IterateModules(job: HUDJob),
		IterateModules(jobs: array:HUDJob),
		SendInstructions(jobs: array:HUDJob),
		SuppressActor(actor: handle:gameHudActor),
		DEBUGActorArray(countActorTypes: Bool, createClassCount: Bool),
		SendSingleInstruction(entityID: entEntityID, evt: handle:redEvent),
		PostponeModuleIteration(remainingJobs: array:HUDJob),
		OnIterateModulesRequest(request: handle:IterateModulesRequest),
		SendInstructionsByRequest(jobs: array:HUDJob),
		OnInstructionRequest(request: handle:SendInstructionRequest),
		GetMaxInstructionsPerFrame() => (Int32),
		DetermineActorVisibilityState(id: entEntityID) => (ActorVisibilityStatus),
		ForceScannerModule(actor: whandle:gameHudActor, shouldForce: Bool),
		RegisterScannerTargetCallback(),
		RegisterPlayerTargetCallback(),
		RegisterBraindanceToggleCallback(),
		RegisterNameplateShownCallback(),
		UnRegisterPlayerTargetCallback(),
		RegisterVisionModeCallback(player: handle:gameObject),
		UnregisterVisionModeCallback(player: handle:gameObject),
		RegisterHackingMinigameCallback(),
		UnregisterHackingMinigameCallback(player: handle:gameObject),
		RegisterUICallbacks(),
		UnregisterUICallbacks(),
		OnScannerUIVisibleChanged(visible: Bool) => (Bool),
		OnQuickHackUIVisibleChanged(visible: Bool) => (Bool),
		OnLootDataChanged(value: Variant) => (Bool),
		GetHUDState() => (HUDState),
		GetActiveMode() => (ActiveMode),
		GetLastTarget() => (handle:gameHudActor),
		GetUiScannerVisible() => (Bool),
		GetIconsModule() => (handle:IconsModule),
		GetLockedClueID() => (entEntityID),
		GetLastTargetID() => (entEntityID),
		GetQuickHackTargetID() => (entEntityID),
		GetLootedTargetID() => (entEntityID),
		GetCurrentTarget() => (handle:gameHudActor),
		GetCurrentTargetObject() => (handle:gameObject),
		GetCurrentTargetID() => (entEntityID),
		HasCurrentTarget() => (Bool),
		CanActivateRemoteActionWheel() => (Bool),
		GetPlayerStateMachineBlackboard(playerPuppet: whandle:gameObject) => (handle:gameIBlackboard),
		IsRequestLegal(requestToValidate: handle:HUDManagerRequest) => (Bool),
		QueueEntityEvent(entityID: entEntityID, evt: handle:redEvent),
		GetPlayer() => (handle:gameObject),
		HUDLog(message: String),
		GetPulseDuration() => (Float),
		IsPulseActive() => (Bool),
		CanPulse() => (Bool),
		StartPulse(),
		StopPulse(),
		OnPingFinishedRequest(request: handle:PulseFinishedRequest),
		GetNetworkSystem() => (handle:NetworkSystem),
		RefreshDebug(),
		RegisterActor(actorId: entEntityID) => (handle:gameHudActor),
		UnregisterActor(actorId: entEntityID) => (Bool),
		GetActor(actorId: entEntityID) => (handle:gameHudActor),
		GetAllActors() => (array:handle:gameHudActor),
		IsQuickHackPanelOpened() => (Bool),
		SetIsQuickHackPanelOpened(isOpen: Bool),
		QueueRequest(request: handle:gameScriptableSystemRequest),
		GetGameInstance() => (ScriptGameInstance),
		WasRestored() => (Bool),
		OnAttach(),
		OnDetach(),
		OnRestored(saveVersion: Int32, gameVersion: Int32),
		IsSavingLocked() => (Bool),
		ToString() => (String),
		GetClassName() => (CName),
		IsA(className: CName) => (Bool),
		IsExactlyA(className: CName) => (Bool),
	},
	staticFunctions: {
		DetectScriptableCycles(),
	},
	properties: {
		state: HUDState,
		activeMode: ActiveMode,
		instructionsDelayID: gameDelayID,
		isBraindanceActive: Bool,
		modulesArray: array:handle:HUDModule,
		scanner: handle:ScannerModule,
		braindanceModule: handle:BraindanceModule,
		highlightsModule: handle:HighlightModule,
		iconsModule: handle:IconsModule,
		crosshair: handle:CrosshairModule,
		aimAssist: handle:AimAssistModule,
		quickhackModule: handle:QuickhackModule,
		lastTarget: whandle:gameHudActor,
		currentTarget: whandle:gameHudActor,
		lookAtTarget: entEntityID,
		scannerTarget: entEntityID,
		nameplateTarget: entEntityID,
		quickHackTarget: entEntityID,
		lootedTarget: entEntityID,
		scannningController: whandle:gameScanningController,
		uiScannerVisible: Bool,
		uiQuickHackVisible: Bool,
		quickHackDescriptionVisible: Bool,
		targetingSystem: whandle:gametargetingTargetingSystem,
		visionModeSystem: whandle:gameVisionModeSystem,
		isHackingMinigameActive: Bool,
		stickInputListener: Uint32,
		quickHackPanelListener: Uint32,
		carriedBodyListener: Uint32,
		grappleListener: Uint32,
		lookatRequest: gameaimAssistAimRequest,
		isQHackUIInputLocked: Bool,
		playerAttachedCallbackID: Uint32,
		playerDetachedCallbackID: Uint32,
		playerTargetCallbackID: Uint32,
		braindanceToggleCallbackID: Uint32,
		nameplateCallbackID: Uint32,
		visionModeChangedCallbackID: Uint32,
		scannerTargetCallbackID: Uint32,
		hackingMinigameCallbackID: Uint32,
		uiScannerVisibleCallbackID: Uint32,
		uiQuickHackVisibleCallbackID: Uint32,
		lootDataCallbackID: Uint32,
		pulseDelayID: gameDelayID,
		previousStickInput: Vector4,
	}
}