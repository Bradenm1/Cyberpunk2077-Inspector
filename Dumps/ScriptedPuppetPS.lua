{
	name: ScriptedPuppetPS,
	functions: {
		OnInstantiated() => (Bool),
		Initialize(),
		IsInitialized() => (Bool),
		WasAttached() => (Bool),
		OnGameAttached(evt: handle:GameAttachedEvent) => (EntityNotificationType),
		InitializeCooldownStorage(),
		ExecutePSAction(action: handle:ScriptableDeviceAction, persistentState: handle:gamePersistentState),
		GetCooldownStorage() => (handle:CooldownStorage),
		GetPlayerCooldownStorage() => (handle:CooldownStorage),
		GetPlayerMainObject() => (handle:gameObject),
		GetSecurityAreas(includeInactive: Bool, returnOnlyDirectlyConnected: Bool) => (array:handle:SecurityAreaControllerPS),
		GetSecuritySystem() => (handle:SecuritySystemControllerPS),
		OnSecuritySystemOutput(evt: handle:SecuritySystemOutput) => (EntityNotificationType),
		DetermineSecurityAreaTypeForEntityID(entityID: entEntityID) => (ESecurityAreaType),
		GetAccessPoint() => (handle:AccessPointControllerPS),
		GetWasIncapacitated() => (Bool),
		IsConnectedToAccessPoint() => (Bool),
		IsConnectedToSecuritySystem() => (Bool),
		GetNPCsConnectedToThisAPCount() => (Int32),
		GetNetworkName() => (String),
		CheckMasterConnectedClassTypes() => (ConnectedClassTypes),
		GetActiveContexts() => (array:gamedeviceRequestType),
		HasDirectInteractionChoicesActive() => (Bool),
		SetHasDirectInteractionChoicesActive(hasInteraction: Bool),
		GetLeftHandLoadout() => (gameItemID),
		GetRightHandLoadout() => (gameItemID),
		DrawBetweenEntities(shouldDraw: Bool, focusModeOnly: Bool, fxResource: gameFxResource, masterID: entEntityID, slaveID: entEntityID, revealMaster: Bool, revealSlave: Bool, onlyRemoveWeakLink: Bool, isEyeContact: Bool),
		GetOwnerEntity() => (whandle:ScriptedPuppet),
		CanPerformReprimend() => (Bool),
		IsQuickHacksExposed() => (Bool),
		WasRevealedInNetworkPing() => (Bool),
		SetRevealedInNetworkPing(wasRevealed: Bool),
		GetNetworkSystem() => (handle:NetworkSystem),
		OnDeviceAttachment(evt: handle:DeviceLinkEstablished) => (EntityNotificationType),
		OnSetWasQuickHacked(evt: handle:SetQuickHackEvent) => (EntityNotificationType),
		OnSetWasQuickHackedAtempt(evt: handle:SetQuickHackAttemptEvent) => (EntityNotificationType),
		GetDeviceLink() => (handle:PuppetDeviceLinkPS),
		OnAcquireDeviceLink(evt: handle:AcquireDeviceLink) => (EntityNotificationType),
		SetIsBreached(isBreached: Bool),
		IsBreached() => (Bool),
		GetOwnerEntityWeak() => (whandle:entEntity),
		GetMyEntityID() => (entEntityID),
		SetWasIncapacitated(wasIncapacitated: Bool),
		OnCacheLoadout(evt: handle:CacheItemEquippedToHandsEvent) => (EntityNotificationType),
		DetermineInteractionState(interaction: handle:gameinteractionsComponent, context: gameGetActionsContext, objectActionsCallbackController: whandle:gameObjectActionsCallbackController),
		GetValidChoices(actions: array:whandle:gamedataObjectAction_Record, context: gameGetActionsContext, objectActionsCallbackController: whandle:gameObjectActionsCallbackController, checkPlayerQuickHackList: Bool) => (choices: array:gameinteractionsChoice),
		GetAction(id: TweakDBID) => (handle:PuppetAction),
		GetAllChoices(actions: array:whandle:gamedataObjectAction_Record, context: gameGetActionsContext) => (choices: array:gameinteractionsChoice),
		PushChoicesToInteractionComponent(interactionComponent: handle:gameinteractionsComponent, context: gameGetActionsContext, choices: array:gameinteractionsChoice),
		PushAerialTakedownActionEventToPSM(target: whandle:gameObject),
		GenerateContext(requestType: gamedeviceRequestType, providedClearance: handle:gamedeviceClearance, providedProcessInitiator: handle:gameObject, providedRequestor: entEntityID) => (gameGetActionsContext),
		OnObjectAction(evt: handle:ScriptableDeviceAction) => (EntityNotificationType),
		CheckFlatheadTakedownAvailability(context: gameGetActionsContext) => (Bool),
		OnSetExposeQuickHacks(evt: handle:SetExposeQuickHacks) => (EntityNotificationType),
		FilterRedundantPrograms() => (programs: array:TweakDBID),
		ForceExposeQuickHack(shouldForce: Bool),
		IsActionReady(actionID: TweakDBID) => (Bool),
		OnActionCooldownEvent(evt: handle:ActionCooldownEvent) => (EntityNotificationType),
		ManuallyTriggerActionCooldown(actionID: TweakDBID),
		ActionSetExposeQuickHacks() => (handle:SetExposeQuickHacks),
		GetNumberActions() => (Int32),
		HasActiveContext(context: gamedeviceRequestType) => (Bool),
		AddActiveContext(context: gamedeviceRequestType),
		RemoveActiveContext(context: gamedeviceRequestType),
		SetReactionPresetID(presetID: TweakDBID),
		GetReactionPresetID() => (TweakDBID),
		IsDefeatMechanicActive() => (Bool),
		SetIsDefeatMechanicActive(isDefeatMechanicActive: Bool),
		CheckMasterRunnerAchievement(minigameProgramsCompleted: Int32),
		SetIsDead(isDead: Bool),
		GetIsDead() => (Bool),
		SetIsIncapacitated(isIncapacitated: Bool),
		GetIsIncapacitated() => (Bool),
		SetIsAndroidTurnedOff(isAndroidTurnedOff: Bool),
		GetIsAndroidTurnedOff() => (Bool),
		GetHudManager() => (handle:HUDManager),
		OnTargetAssessmentRequest(evt: handle:TargetAssessmentRequest) => (EntityNotificationType),
		OnPingSquad(evt: handle:PingSquad) => (EntityNotificationType),
		GetGender() => (CName),
		WasQuickHacked() => (Bool),
		SetWasQuickHacked(newValue: Bool),
		HasNPCTriggeredCombatInSecuritySystem() => (Bool),
		SetHasNPCTriggeredCombatInSecuritySystem(set: Bool),
		HasAlternativeName() => (Bool),
		SetCrouch(set: Bool),
		IsCrouch() => (Bool),
		OnNotifiedSecSysAboutCombat(evt: handle:NotifiedSecSysAboutCombat) => (EntityNotificationType),
		GetID() => (gamePersistentID),
		GetPersistencySystem() => (handle:gamePersistencySystem),
		GetGameInstance() => (ScriptGameInstance),
		ForcePersistentStateChanged(),
		ToString() => (String),
		GetClassName() => (CName),
		IsA(className: CName) => (Bool),
		IsExactlyA(className: CName) => (Bool),
	},
	staticFunctions: {
		DetectScriptableCycles(),
	},
	properties: {
		deviceLink: whandle:PuppetDeviceLinkPS,
		cooldownStorage: handle:CooldownStorage,
		isInitialized: EBOOL,
		wasAttached: Bool,
		wasRevealedInNetworkPing: Bool,
		numberActions: Int32,
		wasQuickHackAttempt: Bool,
		hasDirectInteractionChoicesActive: Bool,
		wasIncapacitated: Bool,
		isBreached: Bool,
		isDead: Bool,
		isIncapacitated: Bool,
		isAndroidTurnedOff: Bool,
		securitySystemData: SecuritySystemData,
		activeContexts: array:gamedeviceRequestType,
		lastInteractionLayerTag: CName,
		quickHacksExposed: Bool,
		currentCooldownID: Uint32,
		reactionPresetID: TweakDBID,
		isDefeatMechanicActive: Bool,
		leftHandLoadout: gameItemID,
		rightHandLoadout: gameItemID,
		gender: CName,
		wasQuickHacked: Bool,
		hasAlternativeName: Bool,
		isCrouch: Bool,
	}
}