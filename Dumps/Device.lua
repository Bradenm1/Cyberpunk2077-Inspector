{
	name: Device,
	functions: {
		OnRequestComponents(ri: entEntityRequestComponentsInterface) => (Bool),
		OnMaraudersMapDeviceDebug(sink: handle:worldMaraudersMapDevicesSink),
		OnTakeControl(ri: entEntityResolveComponentsInterface) => (Bool),
		OnDeviceVisible(evt: handle:gameDeviceVisibilityChangedEvent) => (Bool),
		WasVisible() => (Bool),
		IsVisible() => (Bool),
		OnVisibilityChanged(),
		OnGameAttached() => (Bool),
		ResolveGameplayState(),
		SetLogicReady(),
		OnDetach() => (Bool),
		OnPersitentStateInitialized(evt: handle:GameAttachedEvent) => (Bool),
		OnLogicReady(evt: handle:SetLogicReadyEvent) => (Bool),
		IsInitialized() => (Bool),
		IsLogicReady() => (Bool),
		IsDevice() => (Bool),
		SetClearance(),
		InitializeScanningData(),
		ResavePersistentData(ps: handle:gamePersistentState) => (Bool),
		PushData(),
		PushPersistentData(),
		OnDeath(evt: handle:gameeventsDeathEvent) => (Bool),
		OnQuickSlotCommandUsed(evt: handle:QuickSlotCommandUsed) => (Bool),
		ExecuteAction(choice: gameinteractionsChoice, executor: whandle:gameObject, layerTag: CName),
		ExecuteAction(action: handle:gamedeviceAction, executor: whandle:gameObject) => (Bool),
		GetTweakDBRecord() => (TweakDBID),
		EnableUpdate(shouldEnable: Bool, time: Float),
		FireSingleTick(),
		OnCancelUpdateEvent(evt: handle:CancelDeviceUpdateEvent) => (Bool),
		OnDeviceUpdate(evt: handle:DeviceUpdateEvent) => (Bool),
		DeviceUpdate(),
		RestoreDeviceState(),
		UpdateDeviceState(isDelayed: Bool) => (Bool),
		OnDelayedUpdateDeviceStateEvent(evt: handle:DelayedUpdateDeviceStateEvent) => (Bool),
		OnSlaveStateChanged(evt: handle:gamePSDeviceChangedEvent) => (Bool),
		OnPSChangedEvent(evt: handle:gamePSChangedEvent) => (Bool),
		GetDeviceLink() => (handle:DeviceLinkComponentPS),
		GetController() => (handle:ScriptableDC),
		GetControllerPersistentState() => (handle:gameDeviceComponentPS),
		SendEventToDefaultPS(evt: handle:redEvent),
		GetDevicePS() => (handle:ScriptableDeviceComponentPS),
		GetPSName() => (CName),
		GetPSClassName() => (CName),
		NotifyParents(),
		OnNotifyParents(evt: handle:NotifyParentsEvent) => (Bool),
		GetContext(processInitiator: handle:gameObject, requestType: gamedeviceRequestType) => (gameGetActionsContext),
		IsPlayerAround() => (Bool),
		GetInputContextName() => (CName),
		GetDeviceName() => (String),
		GetDeviceStatusString() => (String),
		GetDeviceState() => (EDeviceStatus),
		IsDeviceSecured() => (Bool),
		GetLocalization() => (handle:entLocalizationStringComponent),
		GetBlackboardDef() => (handle:DeviceBaseBlackboardDef),
		GetBlackboard() => (handle:gameIBlackboard),
		GetGameController() => (handle:DeviceInkGameControllerBase),
		GetScreenDefinition() => (ScreenDefinitionPackage),
		IsUIdirty() => (Bool),
		IsReadyForUI() => (Bool),
		GetDebuggerProperties() => (DebuggerProperties),
		CreateBlackboard(),
		ShouldEnableRemoteLayer() => (Bool),
		IsConnectedToBackdoorDevice() => (Bool),
		IsBackdoor() => (Bool),
		IsActiveBackdoor() => (Bool),
		IsQuickHackAble() => (Bool),
		IsPotentiallyQuickHackable() => (Bool),
		IsQuickHacksExposed() => (Bool),
		IsBreached() => (Bool),
		GetNetworkSecurityLevel() => (String),
		IsControllingDevices() => (Bool),
		HasAnySlaveDevices() => (Bool),
		HasImportantInteraction() => (Bool),
		ShouldRevealDevicesGrid() => (Bool),
		GetSecuritySystem() => (handle:SecuritySystemControllerPS),
		IsConnectedToSecuritySystem() => (Bool),
		IsConnectedToActionsSequencer() => (Bool),
		IsLockedViaSequencer() => (Bool),
		IsTargetTresspassingMyZone(target: handle:gameObject) => (Bool),
		GetFxResourceMapper() => (handle:FxResourceMapperComponent),
		GetResourceLibrary() => (handle:ResourceLibraryComponent),
		OnDurabilityLimitReach(evt: handle:DurabilityLimitReach) => (Bool),
		OnChangeJuryrigTrapState(evt: handle:ChangeJuryrigTrapState) => (Bool),
		OnPerformedAction(evt: handle:PerformedAction) => (Bool),
		ResolveIllegalAction(executor: handle:gameObject, duration: Float),
		FastForwardAnimations(),
		OnToggleON(evt: handle:ToggleON) => (Bool),
		OnToggleActivation(evt: handle:ToggleActivation) => (Bool),
		OnTogglePower(evt: handle:TogglePower) => (Bool),
		OnSetDeviceUnpowered(evt: handle:SetDeviceUnpowered) => (Bool),
		OnSetDevicePowered(evt: handle:SetDevicePowered) => (Bool),
		OnSetON(evt: handle:SetDeviceON) => (Bool),
		OnSetOFF(evt: handle:SetDeviceOFF) => (Bool),
		OnAuthorizeUser(evt: handle:AuthorizeUser) => (Bool),
		OnSetAuthorizationModuleON(evt: handle:SetAuthorizationModuleON) => (Bool),
		OnSetAuthorizationModuleOFF(evt: handle:SetAuthorizationModuleOFF) => (Bool),
		OnDisassembleDevice(evt: handle:DisassembleDevice) => (Bool),
		OnToggleJuryrigTrap(evt: handle:ToggleJuryrigTrap) => (Bool),
		OnTogglePersonalLink(evt: handle:TogglePersonalLink) => (Bool),
		TogglePersonalLink(toggle: Bool, puppet: handle:gameObject),
		InitiatePersonalLinkWorkspot(puppet: handle:gameObject),
		GetSlotTag() => (CName),
		OnRepeatApplyAnimFeatureHACK(evt: handle:RepeatPersonalLinkAnimFeaturesHACK) => (Bool),
		OnToggleZoomInteraction(evt: handle:ToggleZoomInteraction) => (Bool),
		OnQuestForceCameraZoom(evt: handle:QuestForceCameraZoom) => (Bool),
		EvaluateCameraZoomState(executor: handle:gameObject),
		ShowAdvanceInteractionInputHints(),
		HideAdvanceInteractionInputHints(),
		SendGameplayInputHintEvent(show: Bool, data: gameuiInputHintData),
		SendRemoveGameplayInputHintsBySourceEvent(sourceName: CName),
		ToggleCameraZoom(toggle: Bool),
		OnIsUIZoomDeviceChange(value: Bool) => (Bool),
		OnUnregisterFromZoomBlackboardEvent(evt: handle:UnregisterFromZoomBlackboardEvent) => (Bool),
		OnOpenFullscreenUI(evt: handle:OpenFullscreenUI) => (Bool),
		RegisterPlayerInputListener(shouldRegister: Bool),
		OnQuestForceEnabled(evt: handle:QuestForceEnabled) => (Bool),
		OnQuestForceDisabled(evt: handle:QuestForceDisabled) => (Bool),
		OnQuestForcePower(evt: handle:QuestForcePower) => (Bool),
		OnQuestForceUnpower(evt: handle:QuestForceUnpower) => (Bool),
		OnQuestForceEnableAuthorization(evt: handle:QuestForceAuthorizationEnabled) => (Bool),
		OnQuestForceDisableAuthorization(evt: handle:QuestForceAuthorizationDisabled) => (Bool),
		OnQuestForceArmJuryrigTrap(evt: handle:QuestForceJuryrigTrapArmed) => (Bool),
		OnQuestForceDeactivateJuryrigTrap(evt: handle:QuestForceJuryrigTrapDeactivated) => (Bool),
		OnQuestForceON(evt: handle:QuestForceON) => (Bool),
		OnQuestForceOFF(evt: handle:QuestForceOFF) => (Bool),
		OnQuestForceSecuritySystemSafe(evt: handle:QuestForceSecuritySystemSafe) => (Bool),
		OnQuestForceSecuritySystemAlarmed(evt: handle:QuestForceSecuritySystemAlarmed) => (Bool),
		OnQuestForceSecuritySystemArmed(evt: handle:QuestForceSecuritySystemArmed) => (Bool),
		OnAttitudeChanged(evt: handle:gameeventsAttitudeChangedEvent) => (Bool),
		OnSecuritySystemOutput(evt: handle:SecuritySystemOutput) => (Bool),
		OnSecuritySystemForceAttitudeChange(evt: handle:SecuritySystemForceAttitudeChange) => (Bool),
		OnSecurityAreaCrossingPerimeter(evt: handle:SecurityAreaCrossingPerimeter) => (Bool),
		InitializeScreenDefinition(),
		ShouldAlwasyRefreshUIInLogicAra() => (Bool),
		RefreshUI(isDelayed: Bool),
		OnToggleUIInteractivity(evt: handle:ToggleUIInteractivity) => (Bool),
		OnUIAction(evt: handle:UIActionEvent) => (Bool),
		OnRequestUiRefresh(evt: handle:RequestUIRefreshEvent) => (Bool),
		OnRequesBreadCrumbBarUpdate(evt: handle:RequestBreadCrumbBarUpdateEvent) => (Bool),
		OnRequestActionWidgetsUpdate(evt: handle:RequestActionWidgetsUpdateEvent) => (Bool),
		OnDeviceWidgetUpdate(evt: handle:RequestDeviceWidgetUpdateEvent) => (Bool),
		RequestActionWidgetsUpdate(blackboard: handle:gameIBlackboard),
		RequestDeviceWidgetsUpdate(blackboard: handle:gameIBlackboard),
		RequestThumbnailWidgetsUpdate(blackboard: handle:gameIBlackboard),
		SetZoomBlackboardValues(newState: Bool),
		EnterWorkspot(activator: handle:gameObject, freeCamera: Bool, componentName: CName, deviceData: CName),
		EnterWorkspotWithIK(activator: handle:gameObject, shouldCrouch: Bool, cameraFlavour: CName, componentName: CName, cameraPosition: Vector4, cameraRotation: Quaternion, rightHandPosition: Vector4, rightHandRotation: Quaternion, leftHandPosition: Vector4, leftHandRotation: Quaternion),
		LeaveWorkspot(activator: handle:gameObject),
		OnWorkspotFinished(componentName: CName) => (Bool),
		OnMissingWorkspotComponentFailsafeEvent(evt: handle:MissingWorkspotComponentFailsafeEvent) => (Bool),
		DetermineInteractionState(context: gameGetActionsContext),
		ResetChoicesByEvent(),
		AdjustInteractionComponent(),
		IsDirectInteractionCondition() => (Bool),
		ExecuteDeviceStateOperation(),
		ExecuteBaseActionOperation(actionClassName: CName),
		RestoreBaseActionOperations(),
		SetJuryrigTrapComponentState(newState: Bool),
		SetJuryrigTrapState(newState: EJuryrigTrapState),
		ShouldShowScanner() => (Bool),
		FillObjectDescription() => (arr: array:gameScanningTooltipElementDef),
		CompileScannerChunks() => (Bool),
		GetScannerName() => (String),
		GetScannerAttitudeTweak() => (TweakDBID),
		SetScanningProgressBarText(),
		ShouldShowDamageNumber() => (Bool),
		ReactToHit(hit: handle:gameeventsHitEvent),
		GetHitSourcePosition(hitSourceEntityID: entEntityID) => (Vector4),
		ControlledDeviceInputAction(isPressed: Bool),
		PlayEffect(effectEventName: CName, effectEventTag: CName),
		SetMeshAppearance(appearance: CName),
		GetPlayerMainObject() => (handle:gameObject),
		ExtractEntityID(evt: handle:entTriggerEvent) => (entEntityID),
		IsPlayer(entityID: entEntityID) => (Bool),
		ActivateDevice(),
		DeactivateDevice(),
		RestorePower(),
		CutPower(),
		TurnAuthorizationModuleON(),
		TurnAuthorizationModuleOFF(),
		ArmJuryrigTrap(),
		DeactivateJuryrigTrap(),
		TurnOnDevice(),
		TurnOffDevice(),
		BreakDevice(),
		SetStateSafe(),
		SetStateAlarmed(),
		SetStateArmed(),
		GetActionsDebug(context: gameGetActionsContext, debugger: handle:DeviceDebuggerComponent) => (Bool, outActions: array:handle:gamedeviceAction),
		ShouldInitiateDebug() => (Bool),
		OnHUDInstruction(evt: handle:HUDInstruction) => (Bool),
		OnScanningActionFinishedEvent(evt: handle:gameScanningActionFinishedEvent) => (Bool),
		CanRevealRemoteActionsWheel() => (Bool),
		OnQuickHackPanelStateChanged(evt: handle:QuickHackPanelStateEvent) => (Bool),
		HasDirectActionsActive() => (Bool),
		GetBlackboardIntVariable(id: gamebbScriptID_Int32) => (Int32),
		SendQuickhackCommands(shouldOpen: Bool),
		TranslateActionsIntoQuickSlotCommands(actions: array:handle:gamedeviceAction) => (commands: array:handle:QuickhackData),
		GetICELevel() => (Float),
		GetPlayerCyberDeck() => (array:String),
		GetMatchingActionProgramName(actions: array:handle:gamedeviceAction, searchWord: String) => (Int32),
		OnUploadProgressStateChanged(evt: handle:UploadProgramProgressEvent) => (Bool),
		ShowQuickHackDuration(action: handle:ScriptableDeviceAction),
		CanPlayerUseQuickHackVulnerability(data: TweakDBID) => (Bool),
		ResolveRemoteActions(state: Bool),
		RefreshInteraction(),
		OnScanningLookedAt(evt: handle:gameScanningLookAtEvent) => (Bool),
		ShouldPulseNetwork() => (Bool),
		CanOverrideNetworkContext() => (Bool),
		IsNetworkKnownToPlayer() => (Bool),
		OnPulseEvent(evt: handle:gameVisionModeUpdateVisuals) => (Bool),
		GetDefaultHighlight() => (handle:FocusForcedHighlightData),
		GetCurrentOutline() => (EFocusOutlineType),
		GetDeviceConnectionsHighlightSystem() => (handle:DeviceConnectionsHighlightSystem),
		OnNotifyHighlightedDevice(evt: handle:NotifyHighlightedDevice) => (Bool),
		NotifyConnectionHighlightSystem(IsHighlightON: Bool, IsNotifiedByMasterDevice: Bool) => (Bool),
		SendSkillCheckInfo(display: Bool),
		SendDisableAreaIndicatorEvent(),
		OnDisableAreaIndicator(evt: handle:DisableAreaIndicatorEvent) => (Bool),
		OnAreaEnter(evt: handle:entAreaEnteredEvent) => (Bool),
		OnAreaExit(evt: handle:entAreaExitedEvent) => (Bool),
		OnHitEvent(hit: handle:gameeventsHitEvent) => (Bool),
		OnProjectileBreachEvent(evt: handle:ProjectileBreachEvent) => (Bool),
		ProjectileExposeQuickHacks(),
		OnDelayedDeviceOperation(evt: handle:DelayedOperationEvent) => (Bool),
		OndDeviceOperationTriggerDelayed(evt: handle:DelayedDeviceOperationTriggerEvent) => (Bool),
		OnPlayerDetectedVisibleEvent(evt: handle:senseOnDetectedEvent) => (Bool),
		ResolveDeviceOperationOnFocusMode(visionType: gameVisionModeType, activated: Bool),
		RegisterPlayerTargetCallback(),
		UnRegisterPlayerTargetCallback(),
		GetCurrentHealth() => (Float),
		GetTotalHealth() => (Float),
		ProcessDamagePipeline(evt: handle:gameeventsHitEvent),
		ApplyDamage(attackData: handle:gamedamageAttackData),
		IsHighlightedInFocusMode() => (Bool),
		TriggerAreaEffectDistractionByName(effectName: CName),
		TriggerAreaEffectDistractionByAction(action: handle:ScriptableDeviceAction),
		GetAreaEffectLifetimeByName(effectName: CName) => (Float),
		GetAreaEffectLifetimeByAction(action: handle:ScriptableDeviceAction) => (Float),
		GetDefaultDistractionAreaEffectData() => (handle:AreaEffectData),
		TriggerArreaEffectDistraction(effectData: handle:AreaEffectData, executor: handle:gameObject),
		GetNodePosition(nodeRef: NodeRef) => (array:Vector4),
		GetDistractionPointPosition(device: whandle:gameObject) => (Vector4),
		CanBeInvestigated() => (Bool),
		IsInvestigated() => (Bool),
		GetWillingInvestigators() => (array:entEntityID),
		OnUpdateWillingInvestigators(evt: handle:UpdateWillingInvestigators) => (Bool),
		CheckQueryStartPoint(transform: WorldTransform) => (Vector4),
		GetEntityFromNode(nodeRef: NodeRef) => (handle:entEntity),
		GetStimTarget() => (handle:gameObject),
		GetDistractionControllerSource(effectData: handle:AreaEffectData) => (handle:entEntity),
		GetDistractionStimLifetime(defaultValue: Float) => (Float),
		GetNetworkBlackboardDef() => (handle:NetworkBlackboardDef),
		GetNetworkBlackboard() => (handle:gameIBlackboard),
		OnToggleNetrunnerDive(evt: handle:ToggleNetrunnerDive) => (Bool),
		PerformDive(attempt: Int32, isRemote: Bool),
		TerminateConnection(),
		DisplayConnectionWindowOnPlayerHUD(shouldDisplay: Bool, attempt: Int32),
		OnQuestMinigameRequest(),
		OnAccessPointMiniGameStatus(evt: handle:gameuiAccessPointMiniGameStatus) => (Bool),
		OnSetExposeQuickHacks(evt: handle:SetExposeQuickHacks) => (Bool),
		IsLookedAt() => (Bool),
		GetNetworkBeamOffset() => (Vector4),
		GetNetworkLinkSlotName() => (CName),
		GetNetworkLinkSlotName() => (CName, transform: WorldTransform),
		GetDefaultDevicesBeamResource() => (gameFxResource),
		GetDefaultNetworkBeamResource() => (gameFxResource),
		GetBreachedNetworkBeamResource() => (gameFxResource),
		IsNetworkLinkDynamic() => (Bool),
		RevealNetworkGrid_Event(shouldDraw: Bool, ownerEntityPosition: Vector4, fxDefault: gameFxResource, fxBreached: gameFxResource),
		RevealDevicesGrid_Event(shouldDraw: Bool, ownerEntityPosition: Vector4, fxDefault: gameFxResource),
		PingNetworkGrid_Event(ownerEntityPosition: Vector4, fxResource: gameFxResource, lifetime: Float, pingType: EPingType, revealSlave: Bool, revealMaster: Bool, ignoreRevealed: Bool),
		RevealNetworkGrid(shouldDraw: Bool),
		PingNetworkGrid(lifetime: Float, pingType: EPingType, revealSlave: Bool, revealMaster: Bool, ignoreRevealed: Bool),
		PingNetworkGrid(lifetime: Float, pingType: EPingType, resource: gameFxResource, revealSlave: Bool, revealMaster: Bool, ignoreRevealed: Bool),
		GetNetworkBeamEndpoint() => (Vector4),
		RevealDevicesGrid(shouldDraw: Bool),
		OnReavealDevicesGrid(evt: handle:RevealDevicesGridOnEntityEvent) => (Bool),
		ShouldBeHighlightedLongerOnPing() => (Bool),
		OnRevealDeviceRequest(evt: handle:RevealDeviceRequest) => (Bool),
		OnRevealNetworkGridRequestFromNetworkSystem(evt: handle:RevealNetworkGridNetworkRequest) => (Bool),
		OnRevealNetworkGridOnPulse(evt: handle:RevealNetworkGridOnPulse) => (Bool),
		OnRevealStateChanged(evt: handle:RevealStateChangedEvent) => (Bool),
		StartPingingNetwork(),
		StopPingingNetwork(),
		OnActionPing(evt: handle:PingDevice) => (Bool),
		PulseNetwork(revealNetworkAtEnd: Bool),
		ToggleAreaIndicator(turnOn: Bool),
		OnTimetableEntryTriggered(evt: handle:DeviceTimetableEvent) => (Bool),
		OnToggleComponents(evt: handle:ToggleComponentsEvent) => (Bool),
		ResolveComponents(componentsData: array:SComponentOperationData),
		ToggleComponentByName(componentName: CName, toggle: Bool),
		OnPlayBink(evt: handle:PlayBinkEvent) => (Bool),
		GetFxResourceByKey(key: CName) => (gameFxResource),
		AddHudButtonHelper(argText: String, argIcon: CName),
		RemoveHudButtonHelper(),
		OnFactChanged(evt: handle:gameFactChangedEvent) => (Bool),
		IsTechie() => (Bool),
		IsSolo() => (Bool),
		IsNetrunner() => (Bool),
		IsCyberdeckEquippedOnPlayer() => (Bool),
		HasAnyPlaystyle() => (Bool),
		HasActiveStaticHackingSkillcheck() => (Bool),
		HasAnySkillCheckActive() => (Bool),
		CanPassAnySkillCheck() => (Bool),
		CanPassAnySkillCheckOnMaster() => (Bool),
		IsHackingSkillCheckActive() => (Bool),
		IsDemolitionSkillCheckActive() => (Bool),
		IsEngineeringSkillCheckActive() => (Bool),
		CanPassEngineeringSkillCheck() => (Bool),
		CanPassDemolitionSkillCheck() => (Bool),
		CanPassHackingSkillCheck() => (Bool),
		HasAnyQuickHackActive() => (Bool),
		HasAnyActiveQuickHackVulnerabilities() => (Bool),
		HasAnySpiderBotOrdersActive() => (Bool),
		HasAnyDistractions() => (Bool),
		GetDistractionRange(type: DeviceStimType) => (Float),
		GetSmallestDistractionRange(type: DeviceStimType) => (Float),
		IsQuest() => (Bool),
		MarkAsQuest(isQuest: Bool),
		ResolveQuestMarkOnFact(),
		ResolveQuestImportanceOnPerformedAction(action: handle:ScriptableDeviceAction),
		HasAnyNetworkLink() => (Bool),
		HasAnyNetworkLink(ignorePingLinks: Bool) => (Bool),
		IsGameplayRoleValid(role: EGameplayRole) => (Bool),
		IsActive() => (Bool),
		IsGameplayRelevant() => (Bool),
		GetContentScale() => (TweakDBID),
		GetCurrentGameplayRole() => (EGameplayRole),
		IsGameplayRoleStatic() => (Bool),
		ReEvaluateGameplayRole(),
		ForceReEvaluateGameplayRole(),
		DeterminGameplayRoleMappinVisuaState(data: SDeviceMappinData) => (EMappinVisualState),
		DeterminGameplayRoleMappinRange(data: SDeviceMappinData) => (Float),
		OnQuickHackDistraction(evt: handle:QuickHackDistraction) => (Bool),
		OnQuestStartGlitch(evt: handle:QuestStartGlitch) => (Bool),
		OnQuestStopGlitch(evt: handle:QuestStopGlitch) => (Bool),
		OnGlitchScreen(evt: handle:GlitchScreen) => (Bool),
		StartGlitching(glitchState: EGlitchState, intensity: Float),
		StopGlitching(),
		HasActiveDistraction() => (Bool),
		HasActiveQuickHackUpload() => (Bool),
		SetGameplayRoleToNone(),
		SetGameplayRole(role: EGameplayRole),
		GetPlaystyleMappinSlotWorldPos() => (Vector4),
		GetPlaystyleMappinSlotWorldTransform() => (WorldTransform),
		GetPlaystyleMappinLocalPos() => (Vector4),
		OnSpiderbotOrderCompletedEvent(evt: handle:SpiderbotOrderCompletedEvent) => (Bool),
		OrderSpiderbot(),
		ShouldAllowSpiderbotToPerformAction() => (Bool),
		OnSendSpiderbotToPerformActionEvent(evt: handle:SendSpiderbotToPerformActionEvent) => (Bool),
		SendSetIsSpiderbotInteractionOrderedEvent(value: Bool),
		GetSlotComponent() => (handle:entSlotComponent),
		InitializeGameplayObjectives(),
		GetGameplayQuestSystem() => (handle:GameplayQuestSystem),
		ShowGameplayObjective(data: handle:GemplayObjectiveData),
		CreateGameplayObjective(data: handle:GemplayObjectiveData),
		SucceedGameplayObjective(data: handle:GemplayObjectiveData),
		RemoveGameplayObjective(data: handle:GemplayObjectiveData),
		ResolveGameplayObjectives(show: Bool),
		OnCommunicationEvent(evt: handle:CommunicationEvent) => (Bool),
		HasWillingInvestigator(id: entEntityID) => (Bool),
		CheckDistractionAchievemnt(),
		ApplyActiveStatusEffect(target: entEntityID, statusEffect: TweakDBID),
		GetActiveStatusEffect() => (TweakDBID),
		SetActiveStatusEffect(effect: TweakDBID),
		ClearActiveStatusEffect(),
		IsActiveStatusEffectValid() => (Bool),
		SetActiveProgramToUploadOnNPC(program: TweakDBID),
		GetActiveProgramToUploadOnNPC() => (TweakDBID),
		ClearActiveProgramToUploadOnNPC(),
		IsActiveProgramToUploadOnNPCValid() => (Bool),
		UploadActiveProgramOnNPC(targetID: entEntityID),
		OnQuestResolveSkillchecks(evt: handle:ResolveAllSkillchecksEvent) => (Bool),
		OnQuestSetSkillchecks(evt: handle:SetSkillcheckEvent) => (Bool),
		OnChangeLoopCurveEvent(evt: handle:ChangeLoopCurveEvent) => (Bool),
		OnActionCooldownEvent(evt: handle:ActionCooldownEvent) => (Bool),
		OnDisableRPGRequirementsForQucikHackActions(evt: handle:DisableRPGRequirementsForDeviceActions) => (Bool),
		GetAcousticQuerryStartPoint() => (Vector4),
		OnToggleTakeOverControl(evt: handle:ToggleTakeOverControl) => (Bool),
		OnTCSTakeOverControlActivate(evt: handle:TCSTakeOverControlActivate) => (Bool),
		OnTCSTakeOverControlDeactivate(evt: handle:TCSTakeOverControlDeactivate) => (Bool),
		TakeControlOverCamera(isOn: Bool),
		OnPlayerStateMachineZoom(value: Float) => (Bool),
		OnTCSInputXAxisEvent(evt: handle:TCSInputXAxisEvent) => (Bool),
		OnTCSInputYAxisEvent(evt: handle:TCSInputYAxisEvent) => (Bool),
		OnTCSInputXYAxisEvent(evt: handle:TCSInputXYAxisEvent) => (Bool),
		OnTCSInputDeviceAttack(evt: handle:TCSInputDeviceAttack) => (Bool),
		OnTCSInputCameraZoom(evt: handle:TCSInputCameraZoom) => (Bool),
		ShouldRegisterToHUD() => (Bool),
		OnOverloadDevice(evt: handle:OverloadDevice) => (Bool),
		StartOverload(),
		StopOverload(killDelay: Float),
		KillNPCWorkspotUser(killDelay: Float),
		OnNPCKillDelayEvent(evt: handle:NPCKillDelayEvent) => (Bool),
		CreateEMPGameEffect(range: Float),
		StopEMPGameEffect(),
		AddActiveContext(context: gamedeviceRequestType),
		RemoveActiveContext(context: gamedeviceRequestType),
		EvaluateProximityMappinInteractionLayerState(),
		EnableProximityMappinInteractionLayer(enable: Bool),
		ShowMappinOnProximity(),
		HideMappinOnProximity(),
		EvaluateProximityRevealInteractionLayerState(),
		EnableProximityRevealInteractionLayer(enable: Bool),
		StartRevealingOnProximity(),
		StopRevealingOnProximity(lifetime: Float),
		GetRevealOnProximityStopLifetimeValue() => (Float),
		GetServerState() => (handle:gameDeviceReplicatedState),
		GetClientState() => (handle:gameDeviceReplicatedState),
		SetAudioResourceName(),
		ApplyReplicatedState(state: handle:gameDeviceReplicatedState),
		GetDeviceStateClass() => (CName),
		ApplyAnimFeatureToReplicate(obj: handle:gameObject, inputName: CName, value: handle:animAnimFeature),
		IsDeviceMovableScript() => (Bool),
		IncludeLightsInVisibilityBoundsScript() => (Bool),
		GetName() => (CName),
		GetAudioName(),
		GetDisplayName() => (String),
		GetDisplayDescription(),
		GetGame() => (ScriptGameInstance),
		EnableTransformUpdates(enable: Bool),
		IsSelectedForDebugging() => (Bool),
		IsPlayerControlled() => (Bool),
		GetOwner() => (whandle:gameObject),
		GetTracedActionName() => (String),
		RegisterInputListener(listener: handle:IScriptable, name: CName),
		RegisterInputListenerWithOwner(listener: handle:IScriptable, name: CName),
		UnregisterInputListener(listener: handle:IScriptable, name: CName),
		GetCurveValue(curveName: CName, isDebug: Bool) => (x: Float, y: Float),
		GetCurrentContext() => (CName),
		PlayerLastUsedPad() => (Bool),
		PlayerLastUsedKBM() => (Bool),
		TriggerEvent(eventName: CName, data: handle:IScriptable, flags: Int32) => (Bool),
		GetPS() => (handle:gameObjectPS),
		GetBasePS() => (handle:gameObjectPS),
		HasTag(tag: CName) => (Bool),
		ReplicateAnimFeature(obj: handle:gameObject, inputName: CName, value: handle:animAnimFeature),
		ReplicateAnimEvent(obj: handle:gameObject, eventName: CName),
		QueueReplicatedEvent(evt: handle:redEvent),
		ReplicateInputFloat(obj: handle:gameObject, inputName: CName, value: Float),
		ReplicateInputBool(obj: handle:gameObject, inputName: CName, value: Bool),
		ReplicateInputInt(obj: handle:gameObject, inputName: CName, value: Int32),
		ReplicateInputVector(obj: handle:gameObject, inputName: CName, value: Vector4),
		OnDeviceLinkRequest(evt: handle:DeviceLinkRequest) => (Bool),
		GetDeviceLink() => (handle:DeviceLinkComponentPS),
		OnTransformUpdated(),
		GetPersistentID() => (gamePersistentID),
		GetPSOwnerData() => (PSOwnerData),
		GetPSClassName() => (CName),
		SendEventToDefaultPS(evt: handle:redEvent),
		IsConnectedToSecuritySystem() => (Bool),
		GetSecuritySystem() => (handle:SecuritySystemControllerPS),
		IsTargetTresspassingMyZone(target: handle:gameObject) => (Bool),
		OnAddOrRemoveListenerForGameObject(evt: handle:AddOrRemoveListenerForGOEvent) => (Bool),
		OnAddStatusEffectTriggerListener(evt: handle:AddStatusEffectListenerEvent) => (Bool),
		OnRemoveStatusEffectTriggerListener(evt: handle:RemoveStatusEffectListenerEvent) => (Bool),
		OnRequestComponents(ri: entEntityRequestComponentsInterface) => (Bool),
		OnTakeControl(ri: entEntityResolveComponentsInterface) => (Bool),
		OnGameAttached() => (Bool),
		OnDetach() => (Bool),
		ShouldForceRegisterInHUDManager() => (Bool),
		ShouldRegisterToHUD() => (Bool),
		RegisterToHUDManager(shouldRegister: Bool),
		RequestHUDRefresh(updateData: handle:HUDActorUpdateData),
		RequestHUDRefresh(targetID: entEntityID, updateData: handle:HUDActorUpdateData),
		CanScanThroughWalls() => (Bool),
		IsScannerDataDirty() => (Bool),
		SetScannerDirty(dirty: Bool),
		CanRevealRemoteActionsWheel() => (Bool),
		IsInitialized() => (Bool),
		IsLogicReady() => (Bool),
		ShouldReactToTarget(targetID: entEntityID) => (Bool),
		GetSensesComponent() => (handle:senseComponent),
		GetAttitudeAgent() => (handle:gameAttitudeAgent),
		GetScannerAttitudeTweak() => (TweakDBID),
		GetAttitudeTowards(target: handle:gameObject) => (EAIAttitude),
		IsHostile() => (Bool),
		GetTargetTrackerComponent() => (handle:AITargetTrackerComponent),
		OnEventReplicated(evt: handle:redEvent),
		PassUpdate(dt: Float),
		Update(dt: Float),
		OnStatusEffectApplied(evt: handle:gameeventsApplyStatusEffectEvent) => (Bool),
		HandleICEBreakerUpdate(evt: handle:gameeventsApplyStatusEffectEvent),
		ApplyStatusEffectPackages(evt: handle:gameeventsApplyStatusEffectEvent),
		StartStatusEffectVFX(evt: handle:gameeventsApplyStatusEffectEvent),
		StartStatusEffectSFX(evt: handle:gameeventsApplyStatusEffectEvent),
		OnStatusEffectRemoved(evt: handle:gameeventsRemoveStatusEffect) => (Bool),
		RemoveStatusEffectPackages(evt: handle:gameeventsRemoveStatusEffect),
		StopStatusEffectVFX(evt: handle:gameeventsRemoveStatusEffect),
		StopStatusEffectSFX(evt: handle:gameeventsRemoveStatusEffect),
		OnHit(evt: handle:gameeventsHitEvent) => (Bool),
		OnVehicleHit(evt: handle:gameeventsVehicleHitEvent) => (Bool),
		OnHitProjection(evt: handle:gameeventsProjectedHitEvent) => (Bool),
		OnAttitudeChanged(evt: handle:gameeventsAttitudeChangedEvent) => (Bool),
		ProcessDamagePipeline(evt: handle:gameeventsHitEvent),
		ReactToHitProcess(hitEvent: handle:gameeventsHitEvent),
		OnHitBlockedOrDeflected(hitEvent: handle:gameeventsHitEvent),
		OnHitAnimation(hitEvent: handle:gameeventsHitEvent),
		OnHitUI(hitEvent: handle:gameeventsHitEvent),
		DisplayHitUI(dmgInfos: array:gameuiDamageInfo),
		DisplayKillUI(killInfo: gameuiKillInfo),
		OnHitSounds(hitEvent: handle:gameeventsHitEvent),
		OnHitVFX(hitEvent: handle:gameeventsHitEvent),
		OnDamageReceived(evt: handle:gameeventsDamageReceivedEvent) => (Bool),
		Record1DamageInHistory(source: handle:gameObject),
		OnRecord1DamageInHistoryEvent(evt: handle:Record1DamageInHistoryEvent) => (Bool),
		FindAndRewardKiller(killType: gameKillType, instigator: whandle:gameObject),
		RewardKiller(killer: whandle:gameObject, killType: gameKillType, isAnyDamageNonlethal: Bool),
		ForceDefeatReward(value: Bool),
		DisableKillReward(value: Bool),
		OnChangeRewardSettingsEvent(evt: handle:ChangeRewardSettingsEvent) => (Bool),
		OnWillDieSoonEventEvent(evt: handle:WillDieSoonEvent) => (Bool),
		CheckIfPreventionShouldReact(damageDealers: array:whandle:gameObject),
		IsVehicle() => (Bool),
		IsPuppet() => (Bool),
		IsPlayer() => (Bool),
		IsReplacer() => (Bool),
		IsVRReplacer() => (Bool),
		IsJohnnyReplacer() => (Bool),
		IsNPC() => (Bool),
		IsContainer() => (Bool),
		IsShardContainer() => (Bool),
		IsDevice() => (Bool),
		IsSensor() => (Bool),
		IsTurret() => (Bool),
		IsActive() => (Bool),
		IsPrevention() => (Bool),
		IsDropPoint() => (Bool),
		IsDrone() => (Bool),
		IsItem() => (Bool),
		IsDead() => (Bool),
		IsDeadNoStatPool() => (Bool),
		UpdateAdditionalScanningData(),
		OnOutlineItemRequestEvent(evt: handle:OutlineItemRequestEvent) => (Bool),
		OnOutlineRequestEvent(evt: handle:OutlineRequestEvent) => (Bool),
		StartUpdate(),
		FireSingleE3Tick(),
		OnFakeUpdate(evt: handle:FakeUpdateEvent) => (Bool),
		EvaluateLastFrameRequest(),
		ClearLastFrame(),
		Suppress(),
		OnSuppressOutlineEvent(evt: handle:SuppressOutlineEvent) => (Bool),
		SetUpProperOutline(),
		FadeOutOutlines(),
		OnFadeOutOutlinesUpdate(evt: handle:FadeOutOutlinesUpdate) => (Bool),
		CalculateRealTimePassed() => (Float),
		OnForceFadeOutlineEventForWeapon(evt: handle:ForceFadeOutlineEventForWeapon) => (Bool),
		CalculateAmountOfTicks() => (Int32),
		CalculateOpacity(outlineStrength: Float) => (Float),
		ShouldEnableOutlineRed() => (Bool),
		ShouldEnableOutlineGreen() => (Bool),
		OnDebugOutlineEvent(evt: handle:DebugOutlineEvent) => (Bool),
		OnScanningModeChanged(evt: handle:gameScanningModeEvent) => (Bool),
		OnScanningLookedAt(evt: handle:gameScanningLookAtEvent) => (Bool),
		OnLookedAtEvent(evt: handle:LookedAtEvent) => (Bool),
		OnPulseEvent(evt: handle:gameVisionModeUpdateVisuals) => (Bool),
		PulseNetwork(revealNetworkAtEnd: Bool),
		GetTakeOverControlSystem() => (handle:TakeOverControlSystem),
		GetTaggingSystem() => (handle:FocusModeTaggingSystem),
		CanBeTagged() => (Bool),
		OnTagObjectEvent(evt: handle:TagObjectEvent) => (Bool),
		GetDefaultHighlight() => (handle:FocusForcedHighlightData),
		UpdateDefaultHighlight(),
		GetCurrentOutline() => (EFocusOutlineType),
		GetDefaultHighlightType() => (EFocusForcedHighlightType),
		HasHighlight(highlightType: EFocusForcedHighlightType, outlineType: EFocusOutlineType) => (Bool),
		HasOutlineOrFill(highlightType: EFocusForcedHighlightType, outlineType: EFocusOutlineType) => (Bool),
		HasHighlight(highlightType: EFocusForcedHighlightType, outlineType: EFocusOutlineType, sourceID: entEntityID) => (Bool),
		HasHighlight(highlightType: EFocusForcedHighlightType, outlineType: EFocusOutlineType, sourceID: entEntityID, sourceName: CName) => (Bool),
		HasRevealRequest(data: gameVisionModeSystemRevealIdentifier) => (Bool),
		CancelForcedVisionAppearance(data: handle:FocusForcedHighlightData),
		ForceVisionAppearance(data: handle:FocusForcedHighlightData),
		SendReactivateHighlightEvent(),
		GetObjectToForwardHighlight() => (array:whandle:gameObject),
		OnHUDInstruction(evt: handle:HUDInstruction) => (Bool),
		TryOpenQuickhackMenu(shouldOpen: Bool),
		SendQuickhackCommands(shouldOpen: Bool),
		SendForceRevealObjectEvent(reveal: Bool, reason: CName, instigatorID: entEntityID, lifetime: Float, delay: Float),
		RestoreRevealState(),
		IsHighlightedInFocusMode() => (Bool),
		IsScanned() => (Bool),
		GetBraindanceLayer() => (braindanceVisionMode),
		IsObjectRevealed() => (Bool),
		GetFastTravelSystem() => (handle:FastTravelSystem),
		GetNetworkSystem() => (handle:NetworkSystem),
		CanOverrideNetworkContext() => (Bool),
		IsAccessPoint() => (Bool),
		StartPingingNetwork(),
		StopPingingNetwork(),
		GetNetworkLinkSlotName() => (CName, transform: WorldTransform),
		GetNetworkLinkSlotName() => (CName),
		GetRoleMappinSlotName() => (CName),
		GetQuickHackIndicatorSlotName() => (CName),
		GetPhoneCallIndicatorSlotName() => (CName),
		IsNetworkLinkDynamic() => (Bool),
		GetNetworkBeamEndpoint() => (Vector4),
		IsNetworkKnownToPlayer() => (Bool),
		CanPlayerUseQuickHackVulnerability(data: TweakDBID) => (Bool),
		IsConnectedToBackdoorDevice() => (Bool),
		IsInIconForcedVisibilityRange() => (Bool),
		EvaluateMappinsVisualState(),
		IsGameplayRelevant() => (Bool),
		ShouldSendGameAttachedEventToPS() => (Bool),
		GetContentScale() => (TweakDBID),
		IsGameplayRoleValid(role: EGameplayRole) => (Bool),
		DeterminGameplayRole() => (EGameplayRole),
		DeterminGameplayRoleMappinVisuaState(data: SDeviceMappinData) => (EMappinVisualState),
		DeterminGameplayRoleMappinRange(data: SDeviceMappinData) => (Float),
		OnGameplayRoleChangeNotification(evt: handle:GameplayRoleChangeNotification) => (Bool),
		IsHackingPlayer() => (Bool),
		IsQuickHackAble() => (Bool),
		IsQuickHacksExposed() => (Bool),
		IsBreached() => (Bool),
		IsBackdoor() => (Bool),
		IsActiveBackdoor() => (Bool),
		IsBodyDisposalPossible() => (Bool),
		IsControllingDevices() => (Bool),
		HasAnySlaveDevices() => (Bool),
		IsFastTravelPoint() => (Bool),
		IsExplosive() => (Bool),
		HasImportantInteraction() => (Bool),
		HasAnyDirectInteractionActive() => (Bool),
		ShouldEnableRemoteLayer() => (Bool),
		IsTechie() => (Bool),
		IsSolo() => (Bool),
		IsNetrunner() => (Bool),
		IsAnyPlaystyleValid() => (Bool),
		IsHackingSkillCheckActive() => (Bool),
		IsDemolitionSkillCheckActive() => (Bool),
		IsEngineeringSkillCheckActive() => (Bool),
		CanPassEngineeringSkillCheck() => (Bool),
		CanPassDemolitionSkillCheck() => (Bool),
		CanPassHackingSkillCheck() => (Bool),
		HasDirectActionsActive() => (Bool),
		HasActiveDistraction() => (Bool),
		HasActiveQuickHackUpload() => (Bool),
		IsInvestigating() => (Bool),
		IsInvestigatingObject(targetID: handle:gameObject) => (Bool),
		IsTaggedinFocusMode() => (Bool),
		IsQuest() => (Bool),
		OnSetAsQuestImportantEvent(evt: handle:gameSetAsQuestImportantEvent) => (Bool),
		ToggleQuestImportance(isImportant: Bool),
		MarkAsQuest(isQuest: Bool),
		IsGrouppedClue() => (Bool),
		HasAnyClue() => (Bool),
		IsClueInspected() => (Bool),
		GetLinkedClueData(clueIndex: Int32) => (LinkedFocusClueData),
		GetAvailableClueIndex() => (Int32),
		PurgeScannerBlackboard(),
		OnlinkedClueTagEvent(evt: handle:linkedClueTagEvent) => (Bool),
		CompileScannerChunks() => (Bool),
		FillObjectDescription() => (arr: array:gameScanningTooltipElementDef),
		GetScannableObjects() => (array:gameScanningTooltipElementDef),
		ShouldShowScanner() => (Bool),
		IsScaningCluesBlocked() => (Bool),
		IsBraindanceBlocked() => (Bool),
		IsPhotoModeBlocked() => (Bool),
		ResolveFocusClueExtendedDescription(clueIndex: Int32),
		ResolveFocusClueConclusion(clueIndex: Int32, conclusionData: gameScanningTooltipElementDef),
		ResolveFacts(facts: array:SFactOperationData),
		GetFocusClueSystem() => (handle:FocusCluesSystem),
		IsAnyClueEnabled() => (Bool),
		IsCurrentTarget() => (Bool),
		IsCurrentlyScanned() => (Bool),
		GetFreeWorkspotRefForAIAction(aiAction: gamedataWorkspotActionType) => (NodeRef),
		GetFreeWorkspotDataForAIAction(aiAction: gamedataWorkspotActionType) => (handle:WorkspotEntryData),
		HasFreeWorkspotForInvestigation() => (Bool),
		GetFreeWorkspotsCountForAIAction(aiAction: gamedataWorkspotActionType) => (Int32),
		GetNumberOfWorkpotsForAIAction(aiAction: gamedataWorkspotActionType) => (Int32),
		GetTotalCountOfInvestigationSlots() => (Int32),
		GetStimBroadcasterComponent() => (handle:StimBroadcasterComponent),
		GetUISlotComponent() => (handle:entSlotComponent),
		GetSquadMemberComponent() => (handle:SquadMemberBaseComponent),
		GetStatusEffectComponent() => (handle:gameStatusEffectComponent),
		GetSourceShootComponent() => (handle:gameSourceShootComponent),
		GetTargetShootComponent() => (handle:gameTargetShootComponent),
		OnAnimFeatureReplicated(inputName: CName, value: handle:animAnimFeature),
		OnAnimEventReplicated(eventName: CName),
		GetPlaystyleMappinLocalPos() => (Vector4),
		GetPlaystyleMappinSlotWorldPos() => (Vector4),
		GetPlaystyleMappinSlotWorldTransform() => (WorldTransform),
		GetFxResourceByKey(key: CName) => (gameFxResource),
		OnDelayPrereqEvent(evt: handle:DelayPrereqEvent) => (Bool),
		OnTriggerAttackEffectorWithDelay(evt: handle:TriggerAttackEffectorWithDelay) => (Bool),
		OnToggleOffMeshConnections(evt: handle:ToggleOffMeshConnections) => (Bool),
		EnableOffMeshConnections(player: Bool, npc: Bool),
		DisableOffMeshConnections(player: Bool, npc: Bool),
		OnPhysicalDestructionEvent(evt: handle:entPhysicalDestructionEvent) => (Bool),
		GetHudManager() => (handle:HUDManager),
		TriggerMenuEvent(eventName: CName),
		GetAcousticQuerryStartPoint() => (Vector4),
		CanBeInvestigated() => (Bool),
		GetPreventionSystem() => (handle:PreventionSystem),
		GetLootQuality() => (gamedataQuality),
		GetIsIconic() => (Bool),
		GetAnimationSystemForcedVisibilityManager() => (handle:AnimationSystemForcedVisibilityManager),
		ToggleForcedVisibilityInAnimSystem(sourceName: CName, isVisibe: Bool, transitionTime: Float, entityID: entEntityID, forcedVisibleOnlyInFrustum: Bool),
		ClearForcedVisibilityInAnimSystem(),
		HasVisibilityForcedInAnimSystem() => (Bool),
		OnToggleVisibilityInAnimSystemEvent(evt: handle:ToggleVisibilityInAnimSystemEvent) => (Bool),
		OnSetGlitchOnUIEvent(evt: handle:SetGlitchOnUIEvent) => (Bool),
		OnCustomUIAnimationEvent(evt: handle:CustomUIAnimationEvent) => (Bool),
		OnSmartGunLockEvent(evt: handle:gamesmartGunSmartGunLockEvent) => (Bool),
		Dispose(),
		GetEntity() => (entEntityGameInterface),
		FindComponentByName(componentName: CName) => (handle:entIComponent),
		QueueEvent(evt: handle:redEvent),
		GetEntityID() => (entEntityID),
		CanServiceEvent(evtName: CName) => (Bool),
		QueueEventForNodeID(nodeID: worldGlobalNodeRef, evt: handle:redEvent) => (Bool),
		QueueEventForEntityID(entityID: entEntityID, evt: handle:redEvent) => (Bool),
		IsControlledByAnyPeer() => (Bool),
		IsControlledByLocalPeer() => (Bool),
		IsControlledByAnotherClient() => (Bool),
		IsAttached() => (Bool),
		IsReplicated() => (Bool),
		GetControllingPeerID() => (Uint32),
		MatchVisualTag(visualTag: CName) => (Bool),
		MatchVisualTags(visualTags: array:CName) => (Bool),
		GetWorldPosition() => (Vector4),
		GetWorldOrientation() => (Quaternion),
		GetWorldYaw() => (Float),
		GetWorldForward() => (Vector4),
		GetWorldRight() => (Vector4),
		GetWorldUp() => (Vector4),
		PrefetchAppearanceChange(newAppearanceName: CName),
		ScheduleAppearanceChange(newAppearanceName: CName),
		GetCurrentAppearanceName() => (CName),
		OnInspectorDebugDraw() => (box: handle:rendInfoBox),
		GetWorldTransform() => (WorldTransform),
		ToString() => (String),
		GetClassName() => (CName),
		IsA(className: CName) => (Bool),
		IsExactlyA(className: CName) => (Bool),
	},
	staticFunctions: {
		DetectScriptableCycles(),
	},
	properties: {
		controller: handle:ScriptableDC,
		wasVisible: Bool,
		isVisible: Bool,
		controllerTypeName: CName,
		deviceState: EDeviceStatus,
		uiComponent: whandle:IWorldWidgetComponent,
		screenDefinition: SUIScreenDefinition,
		isUIdirty: Bool,
		personalLinkComponent: handle:workWorkspotResourceComponent,
		durabilityType: EDeviceDurabilityType,
		disassemblableComponent: handle:DisassemblableComponent,
		localization: handle:entLocalizationStringComponent,
		IKslotComponent: handle:entSlotComponent,
		ToggleZoomInteractionWorkspot: handle:workWorkspotResourceComponent,
		cameraZoomComponent: handle:gameCameraComponent,
		slotComponent: handle:entSlotComponent,
		isInitialized: Bool,
		isLogicready: Bool,
		isInsideLogicArea: Bool,
		cameraComponent: handle:gameCameraComponent,
		ZoomUIListenerID: Uint32,
		ZoomStateMachineListenerID: Uint32,
		activeStatusEffect: TweakDBID,
		activeProgramToUploadOnNPC: TweakDBID,
		isQhackUploadInProgerss: Bool,
		scanningTweakDBRecord: TweakDBID,
		updateRunning: Bool,
		updateID: gameDelayID,
		delayedUpdateDeviceStateID: gameDelayID,
		blackboard: handle:gameIBlackboard,
		currentPlayerTargetCallbackID: Uint32,
		wasLookedAtLast: Bool,
		lastPingSourceID: entEntityID,
		networkGridBeamFX: gameFxResource,
		fxResourceMapper: handle:FxResourceMapperComponent,
		effectVisualization: handle:AreaEffectVisualizationComponent,
		resourceLibraryComponent: handle:ResourceLibraryComponent,
		gameplayRoleComponent: handle:GameplayRoleComponent,
		personalLinkHackSend: Bool,
		personalLinkFailsafeID: gameDelayID,
		wasAnimationFastForwarded: Bool,
		contentScale: TweakDBID,
		networkGridBeamOffset: Vector4,
		areaEffectsData: array:SAreaEffectData,
		areaEffectsInFocusMode: array:SAreaEffectTargetData,
		debugOptions: DebuggerProperties,
		persistentState: handle:gamePersistentState,
		playerSocket: gamePlayerSocket,
		tags: redTagList,
		displayName: LocalizationString,
		displayDescription: LocalizationString,
		audioResourceName: CName,
		visibilityCheckDistance: Float,
		forceRegisterInHudManager: Bool,
		prereqListeners: array:handle:GameObjectListener,
		statusEffectListeners: array:handle:StatusEffectTriggerListener,
		outlineRequestsManager: handle:OutlineRequestManager,
		outlineFadeCounter: Int32,
		fadeOutStarted: Bool,
		lastEngineTime: Float,
		accumulatedTimePasssed: Float,
		scanningComponent: handle:gameScanningComponent,
		visionComponent: handle:gameVisionModeComponent,
		isHighlightedInFocusMode: Bool,
		statusEffectComponent: handle:gameStatusEffectComponent,
		lastFrameGreen: handle:OutlineRequest,
		lastFrameRed: handle:OutlineRequest,
		markAsQuest: Bool,
		e3HighlightHackStarted: Bool,
		e3ObjectRevealed: Bool,
		forceHighlightSource: entEntityID,
		workspotMapper: handle:WorkspotMapperComponent,
		stimBroadcaster: handle:StimBroadcasterComponent,
		uiSlotComponent: handle:entSlotComponent,
		squadMemberComponent: handle:SquadMemberBaseComponent,
		sourceShootComponent: handle:gameSourceShootComponent,
		targetShootComponent: handle:gameTargetShootComponent,
		receivedDamageHistory: array:DamageHistoryEntry,
		forceDefeatReward: Bool,
		killRewardDisabled: Bool,
		willDieSoon: Bool,
		isScannerDataDirty: Bool,
		hasVisibilityForcedInAnimSystem: Bool,
		isDead: Bool,
		customCameraTarget: ECustomCameraTarget,
		renderSceneLayerMask: RenderSceneLayerMask,
	}
}