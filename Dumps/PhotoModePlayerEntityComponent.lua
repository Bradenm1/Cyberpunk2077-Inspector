{
	name: PhotoModePlayerEntityComponent,
	functions: {
		OnGameAttach(),
		OnGameDetach(),
		HasAllItemsFinishedLoading() => (Bool),
		PutOnFakeItem(itemToAdd: gameItemID),
		RemoveAllItems(areas: array:gameSEquipArea),
		ListAllItems(),
		GetAllAvailableItemTypes() => (array:gamedataItemType),
		GetWeaponInHands() => (gamedataItemType),
		IsItemOfThisType(item: gameItemID, typesList: array:gamedataItemType) => (Bool),
		AddAmmoForWeapon(weaponID: gameItemID),
		EquipWeaponOfThisType(typesList: array:gamedataItemType),
		OnItemAddedToSlot(evt: handle:gameAttachmentSlotEventsItemAddedToSlot) => (Bool),
		StopWeaponShootEffects(),
		SetMuzzleEffectEnabled(enabled: Bool),
		IsMuzzleFireSupported() => (Bool),
		ClearInventory(),
		SetupUnderwear(),
		SetupInventory(isCurrentPlayerObjectCustomizable: Bool),
		GetPhotoModeEquipAreas(equipmentData: handle:EquipmentSystemPlayerData, withUnderwear: Bool) => (array:gameSEquipArea),
		GetPhotoModeSlots(withUnderwear: Bool) => (array:gamedataEquipmentArea),
		GetEquipArea(equipmentData: handle:EquipmentSystemPlayerData, areaType: gamedataEquipmentArea) => (gameSEquipArea),
		GetOwner() => (handle:gameObject),
		GetGameTime() => (GameTime),
		GetEngineTime() => (EngineTime),
		GetSimTime() => (EngineTime),
		GetAudioSystem() => (handle:gameGameAudioSystem),
		GetDebugVisualizerSystem() => (handle:gameDebugVisualizerSystem),
		GetDelaySystem() => (handle:gameDelaySystem),
		GetGameEffectSystem() => (handle:gameEffectSystem),
		GetPlayerSystem() => (handle:cpPlayerSystem),
		GetQuestsSystem() => (handle:questQuestsSystem),
		GetSceneSystem(),
		GetStatsSystem() => (handle:gameStatsSystem),
		GetStatPoolsSystem() => (handle:gameStatPoolsSystem),
		GetTargetingSystem() => (handle:gametargetingTargetingSystem),
		GetTimeSystem() => (handle:gameTimeSystem),
		GetTransactionSystem() => (handle:gameTransactionSystem),
		GetPersistencySystem() => (handle:gamePersistencySystem),
		GetVisionModeSystem() => (handle:gameVisionModeSystem),
		GetFriendlyFireSystem(),
		GetGameRulesSystem(),
		GetLoSFinderSystem(),
		GetPS() => (handle:gameComponentPS),
		GetBasePS() => (handle:gameComponentPS),
		GetPersistentID() => (gamePersistentID),
		GetEntity() => (whandle:entEntity),
		FindComponentByName(componentName: CName) => (whandle:entIComponent),
		GetName() => (CName),
		IsEnabled() => (Bool),
		Toggle(on: Bool),
		QueueEntityEvent(ev: handle:redEvent),
		RegisterRenderDebug(filterName: String, functionName: CName),
		ToString() => (String),
		GetClassName() => (CName),
		IsA(className: CName) => (Bool),
		IsExactlyA(className: CName) => (Bool),
	},
	staticFunctions: {
		DetectScriptableCycles(),
	},
	properties: {
		usedWeaponItemId: gameItemID,
		currentWeaponInSlot: gameItemID,
		availableItemTypesList: array:gamedataItemType,
		availableItemsList: array:whandle:gameItemData,
		swapMeeleWeaponItemId: gameItemID,
		swapHangunWeaponItemId: gameItemID,
		swapRifleWeaponItemId: gameItemID,
		swapShootgunWeaponItemId: gameItemID,
		fakePuppet: whandle:gamePuppet,
		playerPuppet: whandle:PlayerPuppet,
		TS: handle:gameTransactionSystem,
		loadingItems: array:gameItemID,
		itemsLoadingTimeout: Float,
		muzzleEffectEnabled: Bool,
		priority: Uint32,
		persistentState: handle:gamePersistentState,
		name: CName,
		isReplicable: Bool,
		id: CRUID,
	}
}