{
	name: Quaternion,
	functions: {
	},
	staticFunctions: {
		SetIdentity(quat: Quaternion),
		SetInverse(quat: Quaternion),
		GetXAxis(quat: Quaternion) => (Vector4),
		GetYAxis(quat: Quaternion) => (Vector4),
		GetZAxis(quat: Quaternion) => (Vector4),
		GetForward(quat: Quaternion) => (Vector4),
		GetRight(quat: Quaternion) => (Vector4),
		GetUp(quat: Quaternion) => (Vector4),
		ToMatrix(quat: Quaternion) => (Matrix),
		ToEulerAngles(quat: Quaternion) => (EulerAngles),
		GetAxes(quat: Quaternion) => (forward: Vector4, right: Vector4, up: Vector4),
		Rand(min: Float, max: Float) => (Quaternion),
		Dot(a: Quaternion, b: Quaternion) => (Float),
		Transform(quat: Quaternion, v: Vector4) => (Vector4),
		TransformInverse(quat: Quaternion, v: Vector4) => (Vector4),
		Normalize(quat: Quaternion),
		Normalized(quat: Quaternion) => (Quaternion),
		SetInverse(),
		SetShortestRotation(q: Quaternion, v1: Vector4, v2: Vector4),
		SetAxisAngle(axis: Vector4, angle: Float) => (q: Quaternion),
		SetXRot(q: Quaternion, angle: Float),
		SetYRot(q: Quaternion, angle: Float),
		SetZRot(q: Quaternion, angle: Float),
		Lerp(q1: Quaternion, q2: Quaternion, t: Float) => (Quaternion),
		Slerp(q1: Quaternion, q2: Quaternion, t: Float) => (Quaternion),
		GetAngle(q: Quaternion) => (Float),
		GetAxis(q: Quaternion) => (Vector4),
		Magnitude(quat: Quaternion) => (Float),
		MagnitudeSq(quat: Quaternion) => (Float),
		MulInverse(q1: Quaternion, q2: Quaternion) => (Quaternion),
		Conjugate(q: Quaternion) => (Quaternion),
		BuildFromDirectionVector(direction: Vector4, up: Vector4) => (Quaternion),
	},
	properties: {
		i: Float,
		j: Float,
		k: Float,
		r: Float,
	}
}