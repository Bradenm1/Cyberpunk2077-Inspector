{
	name: movePolicies,
	functions: {
		SetDestinationPosition(position: Vector4),
		SetInvalidDestinationPosition(),
		SetDestinationObject(object: handle:gameObject),
		SetDestinationCover(cover: Uint64),
		SetStrafingTarget(object: handle:gameObject),
		SetDestinationOrientation(oreiantation: Quaternion),
		SetStrafingPosition(position: Vector4),
		SetDistancePolicy(distance: Float, tolerance: Float),
		SetMinDistancePolicy(minDistance: Float),
		SetStrafingPredictionTime(strafingPredictionTime: Float, strafingPredictionVelocityMax: Float),
		SetStrafingRotationOffset(angle: Float),
		SetDynamicTargetUpdateTimer(updateTimer: Float, distance: Float),
		SetCirclingPolicy(direction: moveCirclingDirection),
		SetStopOnObstacle(stopOnObstacle: Bool),
		SetAvoidObstacleWithinTolerance(avoidWiyhinTolerance: Bool),
		SetKeepLineOfSight(los: moveLineOfSight),
		SetUseLineOfSitePrecheck(precheck: Bool),
		SetMovementType(movementType: moveMovementType),
		SetCollisionAvoidancePolicy(avoidance: Bool, reservation: Bool),
		SetInRestrictedArea(inRestrictedArea: Bool),
		SetUseOffMeshAllowedTags(useOffMeshBlockedTags: Bool),
		AddAllowedTag(tag: CName),
		SetUseOffMeshBlockedTags(useOffMeshAllowedTags: Bool),
		AddBlockedTag(tag: CName),
		SetAvoidThreat(avoidThreat: Bool),
		SetGetOutOfWay(getOutOfWay: Bool),
		SetUseStartStop(useStart: Bool, useStop: Bool),
		SetIgnoreNavigation(ignore: Bool),
		GetMovementType() => (moveMovementType),
		SetIdleTurnsDeadZoneAngle(angle: Float),
		GetIdleTurnsDeadZoneAngle() => (Float),
		SetUseFollowSlots(use: Bool),
		SetUseSymmetricAnglesScores(use: Bool),
		SetSquadInfo(squadIndex: Uint32, squadSize: Uint32),
		SetMaxPathLengthToDirectDistanceRatioCurve(curveName: CName),
		GetMaxPathLengthToDirectDistanceRatioCurve() => (CName),
		SetMaxPathLength(length: Float),
		GetMaxPathLength() => (Float),
		SetDebugName(debugName: CName),
		SetTweakDBID(id: TweakDBID),
		SetPositionProvider(provider: handle:entIPositionProvider),
		SetStrafingPositionProvider(provider: handle:entIPositionProvider),
		SetCalculateStartTangent(calculateTangent: Bool),
		SetLocalTargetOffset(position: Vector4),
		SetCostModCircle(costModCircle: handle:worldNavigationScriptCostModCircle),
		ToString() => (String),
		GetClassName() => (CName),
		IsA(className: CName) => (Bool),
		IsExactlyA(className: CName) => (Bool),
	},
	staticFunctions: {
		GetInvalidPos() => (Vector4),
		DetectScriptableCycles(),
	},
	properties: {
		destination: Vector3,
		destinationTangent: Vector3,
		startTangent: Vector3,
		targetSmartObject: AIObjectId,
		targetWorkspot: handle:gameSetupWorkspotActionEvent,
		targetSmartObjectHash: Uint64,
		targetObject: whandle:gameObject,
		strafingTarget: moveStrafingTarget,
		useFollowSlots: Bool,
		followSlotOverrides: static:4,Vector3,
		hasLocalTargetOffset: Bool,
		localTargetOffset: Vector3,
		desiredDistance: Float,
		toleranceRadius: Float,
		minMovementDistance: Float,
		strafingRotationOffset: Float,
		minFollowerDistance: Float,
		maxFollowerDistance: Float,
		movementType: moveMovementType,
		circlingDirection: moveCirclingDirection,
		stopOnObstacle: Bool,
		avoidObstacleWithinTolerance: Bool,
		useCollisionAvoidance: Bool,
		useDestReservation: Bool,
		inRestrictedArea: Bool,
		isSpline: Bool,
		startFromClosestPoint: Bool,
		ignoreNavigation: Bool,
		useStart: Bool,
		useStop: Bool,
		isEvaluated: Bool,
		useOffMeshAllowedTags: Bool,
		useOffMeshBlockedTags: Bool,
	}
}