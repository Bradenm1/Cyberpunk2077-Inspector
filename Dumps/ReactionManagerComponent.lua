{
	name: ReactionManagerComponent,
	functions: {
		OnGameAttach(),
		OnPlayerMuntedToMyVehicle(evt: handle:PlayerMuntedToMyVehicle) => (Bool),
		OnSenseVisibilityEvent(evt: handle:senseVisibilityEvent) => (Bool),
		OnLookedAtEvent(evt: handle:LookedAtEvent) => (Bool),
		OnDetectedEvent(evt: handle:senseOnDetectedEvent) => (Bool),
		OnSecurityAreaCrossingPerimeter(evt: handle:SecurityAreaCrossingPerimeter) => (Bool),
		OnSecuritySystemOutput(evt: handle:SecuritySystemOutput) => (Bool),
		OnReprimandEscalationEvent(evt: handle:ReprimandEscalationEvent) => (Bool),
		StartEscalateReprimand(),
		ReprimandEscalation(),
		DeescalateReprimand(),
		OnReprimandUpdate(evt: handle:ReprimandUpdate) => (Bool),
		RecentReaction(behaviorName: gamedataOutput) => (Bool),
		OnSuspiciousObjectEvent(evt: handle:AIbehaviorSuspiciousObjectEvent) => (Bool),
		HelpAlly(ally: whandle:gameObject, attacker: whandle:entEntity),
		ReactToSecurityOutput(evt: handle:SecuritySystemOutput),
		ReflectSecSysStateToHLS(securityState: ESecuritySystemState) => (Bool),
		TriggerAlerted(),
		TriggerCombat(trespasser: whandle:gameObject),
		OnReactionBehaviorStatus(evt: handle:ReactionBehaviorStatus) => (Bool),
		OnEndLookatEvent(evt: handle:EndLookatEvent) => (Bool),
		OnTerminateReactionLookatEvent(evt: handle:TerminateReactionLookatEvent) => (Bool),
		OnRepeatLookatEvent(evt: handle:RepeatLookatEvent) => (Bool),
		OnEventReceived(stimEvent: handle:senseStimuliEvent) => (Bool),
		OnAIEvent(aiEvent: handle:AIAIEvent) => (Bool),
		Initialiaze(),
		CacheEvent(stimEvent: handle:senseStimuliEvent),
		CacheReaction(reactionData: handle:AIReactionData),
		IsEventDuplicated(stimEvent: handle:senseStimuliEvent) => (Bool),
		IsDuplicate(stimEvent: handle:senseStimuliEvent, cacheStim: handle:senseStimuliEvent) => (Bool),
		OnStimThresholdEvent(thresholdEvent: handle:StimThresholdEvent) => (Bool),
		OnStealthStimThresholdEvent(thresholdEvent: handle:StealthStimThresholdEvent) => (Bool),
		GetIgnoreList() => (array:entEntityID),
		IsStimuliEventValid(stimEvent: handle:senseStimuliEvent) => (Bool),
		ShouldEventBeProcessed(stimEvent: handle:senseStimuliEvent) => (Bool),
		ShouldStimBeProcessed(stimEvent: handle:senseStimuliEvent) => (Bool),
		ProcessStimParams(stimEvent: handle:senseStimuliEvent) => (StimParams),
		FillStimData(stimEvent: handle:senseStimuliEvent) => (StimEventData),
		IsReactionAvailableInPreset(stimTrigger: gamedataStimType) => (Bool),
		CreateFearThreashold(),
		AddReactionValueToStatPool(reactionData: handle:AIReactionData),
		GetRules() => (array:whandle:gamedataRule_Record),
		GetReactionOutput(stimType: gamedataStimType, rules: array:whandle:gamedataRule_Record) => (ReactionOutput),
		StimRule(rule: whandle:gamedataRule_Record, stimType: gamedataStimType) => (Bool),
		ProcessReactionOutput(stimEvent: handle:senseStimuliEvent, stimParams: StimParams),
		UpdateActiveReaction(reaction: ReactionOutput, stimEvent: handle:senseStimuliEvent, stimData: StimEventData, updateByActive: Bool),
		TriggerBehaviorReaction(reaction: ReactionOutput, stimEvent: handle:senseStimuliEvent, stimData: StimEventData),
		GetStimSource(stimEvent: handle:senseStimuliEvent) => (Vector4),
		TriggerCombatFromHostileStim(stimType: gamedataStimType) => (Bool),
		TriggerAlertedFromHostileStim(stimEvent: handle:senseStimuliEvent) => (Bool),
		IsSquadMateInDanger(reaction: gamedataOutput) => (Bool),
		FirstSquadMemberReaction() => (Bool),
		TriggerPendingReaction(),
		TriggerReactionBehaviorForCrowd(stimEvent: handle:senseStimuliEvent, reaction: gamedataOutput, initAnimInWorkspot: Bool),
		TriggerReactionBehaviorForCrowd(target: handle:gameObject, reaction: gamedataOutput, initAnimInWorkspot: Bool, sourcePosition: Vector4),
		OnDelayStimEvent(evt: handle:DelayStimEvent) => (Bool),
		ProcessEnvironmentalHazard(stimEvent: handle:senseStimuliEvent),
		DelayEnvironmentalHazardEvent(stimEvent: handle:senseStimuliEvent) => (gameDelayID),
		OnCleanEnvironmentalHazardEvent(cleanEnvironmentalHazardEvent: handle:CleanEnvironmentalHazardEvent) => (Bool),
		InitCrowd(),
		ShouldStimBeProcessedByCrowd(stimEvent: handle:senseStimuliEvent) => (Bool),
		HandleCrowdReaction(stimEvent: handle:senseStimuliEvent),
		OnCrowdReaction(reactionDelayEvent: handle:DelayedCrowdReactionEvent) => (Bool),
		SpreadFear(instigator: handle:gameObject, phase: Int32),
		ShouldFearInPlace(stimEvent: handle:senseStimuliEvent) => (Bool),
		TriggerFacialLookAtReaction(forceFear: Bool, playVO: Bool),
		TriggerFearFacial(phase: Int32),
		ResetFacial(cooldown: Float),
		OnResetLookatReactionEvent(evt: handle:ResetLookatReactionEvent) => (Bool),
		OnResetFacialEvent(evt: handle:ResetFacialEvent) => (Bool),
		CanTriggerExpressionLookAt() => (Bool),
		IsPlayerFearThreat() => (Bool),
		IsPlayerCarryingBody(playerPuppet: whandle:PlayerPuppet) => (Bool),
		SetCrowdRunningAwayAnimFeature(stimType: gamedataStimType),
		SafeToExitFear() => (Bool),
		SafeToExitPanicFear() => (Bool),
		SurrenderToLeave() => (Bool),
		CanTriggerReprimandOrder() => (Bool),
		CanAskToHolsterWeapon() => (Bool),
		NotifySecuritySystem(stimType: gamedataStimType, stimObject: handle:gameObject),
		SetWarningMessage(lockey: String),
		OnTriggerDelayedReactionEvent(evt: handle:TriggerDelayedReactionEvent) => (Bool),
		OnExitWorkspotSequenceEvent(evt: handle:ExitWorkspotSequenceEvent) => (Bool),
		OnCrowdSettingsEvent(evt: handle:CrowdSettingsEvent) => (Bool),
		GetFearReactionPhase(stimEvent: handle:senseStimuliEvent) => (Int32),
		ShouldInterruptCurrentFearStage(fearPhase: Int32) => (Bool),
		ConvertFearStageToFearPhase(fearStage: gameFearStage) => (Int32),
		GetSpreadFearPhase(stimEvent: handle:senseStimuliEvent) => (Int32),
		CanReactInVehicle(stimEvent: handle:senseStimuliEvent) => (Bool),
		OnCrowdCallingPoliceEvent(evt: handle:CrowdCallingPoliceEvent) => (Bool),
		CheckStalk(target: handle:gameObject, timeout: Float),
		CheckComfortZone(),
		OnDisturbingComfortZoneEvent(evt: handle:DisturbingComfortZone) => (Bool),
		OnCheckComfortZoneEvent(evt: handle:CheckComfortZoneEvent) => (Bool),
		GetOutputPriority(output: gamedataOutput) => (Float),
		DelayReaction(stimType: gamedataStimType) => (Bool),
		SelectFacialEmotion() => (lookAtData: LookAtData),
		MapLookAtVO(lookAtData: LookAtData) => (vo: CName),
		ActivateReactionLookAt(targetEntity: handle:entEntity, end: Bool, repeat: Bool, duration: Float, upperBody: Bool) => (Bool),
		DeactiveLookAt(repeat: Bool) => (Bool),
		OnReactionStarted(reactionData: handle:AIReactionData),
		GetCurrentStimTimeStamp() => (Float),
		GetCurrentStimThresholdValue() => (Int32),
		GetCurrentStealthStimTimeStamp() => (Float),
		GetCurrentStealthStimThresholdValue() => (Int32),
		AddInvestigatedBody(bodyID: entEntityID),
		OnAddInvestigatedBodyEvent(evt: handle:AddInvestigatorEvent) => (Bool),
		InformInvestigators(),
		OnBodyPickedUp(evt: handle:SetBodyPositionEvent) => (Bool),
		OnReactionEnded(),
		OnResetReactionEvent(evt: handle:ResetReactionEvent) => (Bool),
		OnBodyInvestigated(evt: handle:BodyInvestigatedEvent) => (Bool),
		CheckSquadInvestigation(stimEventData: StimEventData) => (Bool),
		GetOwnerPuppet() => (handle:ScriptedPuppet),
		HasCombatTarget() => (Bool),
		PickCloserTarget(newStimEvent: handle:senseStimuliEvent) => (updateByActive: Bool),
		DidTargetMakeMeAlerted(target: handle:gameObject) => (Bool),
		IsTargetInterestingForRecentSquadMates(target: handle:gameObject, ally: handle:gameObject) => (Bool),
		IsPlayerAiming() => (Bool),
		GetDesiredReactionData() => (handle:AIReactionData),
		GetActiveReactionData() => (handle:AIReactionData),
		GetDesiredReactionName() => (gamedataOutput),
		GetReactionBehaviorName() => (gamedataOutput),
		GetReactionCache() => (array:handle:AIReactionData),
		GetStimuliCache() => (array:handle:senseStimuliEvent),
		GetReceivedStimType() => (gamedataStimType),
		GetWorkSpotReactionFlag() => (Bool),
		IsTargetInterestingForPerception(target: handle:gameObject) => (Bool),
		GetPuppetReactionBlackboard() => (handle:gameIBlackboard),
		IsInitAnimShock(behavior: gamedataOutput) => (Bool),
		IsInitAnimCall(stim: gamedataStimType) => (Bool),
		StartProcess(affected: Bool),
		GetInPendingBehavior() => (Bool),
		GetReactionPreset() => (whandle:gamedataReactionPreset_Record),
		IsInPendingBehavior() => (Bool),
		IsAlertedByDeadBody() => (Bool),
		GetPreviousFearPhase() => (Int32),
		GetEnvironmentalHazards() => (array:handle:senseStimuliEvent),
		GetActiveStimPriority() => (gamedataStimPriority),
		GetActiveStimTarget() => (handle:gameObject),
		GetActiveStimSource() => (Vector4),
		IsInProcess() => (Bool),
		ShouldUpdateThreatPosition(stimEvent: handle:senseStimuliEvent) => (Bool),
		ShouldTriggerGrenadeDodgeBehavior(stimEvent: handle:senseStimuliEvent) => (Bool),
		CanTriggerPanicInCombat(stimEvent: handle:senseStimuliEvent) => (Bool),
		CanStimInterruptCombat(stimEvent: handle:senseStimuliEvent) => (Bool),
		ShouldAddToIgnoreList(stimType: gamedataStimType) => (Bool),
		IsTargetVisible(target: handle:gameObject) => (Bool),
		IsTargetDetected(target: handle:gameObject) => (Bool),
		SourceAttitude(source: whandle:gameObject, attitude: EAIAttitude) => (Bool),
		IsTargetInFront(target: whandle:gameObject, frontAngle: Float, meInFrontOfTarget: Bool) => (Bool),
		IsTargetBehind(target: whandle:gameObject, angle: Float, meBehindOfTarget: Bool) => (Bool),
		IsTargetInMovementDirection(target: whandle:gameObject) => (Bool),
		IsTargetClose(target: whandle:gameObject, distance: Float) => (Bool),
		TargetVerticalCheck(target: whandle:gameObject, distance: Float) => (Bool),
		CheckHearingDistance(stimEvent: handle:senseStimuliEvent) => (Bool),
		CheckVisibilityRaycast(stimEvent: handle:senseStimuliEvent) => (Bool),
		ValidVisualGunshotTarget(stimEvent: handle:senseStimuliEvent, reactionData: handle:AIReactionData) => (Bool),
		IsDirectStimuli(stimType: gamedataStimType) => (Bool),
		IsPublicZone(stimEvent: handle:senseStimuliEvent) => (Bool),
		IsPlayerInZone(zone: gamePSMZones) => (Bool),
		IgnoreStimIfNonFriendly(stimEvent: handle:senseStimuliEvent) => (Bool),
		IsSameStimulus(stimEvent: handle:senseStimuliEvent) => (Bool),
		IsSameSourceObject(stimEvent: handle:senseStimuliEvent) => (Bool),
		IgnoreStimIfFromSameSource(stimEvent: handle:senseStimuliEvent) => (Bool),
		IsInList(list: array:StimEventData, stimData: StimEventData) => (Bool),
		IsCategory(stimEvent: handle:senseStimuliEvent, category: CName) => (Bool),
		IsStimPriorityValid(stimEvent: handle:senseStimuliEvent, activePriority: gamedataStimPriority) => (Bool),
		IsTargetSquadAlly(target: whandle:gameObject) => (Bool),
		IsTargetMelee(target: handle:gameObject) => (Bool),
		IsTargetArmed(target: handle:gameObject) => (Bool),
		IsTargetRecentSquadAlly(target: whandle:gameObject) => (Bool),
		ShouldHelpAlly(stimType: gamedataStimType) => (Bool),
		ShouldPoliceReact(stimEvent: handle:senseStimuliEvent) => (Bool),
		ShouldBeDetected(stimType: gamedataStimType) => (Bool),
		SetBaseReactionPreset(ignoreSavedPreset: Bool),
		SetReactionPreset(reactionPreset: handle:gamedataReactionPreset_Record),
		MapReactionPreset(mappingName: String),
		ReevaluateReactionPreset(ignoreSavedPreset: Bool),
		CheckCrowd(),
		SetDeadBodyVisibleComponent(killer: handle:gameObject),
		SendEventToSquad(ignoreListEvent: handle:IgnoreListEvent),
		GetThreatDistanceSquared(threat: handle:gameObject) => (Float),
		GetFearAnimWrapper(fearPhase: Int32) => (CName),
		GetRandomFearLocomotionAnimWrapper(fearPhase: Int32, stimType: gamedataStimType) => (CName),
		ResetAllFearAnimWrappers(),
		IsFearLocomotionWrapperSet() => (Bool),
		ReevaluateReaction(),
		OnStanceLevelChanged(evt: handle:StanceStateChangeEvent) => (Bool),
		OnHighLevelStateDataEvent(evt: handle:gameeventsHighLevelStateDataEvent) => (Bool),
		OnRagdollEnabledEvent(evt: handle:entRagdollNotifyEnabledEvent) => (Bool),
		OnGameDetach(),
		OnDeadBodyEvent(evt: handle:DeadBodyEvent) => (Bool),
		OnIgnoreListEvent(evt: handle:IgnoreListEvent) => (Bool),
		OnNPCRoleChangeEvent(evt: handle:NPCRoleChangeEvent) => (Bool),
		OnWorkspotStartedEvent(evt: handle:workWorkspotStartedEvent) => (Bool),
		OnWorkspotFinishedEvent(evt: handle:workWorkspotFinishedEvent) => (Bool),
		OnStatusEffectApplied(evt: handle:gameeventsApplyStatusEffectEvent) => (Bool),
		OnStatusEffectRemoved(evt: handle:gameeventsRemoveStatusEffect) => (Bool),
		OnReactionFinishedEvent(evt: handle:workReactionFinishedEvent) => (Bool),
		OnReevaluatePresetEvent(evt: handle:ReevaluatePresetEvent) => (Bool),
		OnReactionChangeRequestEvent(evt: handle:gameeventsReactionChangeRequestEvent) => (Bool),
		OnPendingBehaviorChanged(value: Bool) => (Bool),
		OnAttitudeGroupChanged(evt: handle:gameeventsAttitudeGroupChangedEvent) => (Bool),
		OnCrosswalkEvent(evt: handle:gameinteractionsCrosswalkEvent) => (Bool),
		OnBumpEvent(evt: handle:gameinteractionsBumpEvent) => (Bool),
		PlayBumpInWorkspot(side: gameinteractionsBumpSide, direction: Vector4),
		OnVehicleHit(evt: handle:gameeventsVehicleHitEvent) => (Bool),
		OnPlayerProximityStartEvent(evt: handle:worldPlayerProximityStartEvent) => (Bool),
		OnPlayerProximityStopEvent(evt: handle:worldPlayerProximityStopEvent) => (Bool),
		OnProximityLookatEvent(evt: handle:ProximityLookatEvent) => (Bool),
		OnInCrowd(evt: handle:gameInCrowd) => (Bool),
		OnOutOfCrowd(evt: handle:gameOutOfCrowd) => (Bool),
		IsInTrafficLane() => (Bool),
		OnSwapPreset(evt: handle:SwapPresetEvent) => (Bool),
		OnRainEvent(evt: handle:worldRainEvent) => (Bool),
		OnDistrurbComfortZoneAggressiveEvent(evt: handle:DistrurbComfortZoneAggressiveEvent) => (Bool),
		OnAreaEnter(trigger: handle:entAreaEnteredEvent) => (Bool),
		OnAreaExit(trigger: handle:entAreaExitedEvent) => (Bool),
		OnExplorationEnteredEvent(evt: handle:moveExplorationEnteredEvent) => (Bool),
		OnExplorationLeftEvent(evt: handle:moveExplorationLeftEvent) => (Bool),
		GetOwner() => (handle:gameObject),
		GetGameTime() => (GameTime),
		GetEngineTime() => (EngineTime),
		GetSimTime() => (EngineTime),
		GetAudioSystem() => (handle:gameGameAudioSystem),
		GetDebugVisualizerSystem() => (handle:gameDebugVisualizerSystem),
		GetDelaySystem() => (handle:gameDelaySystem),
		GetGameEffectSystem() => (handle:gameEffectSystem),
		GetPlayerSystem() => (handle:cpPlayerSystem),
		GetQuestsSystem() => (handle:questQuestsSystem),
		GetSceneSystem(),
		GetStatsSystem() => (handle:gameStatsSystem),
		GetStatPoolsSystem() => (handle:gameStatPoolsSystem),
		GetTargetingSystem() => (handle:gametargetingTargetingSystem),
		GetTimeSystem() => (handle:gameTimeSystem),
		GetTransactionSystem() => (handle:gameTransactionSystem),
		GetPersistencySystem() => (handle:gamePersistencySystem),
		GetVisionModeSystem() => (handle:gameVisionModeSystem),
		GetFriendlyFireSystem(),
		GetGameRulesSystem(),
		GetLoSFinderSystem(),
		GetPS() => (handle:gameComponentPS),
		GetBasePS() => (handle:gameComponentPS),
		GetPersistentID() => (gamePersistentID),
		GetEntity() => (whandle:entEntity),
		FindComponentByName(componentName: CName) => (whandle:entIComponent),
		GetName() => (CName),
		IsEnabled() => (Bool),
		Toggle(on: Bool),
		QueueEntityEvent(ev: handle:redEvent),
		RegisterRenderDebug(filterName: String, functionName: CName),
		ToString() => (String),
		GetClassName() => (CName),
		IsA(className: CName) => (Bool),
		IsExactlyA(className: CName) => (Bool),
	},
	staticFunctions: {
		DetectScriptableCycles(),
	},
	properties: {
		activeReaction: handle:AIReactionData,
		desiredReaction: handle:AIReactionData,
		stimuliCache: array:handle:senseStimuliEvent,
		reactionCache: array:handle:AIReactionData,
		reactionPreset: handle:gamedataReactionPreset_Record,
		puppetReactionBlackboard: handle:gameIBlackboard,
		receivedStimType: gamedataStimType,
		inCrowd: Bool,
		inTrafficLane: Bool,
		desiredFearPhase: Int32,
		previousFearPhase: Int32,
		NPCRadius: Float,
		bumpTriggerDistanceBufferMounted: Float,
		bumpTriggerDistanceBufferCrouched: Float,
		delayReactionEventID: gameDelayID,
		delay: Vector2,
		delayDetectionEventID: gameDelayID,
		delayStimEventID: gameDelayID,
		resetReactionDataID: gameDelayID,
		callingPoliceID: gameDelayID,
		lookatEvent: handle:entLookAtAddEvent,
		ignoreList: array:entEntityID,
		investigationList: array:StimEventData,
		pendingReaction: handle:AIReactionData,
		ovefloodCooldown: Float,
		stanceState: gamedataNPCStanceState,
		highLevelState: gamedataNPCHighLevelState,
		aiRole: EAIRole,
		pendingBehaviorCb: Uint32,
		inPendingBehavior: Bool,
		cacheSecuritySysOutput: handle:SecuritySystemOutput,
		environmentalHazards: array:handle:senseStimuliEvent,
		environmentalHazardsDelayIDs: array:gameDelayID,
		stolenVehicle: whandle:vehicleBaseObject,
		isAlertedByDeadBody: Bool,
		isInCrosswalk: Bool,
		owner_id: entEntityID,
		presetName: CName,
		inProcess: Bool,
		updateByActive: Bool,
		personalities: array:gamedataStatType,
		workspotReactionPlayed: Bool,
		inReactionSequence: Bool,
		playerProximity: Bool,
		fearToIdleDistance: Vector2,
		exitWorkspotAim: Vector2,
		bumpedRecently: Int32,
		bumpTimestamp: Float,
		bumpReactionInProgress: Bool,
		crowdAimingReactionDistance: Float,
		fearInPlaceAroundDistance: Float,
		lookatRepeat: Bool,
		disturbingComfortZoneInProgress: Bool,
		entereProximityRecently: Int32,
		comfortZoneTimestamp: Float,
		disturbComfortZoneEventId: gameDelayID,
		checkComfortZoneEventId: gameDelayID,
		spreadingFearEventId: gameDelayID,
		proximityLookatEventId: gameDelayID,
		resetFacialEventId: gameDelayID,
		exitWorkspotSequenceEventId: gameDelayID,
		fastWalk: Bool,
		createThreshold: Bool,
		initialized: Bool,
		initCrowd: Bool,
		facialCooldown: Float,
		disturbComfortZoneAggressiveEventId: gameDelayID,
		backOffInProgress: Bool,
		backOffTimestamp: Float,
		crowdFearStage: gameFearStage,
		fearLocomotionWrapper: Bool,
		successfulFearDeescalation: Float,
		willingToCallPolice: Bool,
		deadBodyInvestigators: array:entEntityID,
		deadBodyStartingPosition: Vector4,
		currentStimThresholdValue: Int32,
		timeStampThreshold: Float,
		currentStealthStimThresholdValue: Int32,
		stealthTimeStampThreshold: Float,
		priority: Uint32,
		persistentState: handle:gamePersistentState,
		name: CName,
		isReplicable: Bool,
		id: CRUID,
	}
}