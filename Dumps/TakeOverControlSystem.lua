{
	name: TakeOverControlSystem,
	functions: {
		GetControlledObject() => (handle:gameObject),
		IsInputLockedFromQuest() => (Bool),
		IsDeviceControlled() => (Bool),
		IsSavingLocked() => (Bool),
		CleanupControlledObject(),
		OnEnableFastTravelRequest(request: handle:LockTakeControlAction),
		OnLockDeviceChainCreationRequest(request: handle:LockDeviceChainCreation),
		IskDeviceChainCreationLocked() => (Bool),
		LockInputFromQuestRequest(isLocked: Bool),
		ForceChainFromQuestRequest(isChainForced: Bool),
		OnRequestTakeControl(request: handle:RequestTakeControl),
		OnRemoveFromChainRequest(request: handle:RemoveFromChainRequest),
		OnRequestReleaseControl(request: handle:RequestReleaseControl),
		OnRequestQuestTakeControlInputLock(request: handle:RequestQuestTakeControlInputLock),
		ReleaseCurrentObject(),
		RegisterAsCurrentObject(entityID: entEntityID),
		RegisterBBActiveObjectAsCurrentObject(),
		RegisterObjectHandle(EntID: entEntityID),
		GetChain() => (array:SWidgetPackage),
		TryFillControlBlackboard(evt: handle:RequestTakeControl),
		TryFillControlBlackboardByForce(evt: handle:RequestTakeControl),
		RegisterSystemOnInput(register: Bool),
		ShowChainControls(show: Bool),
		PSMSetIsPlayerControllDevice(controllsDevice: Bool),
		ToggleToNextControlledDevice(),
		ToggleToPreviousControlledDevice(),
		ToggleToOtherDeviceFromChain(otherPackage: SWidgetPackage),
		ToggleToMainPlayerObject(),
		GetPackageFromChainNextToMe(higher: Bool) => (SWidgetPackage, isValid: Bool),
		GetCurrentActiveDeviceChainBlackboardIndex(deviceChain: array:SWidgetPackage) => (Int32),
		EnablePlayerTPPRepresenation(enable: Bool),
		CleanupChainBlackboard(),
		CleanupActiveEntityInChainBlackboard(),
		OnAction(action: gameinputScriptListenerAction, consumer: gameinputScriptListenerActionConsumer) => (Bool),
		HideAdvanceInteractionInputHints(),
		CreateTCSUpdate(),
		BreakTCSUpdate(),
		OnTCSUpdate(request: handle:TCSUpdate),
		RefreshDebug(lastXYValue: Bool),
		QueueRequest(request: handle:gameScriptableSystemRequest),
		GetGameInstance() => (ScriptGameInstance),
		WasRestored() => (Bool),
		OnAttach(),
		OnDetach(),
		OnRestored(saveVersion: Int32, gameVersion: Int32),
		IsSavingLocked() => (Bool),
		ToString() => (String),
		GetClassName() => (CName),
		IsA(className: CName) => (Bool),
		IsExactlyA(className: CName) => (Bool),
	},
	staticFunctions: {
		DetectScriptableCycles(),
	},
	properties: {
		controlledObject: whandle:gameObject,
		isInputRegistered: Bool,
		isInputLockedFromQuest: Bool,
		isChainForcedFromQuest: Bool,
		isActionButtonLocked: Bool,
		isDeviceChainCreationLocked: Bool,
		chainLockSources: array:CName,
		TCDUpdateDelayID: gameDelayID,
		TCSupdateRate: Float,
		lastInputSimTime: Float,
	}
}