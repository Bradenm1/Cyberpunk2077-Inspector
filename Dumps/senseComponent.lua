{
	name: senseComponent,
	functions: {
		SetHearingEnabled(enabled: Bool),
		IsHearingEnabled() => (Bool),
		IsAgentVisible(object: handle:gameObject) => (Bool),
		GetVisibilityTraceEndToAgentDist(object: handle:gameObject) => (Float),
		GetDetection(entityID: entEntityID) => (Float),
		SetDetectionFactor(detection: Float, shapeName: CName) => (Bool),
		SetDetectionCoolDown(coolDown: Float),
		SetDetectionDropFactor(detectionDrop: Float),
		SetDetectionMinRange(range: Float) => (Bool),
		UsePreset(presetID: TweakDBID) => (Bool),
		GetCurrentPreset() => (TweakDBID),
		AddDetection(target: handle:senseComponent, detection: Float) => (Bool),
		GetSenseShapes() => (array:handle:senseIShape),
		HasDetectionOverwrite(entityID: entEntityID) => (Bool),
		SetDetectionOverwrite(entityID: entEntityID),
		RemoveDetectionOverwrite(entityID: entEntityID) => (Bool),
		HasDetectionAttitudeOverwrite(attitudeGroup: CName) => (Bool),
		SetDetectionAttitudeOverwrite(attitudeGroup: CName),
		RemoveDetectionAttitudeOverwrite(attitudeGroup: CName) => (Bool),
		GetDetectionMultiplier(entityID: entEntityID) => (Float),
		SetDetectionMultiplier(entityID: entEntityID, multiplier: Float),
		CreateSenseMappin(),
		CreateHearingMappin(),
		RemoveSenseMappin(),
		RequestRemovingSenseMappin(),
		RemoveHearingMappin(),
		HasSenseMappin() => (Bool),
		HasHearingMappin() => (Bool),
		GetCurrentPreset(),
		SetSensorObjectType(objectType: gamedataSenseObjectType) => (Bool),
		SetVisibleObjectType(objectType: gamedataSenseObjectType) => (Bool),
		GetTimeSinceLastEntityVisible(entityID: entEntityID) => (Float),
		SetMainTrackedObject(target: whandle:gameObject) => (Bool),
		SetMainTrackedObjectTraceZOffset(traceType: senseAdditionalTraceType, zOffset: Float) => (Bool),
		GetDistToTraceEndFromPosToMainTrackedObject(traceType: senseAdditionalTraceType) => (Float),
		SetForcedSensesTracing(targetObjectType: gamedataSenseObjectType, attitudeToTarget: EAIAttitude) => (Bool),
		RemoveForcedSensesTracing(targetObjectType: gamedataSenseObjectType, attitudeToTarget: EAIAttitude) => (Bool),
		SetTickDistanceOverride(overrideDistance: Float) => (Bool),
		SetHasPierceableWapon(hasTechWeapon: Bool) => (Bool),
		ToggleComponent(condition: Bool),
		ToggleSenses(condition: Bool),
		GetOwner() => (handle:gameObject),
		GetOwnerDevice() => (handle:SensorDevice),
		GetOwnerPuppet() => (handle:ScriptedPuppet),
		OnSensePresetChangeEvent(evt: handle:SensePresetChangeEvent) => (Bool),
		OnInitialize(evt: handle:senseInitializeEvent) => (Bool),
		OnDetach(),
		OnHighLevelChanged(value: Int32) => (Bool),
		OnDeath(evt: handle:gameeventsDeathEvent) => (Bool),
		OnDefeated(evt: handle:gameeventsDefeatedEvent) => (Bool),
		OnResurrect(evt: handle:gameeventsResurrectEvent) => (Bool),
		OnReactionChanged(value: Int32) => (Bool),
		OnTargetAssessmentRequest(evt: handle:TargetAssessmentRequest) => (Bool),
		OnSenseEnabledEvent(evt: handle:senseEnabledEvent) => (Bool),
		OnSenseVisibilityEvent(evt: handle:senseVisibilityEvent) => (Bool),
		PlayerEnteredPerception(player: whandle:PlayerPuppet),
		PlayerExitedPercpetion(player: whandle:PlayerPuppet),
		OnPlayerTakedownStateChange(takedownState: Int32),
		OnPlayerUpperBodyStateChange(upperBodyState: Int32),
		OnPlayerCarryingStateChange(carrying: Bool),
		OnDetectedEvent(evt: handle:senseOnDetectedEvent) => (Bool),
		OnDetectionReachedZero(evt: handle:senseOnRemoveDetection) => (Bool),
		OnAttitudeChanged(evt: handle:gameeventsAttitudeChangedEvent) => (Bool),
		OnAttitudeGroupChanged(evt: handle:gameeventsAttitudeGroupChangedEvent) => (Bool),
		OnSuspiciousObjectEvent(evt: handle:AIbehaviorSuspiciousObjectEvent) => (Bool),
		OnStatusEffectApplied(evt: handle:gameeventsApplyStatusEffectEvent) => (Bool),
		OnSecurityAreaCrossingPerimeter(evt: handle:SecurityAreaCrossingPerimeter) => (Bool),
		OnReevaluateDetectionOverwriteEvent(evt: handle:ReevaluateDetectionOverwriteEvent) => (Bool),
		GetGame() => (ScriptGameInstance),
		IsTargetPlayer(target: whandle:gameObject) => (Bool),
		GetSecuritySystem() => (handle:SecuritySystemControllerPS),
		IsTargetInterestingForSecuritySystem(target: whandle:gameObject) => (Bool),
		RefreshCombatDetectionMultiplier(target: handle:ScriptedPuppet),
		IsTargetInteresting(target: whandle:gameObject) => (Bool),
		IsPlayerRecentlyDroppedThreat(target: whandle:gameObject) => (Bool),
		IsOwnerHostileTowardsPlayer() => (Bool),
		IsOwnerHostileTowardsTarget(target: whandle:gameObject) => (Bool),
		IsOwnerFriendlyTowardsPlayer() => (Bool),
		IsOwnerFriendlyTowardsTarget(target: whandle:gameObject) => (Bool),
		InitDetectionOverwrite(),
		ReevaluateDetectionOverwrite(target: whandle:gameObject, isVisible: Bool) => (Bool),
		ShouldStartDetecting(target: handle:gameObject) => (Bool),
		ShouldStartDetectingPlayer(player: handle:PlayerPuppet) => (Bool),
		SendDetectionRiseEvent(target: whandle:gameObject, isVisible: Bool),
		OnHACK_UseSensePresetEvent(evt: handle:gameHACK_UseSensePresetEvent) => (Bool),
		GetLocalToWorld() => (Matrix),
		GetInitialPosition() => (Vector4),
		GetInitialOrientation() => (Quaternion),
		GetInitialTransform() => (Matrix),
		GetLocalPosition() => (Vector4),
		GetLocalOrientation() => (Quaternion),
		GetLocalTransform() => (Matrix),
		SetLocalPosition(pos: Vector4),
		SetLocalOrientation(rot: Quaternion),
		SetLocalTransform(pos: Vector4, rot: Quaternion),
		GetTransformParent(),
		GetEntity() => (whandle:entEntity),
		FindComponentByName(componentName: CName) => (whandle:entIComponent),
		GetName() => (CName),
		IsEnabled() => (Bool),
		Toggle(on: Bool),
		QueueEntityEvent(ev: handle:redEvent),
		RegisterRenderDebug(filterName: String, functionName: CName),
		ToString() => (String),
		GetClassName() => (CName),
		IsA(className: CName) => (Bool),
		IsExactlyA(className: CName) => (Bool),
	},
	staticFunctions: {
		DetectScriptableCycles(),
	},
	properties: {
		enableBeingDetectable: Bool,
		visibleObject: handle:senseVisibleObject,
		sensorObject: handle:senseSensorObject,
		isEnabled: Bool,
		highLevelCb: Uint32,
		reactionCb: Uint32,
		highLevelState: gamedataNPCHighLevelState,
		mainPreset: TweakDBID,
		secondaryPreset: TweakDBID,
		puppetBlackboard: handle:gameIBlackboard,
		playerTakedownStateCallbackID: Uint32,
		playerUpperBodyStateCallbackID: Uint32,
		playerCarryingStateCallbackID: Uint32,
		playerInPerception: whandle:PlayerPuppet,
		localTransform: WorldTransform,
		parentTransform: handle:entITransformBinding,
		name: CName,
		isReplicable: Bool,
		id: CRUID,
	}
}