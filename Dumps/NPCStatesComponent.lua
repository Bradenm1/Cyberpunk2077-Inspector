{
	name: NPCStatesComponent,
	functions: {
		OnGameAttach(),
		GetCurrentHighLevelState() => (gamedataNPCHighLevelState),
		SetCurrentHighLevelState(newState: gamedataNPCHighLevelState) => (Bool),
		GetPreviousHighLevelState() => (gamedataNPCHighLevelState),
		GetCurrentUpperBodyState() => (gamedataNPCUpperBodyState),
		SetCurrentUpperBodyState(newState: gamedataNPCUpperBodyState) => (Bool),
		GetCurrentDefenseMode() => (gamedataDefenseMode),
		SetCurrentDefenseMode(newState: gamedataDefenseMode) => (Bool),
		GetCurrentLocomotionMode() => (gamedataLocomotionMode),
		SetCurrentLocomotionMode(newState: gamedataLocomotionMode) => (Bool),
		GetCurrentStanceState() => (gamedataNPCStanceState),
		SetPreviousStanceState(prevState: gamedataNPCStanceState),
		GetPreviousStanceState() => (gamedataNPCStanceState),
		SetCurrentStanceState(newState: gamedataNPCStanceState) => (Bool),
		SetPreviousHitReactionMode(prevState: EHitReactionMode),
		GetPreviousHitReactionMode() => (EHitReactionMode),
		GetCurrentHitReactionModeState() => (EHitReactionMode),
		SetCurrentHitReactionModeState(newState: EHitReactionMode) => (Bool),
		GetCurrentBehaviorState() => (gamedataNPCBehaviorState),
		SetCurrentBehaviorState(newState: gamedataNPCBehaviorState) => (Bool),
		GetCurrentPhaseState() => (ENPCPhaseState),
		SetCurrentPhaseState(newState: ENPCPhaseState) => (Bool),
		GetPuppet() => (handle:ScriptedPuppet),
		GetPuppetStateBlackboard() => (handle:gameIBlackboard),
		OnNPCStateChangeSignalReceived(signal: handle:NPCStateChangeSignal),
		ChangeHighLevelState(newState: gamedataNPCHighLevelState),
		ChangeDefenseMode(newState: gamedataDefenseMode),
		ChangeLocomotionMode(newState: gamedataLocomotionMode),
		ChangeUpperBodyState(newState: gamedataNPCUpperBodyState),
		ChangeStanceState(newState: gamedataNPCStanceState),
		ChangeHitReactionModeState(newState: EHitReactionMode),
		ChangeBehaviorState(newState: gamedataNPCBehaviorState),
		ChangePhaseState(newState: ENPCPhaseState),
		UpdateHighLevelState(newState: gamedataNPCHighLevelState, previousState: gamedataNPCHighLevelState),
		HandleCombatStateAnimHint(newState: gamedataNPCHighLevelState, previousState: gamedataNPCHighLevelState),
		OnHighLevelStateEnter(newState: gamedataNPCHighLevelState, previousState: gamedataNPCHighLevelState),
		OnHighLevelStateExit(leftState: gamedataNPCHighLevelState, nextState: gamedataNPCHighLevelState),
		OnRelaxed(),
		OnAlerted(),
		OnCombat(),
		OnDead(),
		PlayDeadVO(),
		OnNotifySecuritySystemCombatEvent(evt: handle:NotifySecuritySystemCombatEvent) => (Bool),
		NotifySecuritySystemCombat(),
		UpdateUpperBodyState(),
		GetUpperBodyStateForAnimGraph() => (Int32),
		OnUpperBodyStateChanged(),
		OnNormal(),
		OnShoot(),
		OnReload(),
		OnDefend(),
		OnParry(),
		OnAttack(),
		OnChargeAttack(),
		UpdateLocomotionMode(),
		OnLocomotionModeChanged(),
		OnStatic(),
		OnMoving(),
		UpdateDefenseMode(),
		OnDefenseModeChanged(),
		OnNoDefend(),
		OnDefendAll(),
		OnDefendMelee(),
		OnDefendRanged(),
		UpdateBehaviorState(),
		UpdatePhaseState(),
		UpdateDefensiveState(enable: Bool),
		TurnOnParryState(),
		TurnOffParryState(),
		UpdateHitReactionsExceptionState(),
		SendOnUnstoppableRemovedSignal(b: Bool),
		OnRegular(statSystem: handle:gameStatsSystem, entityID: entEntityID, recordID: TweakDBID),
		OnForceImpact(statSystem: handle:gameStatsSystem, entityID: entEntityID, recordID: TweakDBID),
		OnForceStagger(statSystem: handle:gameStatsSystem, entityID: entEntityID, recordID: TweakDBID),
		OnForceKnockdown(statSystem: handle:gameStatsSystem, entityID: entEntityID, recordID: TweakDBID),
		OnFragile(statSystem: handle:gameStatsSystem, entityID: entEntityID, recordID: TweakDBID),
		OnWeak(statSystem: handle:gameStatsSystem, entityID: entEntityID, recordID: TweakDBID),
		OnTough(statSystem: handle:gameStatsSystem, entityID: entEntityID, recordID: TweakDBID),
		OnBulky(statSystem: handle:gameStatsSystem, entityID: entEntityID, recordID: TweakDBID),
		OnUnstoppable(statSystem: handle:gameStatsSystem, entityID: entEntityID, recordID: TweakDBID),
		OnUnstoppableTwitchMin(statSystem: handle:gameStatsSystem, entityID: entEntityID, recordID: TweakDBID),
		OnUnstoppableTwitchNone(statSystem: handle:gameStatsSystem, entityID: entEntityID, recordID: TweakDBID),
		OnStaggerMin(statSystem: handle:gameStatsSystem, entityID: entEntityID, recordID: TweakDBID),
		OnBulkyStaggerMin(statSystem: handle:gameStatsSystem, entityID: entEntityID, recordID: TweakDBID),
		UpdateStanceState(),
		OnStanceStateChanged(),
		ToggleVehicleWindow(toggle: Bool),
		OnStand(),
		OnCrouch(),
		OnCover(),
		OnSwim(),
		OnVehicle(),
		GetReplicatedHighLevelState() => (Int32),
		SetReplicatedHighLevelState(newState: Int32) => (Bool),
		GetReplicatedUpperBodyState() => (Int32),
		SetReplicatedUpperBodyState(newState: Int32) => (Bool),
		GetReplicatedStanceState() => (Int32),
		SetReplicatedStanceState(newState: Int32) => (Bool),
		GetReplicatedHitReactionModeState() => (Int32),
		SetReplicatedHitReactionModeState(newState: Int32) => (Bool),
		GetReplicatedBehaviorState() => (Int32),
		SetReplicatedBehaviorState(newState: Int32) => (Bool),
		GetReplicatedPhaseState() => (Int32),
		SetReplicatedPhaseState(newState: Int32) => (Bool),
		GetReplicatedDefenseMode() => (Int32),
		SetReplicatedDefenseMode(newState: Int32) => (Bool),
		GetReplicatedLocomotionMode() => (Int32),
		SetReplicatedLocomotionMode(newState: Int32) => (Bool),
		GetOwner() => (handle:gameObject),
		GetGameTime() => (GameTime),
		GetEngineTime() => (EngineTime),
		GetSimTime() => (EngineTime),
		GetAudioSystem() => (handle:gameGameAudioSystem),
		GetDebugVisualizerSystem() => (handle:gameDebugVisualizerSystem),
		GetDelaySystem() => (handle:gameDelaySystem),
		GetGameEffectSystem() => (handle:gameEffectSystem),
		GetPlayerSystem() => (handle:cpPlayerSystem),
		GetQuestsSystem() => (handle:questQuestsSystem),
		GetSceneSystem(),
		GetStatsSystem() => (handle:gameStatsSystem),
		GetStatPoolsSystem() => (handle:gameStatPoolsSystem),
		GetTargetingSystem() => (handle:gametargetingTargetingSystem),
		GetTimeSystem() => (handle:gameTimeSystem),
		GetTransactionSystem() => (handle:gameTransactionSystem),
		GetPersistencySystem() => (handle:gamePersistencySystem),
		GetVisionModeSystem() => (handle:gameVisionModeSystem),
		GetFriendlyFireSystem(),
		GetGameRulesSystem(),
		GetLoSFinderSystem(),
		GetPS() => (handle:gameComponentPS),
		GetBasePS() => (handle:gameComponentPS),
		GetPersistentID() => (gamePersistentID),
		GetEntity() => (whandle:entEntity),
		FindComponentByName(componentName: CName) => (whandle:entIComponent),
		GetName() => (CName),
		IsEnabled() => (Bool),
		Toggle(on: Bool),
		QueueEntityEvent(ev: handle:redEvent),
		RegisterRenderDebug(filterName: String, functionName: CName),
		ToString() => (String),
		GetClassName() => (CName),
		IsA(className: CName) => (Bool),
		IsExactlyA(className: CName) => (Bool),
	},
	staticFunctions: {
		DetectScriptableCycles(),
	},
	properties: {
		aimingLookatEvent: handle:entLookAtAddEvent,
		highLevelAnimFeatureName: CName,
		upperBodyAnimFeatureName: CName,
		stanceAnimFeatureName: CName,
		statFlagDefensiveState: handle:gameStatModifierData,
		prevNPCStanceState: gamedataNPCStanceState,
		previousHighLevelState: gamedataNPCHighLevelState,
		prevHitReactionMode: EHitReactionMode,
		bulkyStaggerMinRecordID: TweakDBID,
		staggerMinRecordID: TweakDBID,
		unstoppableRecordID: TweakDBID,
		unstoppableTwitchMinRecordID: TweakDBID,
		unstoppableTwitchNoneRecordID: TweakDBID,
		forceImpactRecordID: TweakDBID,
		forceStaggerRecordID: TweakDBID,
		forceKnockdownRecordID: TweakDBID,
		fragileRecordID: TweakDBID,
		weakRecordID: TweakDBID,
		toughRecordID: TweakDBID,
		bulkyRecordID: TweakDBID,
		regularRecordID: TweakDBID,
		inCombat: Bool,
		priority: Uint32,
		persistentState: handle:gamePersistentState,
		name: CName,
		isReplicable: Bool,
		id: CRUID,
	}
}