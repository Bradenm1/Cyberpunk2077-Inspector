{
	name: VehicleComponent,
	functions: {
		OnGameAttach(),
		OnGameDetach(),
		IsVehicleParked() => (Bool),
		GetVehicle() => (whandle:vehicleBaseObject),
		GetVehicleController() => (handle:vehicleController),
		GetVehicleControllerPS() => (handle:vehicleControllerPS),
		GetPS() => (handle:VehicleComponentPS),
		OnMountingEvent(evt: handle:gamemountingMountingEvent) => (Bool),
		OnUnmountingEvent(evt: handle:gamemountingUnmountingEvent) => (Bool),
		OnVehicleFinishedMountingEvent(evt: handle:vehicleFinishedMountingEvent) => (Bool),
		OnVehicleStartedUnmountingEvent(evt: handle:VehicleStartedUnmountingEvent) => (Bool),
		OnVehicleStartedMountingEvent(evt: handle:vehicleStartedMountingEvent) => (Bool),
		SendVehicleStartedUnmountingEventToPS(isMounting: Bool, slotID: CName, character: handle:gameObject),
		SetSteeringLimitAnimFeature(limit: Int32),
		OnVehicleSeatReservationEvent(evt: handle:VehicleSeatReservationEvent) => (Bool),
		OnVehicleBodyDisposalPerformedEvent(evt: handle:VehicleBodyDisposalPerformedEvent) => (Bool),
		DetermineInteractionState(),
		DetermineInteractionState(layerName: CName),
		GetIsMounted() => (Bool),
		InitialVehcileSetup(),
		VehicleDefaultStateSetup(),
		CreateAndSendDefaultStateEvent(door: vehicleEVehicleDoor, state: vehicleEQuestVehicleDoorState),
		ShouldVisualDestructionBeSet(),
		VehicleVisualDestructionSetup(),
		OnVehicleQuestVisualDestructionEvent(evt: handle:VehicleQuestVisualDestructionEvent) => (Bool),
		EvaluateInteractions(),
		ToggleInitialVehDoorInteractions(),
		EvaluateTrunkAndHoodInteractions(),
		EvaluateTrunkInteractions(),
		EvaluateHoodInteractions(),
		ToggleVehReadyInteractions(toggle: Bool, layer: CName),
		EvaluateDoorState(),
		SetDoorAnimFeatureData(door: vehicleEVehicleDoor, state: vehicleVehicleDoorState),
		OnVehicleLightSetupEvent(evt: handle:VehicleLightSetupEvent) => (Bool),
		RegisterInputListener(),
		UnregisterInputListener(),
		LoadExplodedState(),
		SetupThrusterFX(),
		ToggleScanningComponent(toggle: Bool),
		EnableTargetingComponents(),
		DisableTargetingComponents(),
		ToggleTargetingComponents(on: Bool),
		BroadcastEnvironmentalHazardStimuli(),
		RemoveEnvironmentalHazardStimuli(),
		OnDeath(evt: handle:gameeventsDeathEvent) => (Bool),
		OnVehicleWaterEvent(evt: handle:vehicleWaterEvent) => (Bool),
		OnInteractionActivated(evt: handle:gameinteractionsInteractionEvent) => (Bool),
		OnInteractionUsed(evt: handle:gameinteractionsChoiceEvent) => (Bool),
		EvaluatePanzerInteractions(),
		RegisterToHUDManager(shouldRegister: Bool),
		OnHUDInstruction(evt: handle:HUDInstruction) => (Bool),
		GetVehicleStateForScanner() => (String),
		GetAnySlotAvailable(checkOccupied: Bool) => (Bool),
		GetAnyDoorAvailable(checkOccupied: Bool) => (Bool),
		SetVehicleScannerDirty(),
		ExecuteAction(choice: gameinteractionsChoice, executor: whandle:gameObject),
		ExecuteAction(action: handle:gamedeviceAction, executor: whandle:gameObject),
		ToggleInteraction(layer: CName, toggle: Bool),
		ProcessExplosionEffects(),
		ExplodeVehicle(instigator: whandle:gameObject),
		ApplyStatusEffectOnPassangers(statusEffectID: TweakDBID, instigator: whandle:gameObject),
		SetImmortalityMode(),
		ClearImmortalityMode(),
		StealVehicle(),
		ToggleVehicleSystems(toggle: Bool, vehicle: Bool, engine: Bool),
		OnForceCarAlarm(evt: handle:ForceCarAlarm) => (Bool),
		OnDisableAlarm(evt: handle:DisableAlarmEvent) => (Bool),
		OnChangeState(evt: handle:vehicleChangeStateEvent) => (Bool),
		OnVehicleQuestCrystalDomeEvent(evt: handle:VehicleQuestCrystalDomeEvent) => (Bool),
		DrivingStimuli(broadcast: Bool),
		SetupCrystalDome(),
		DetermineShouldCrystalDomeBeOn(meshVisibilityDelay: Float),
		ToggleCrystalDome(toggle: Bool, force: Bool, instant: Bool, instantDelay: Float, meshVisibilityDelay: Float),
		TogglePanzerShadowMeshes(toggle: Bool),
		OnVehicleCrystalDomeOffDelayEvent(evt: handle:VehicleCrystalDomeOffDelayEvent) => (Bool),
		OnVehicleCrystalDomeOnDelayEvent(evt: handle:VehicleCrystalDomeOnDelayEvent) => (Bool),
		OnVehicleCrystalDomeMeshVisibilityDelayEvent(evt: handle:VehicleCrystalDomeMeshVisibilityDelayEvent) => (Bool),
		ToggleTargetingSystemForPanzer(mountedPlayer: handle:PlayerPuppet, enable: Bool),
		TogglePlayerHitShapesForPanzer(mountedPlayer: handle:PlayerPuppet, enable: Bool),
		DoPanzerCleanup(),
		OnVehicleForceOccupantOut(evt: handle:VehicleForceOccupantOut) => (Bool),
		OnActionDemolition(evt: handle:ActionDemolition) => (Bool),
		OnActionEngineering(evt: handle:ActionEngineering) => (Bool),
		OnVehicleQuestDoorLocked(evt: handle:VehicleQuestDoorLocked) => (Bool),
		OnVehicleDoorInteraction(evt: handle:VehicleDoorInteraction) => (Bool),
		OnVehicleDoorOpen(evt: handle:VehicleDoorOpen) => (Bool),
		OnVehicleDoorClose(evt: handle:VehicleDoorClose) => (Bool),
		GetVehicleDoorEnum(doorName: CName) => (Bool, door: vehicleEVehicleDoor),
		OnVehicleDoorInteractionStateChange(evt: handle:VehicleDoorInteractionStateChange) => (Bool),
		EvaluateDoorReaction(doorID: CName),
		GetAnimEventName(doorState: vehicleVehicleDoorState, door: vehicleEVehicleDoor) => (CName),
		OnVehicleExternalDoorRequestEvent(evt: handle:VehicleExternalDoorRequestEvent) => (Bool),
		OnVehicleExternalWindowRequestEvent(evt: handle:VehicleExternalWindowRequestEvent) => (Bool),
		OnVehicleWindowOpen(evt: handle:VehicleWindowOpen) => (Bool),
		OnVehicleWindowClose(evt: handle:VehicleWindowClose) => (Bool),
		EvaluateWindowReaction(doorID: CName, speed: CName),
		EvaluateWindowState(),
		SetWindowAnimFeatureData(door: vehicleEVehicleDoor, state: vehicleEVehicleWindowState),
		OnToggleDoorInteractionEvent(evt: handle:ToggleDoorInteractionEvent) => (Bool),
		OnOpenTrunk(evt: handle:VehicleOpenTrunk) => (Bool),
		OnCloseTrunk(evt: handle:VehicleCloseTrunk) => (Bool),
		OnVehicleDumpBody(evt: handle:VehicleDumpBody) => (Bool),
		OnVehicleDumpBodyDelayEvent(evt: handle:VehicleDumpBodyDelayEvent) => (Bool),
		OnVehicleTakeBody(evt: handle:VehicleTakeBody) => (Bool),
		UnmountTrunkBody(),
		OnVehiclePlayerTrunk(evt: handle:VehiclePlayerTrunk) => (Bool),
		OnOpenHood(evt: handle:VehicleOpenHood) => (Bool),
		OnCloseHood(evt: handle:VehicleCloseHood) => (Bool),
		OnSummonStartedEvent(evt: handle:vehicleSummonStartedEvent) => (Bool),
		OnSummonFinishedEvent(evt: handle:vehicleSummonFinishedEvent) => (Bool),
		PlaySummonArrivalSFX(),
		HonkAndFlash(),
		IsPlayerVehicle(),
		SetupAuxillary(),
		SetupWheels(),
		OnGridDestruction(evt: handle:vehicleGridDestructionEvent) => (Bool),
		CreateHitEventOnSelf(force: Float),
		TryToKnockDownBike(),
		ReactToHPChange(destruction: Float),
		DestroyVehicle(),
		RepairVehicle(),
		OnVehicleRepairEvent(re: handle:vehicleRepairEvent) => (Bool),
		DisableRadio(),
		DestroyRandomWindow(),
		TutorialCarDamageFact(),
		BreakAllDamageStageFX(auxillaryFX: Bool),
		SendDestructionDataToGraph(gridID: Int32, gridState: Float),
		DetermineAdditionalEngineFX(gridID: Int32, gridState: Float),
		EvaluateDamageLevel(destruction: Float) => (Int32),
		OnVehicleDamageStageTurnOffEvent(evt: handle:VehicleDamageStageTurnOffEvent) => (Bool),
		PlayCrystalDomeGlitchEffect(),
		OnVehicleOnPartDetached(evt: handle:vehicleOnPartDetachedEvent) => (Bool),
		OnVehicleRadioEvent(evt: handle:VehicleRadioEvent) => (Bool),
		OnVehicleRadioTierEvent(evt: handle:VehicleRadioTierEvent) => (Bool),
		SendParkEvent(park: Bool),
		OnVehicleLightQuestToggleEvent(evt: handle:VehicleLightQuestToggleEvent) => (Bool),
		OnVehicleCycleLightsEvent(evt: handle:VehicleCycleLightsEvent) => (Bool),
		OnVehicleQuestSirenEvent(evt: handle:VehicleQuestSirenEvent) => (Bool),
		CanShowMappin() => (Bool),
		CreateMappin(),
		DestroyMappin(),
		RequestHUDRefresh(),
		SetupListeners(),
		UnregisterListeners(),
		SetupGameTimeToBBListener(),
		OnMinutePassedEvent(evt: handle:MinutePassedEvent) => (Bool),
		PassGameTimeToVehBB(),
		UnregisterGameTimeToBBListener(),
		SetupVehicleTPPBBListener(),
		UnregisterVehicleTPPBBListener(),
		OnVehicleCameraChange(state: Bool),
		SetupVehicleSpeedBBListener(),
		UnregisterVehicleSpeedBBListener(),
		SetupVehicleRPMBBListener(),
		UnregisterVehicleRPMBBListener(),
		OnVehicleSpeedChange(speed: Float),
		CloseSelectedDoors(doors: array:CName),
		OnVehicleRPMChange(rpm: Float),
		StartEffectEvent(self: handle:gameObject, effectName: CName, shouldPersist: Bool, blackboard: handle:worldEffectBlackboard),
		OnAction(action: gameinputScriptListenerAction, consumer: gameinputScriptListenerActionConsumer) => (Bool),
		OnVehicleQuestHornEvent(evt: handle:VehicleQuestHornEvent) => (Bool),
		OnVehicleHornOffDelayEvent(evt: handle:VehicleHornOffDelayEvent) => (Bool),
		ToggleSiren(lights: Bool, sounds: Bool),
		OnVehicleSirenDelayEvent(evt: handle:VehicleSirenDelayEvent) => (Bool),
		OnVehicleFlippedOverEvent(evt: handle:vehicleFlippedOverEvent) => (Bool),
		OnHasVehicleBeenFlippedOverForSomeTimeEvent(evt: handle:vehicleHasVehicleBeenFlippedOverForSomeTimeEvent) => (Bool),
		ApplyVehicleDOT(type: CName),
		RemoveVehicleDOT(),
		OnVehicleQuestAVThrusterEvent(evt: handle:VehicleQuestAVThrusterEvent) => (Bool),
		OnVehicleQuestWindowDestructionEvent(evt: handle:VehicleQuestWindowDestructionEvent) => (Bool),
		OnFactChangedEvent(evt: handle:gameFactChangedEvent) => (Bool),
		OnVehicleRaceQuestEvent(evt: handle:VehicleRaceQuestEvent) => (Bool),
		ToggleRaceClock(toggle: Bool),
		OnVehicleRaceClockUpdateEvent(evt: handle:VehicleRaceClockUpdateEvent) => (Bool),
		CleanUpRace(),
		CreateObjectActionsCallbackController(instigator: whandle:entEntity),
		DestroyObjectActionsCallbackController(),
		OnObjectActionRefreshEvent(evt: handle:gameObjectActionRefreshEvent) => (Bool),
		OnVehicleQuestToggleEngineEvent(evt: handle:VehicleQuestToggleEngineEvent) => (Bool),
		OnSetIgnoreAutoDoorCloseEvent(evt: handle:SetIgnoreAutoDoorCloseEvent) => (Bool),
		GetPS() => (handle:ScriptableDeviceComponentPS),
		GetDeviceComponentPS() => (handle:gameDeviceComponentPS),
		GetPSID() => (gamePersistentID),
		GetPSName() => (CName),
		GetPS() => (handle:gameComponentPS),
		GetBasePS() => (handle:gameComponentPS),
		GetPersistentID() => (gamePersistentID),
		GetEntity() => (whandle:entEntity),
		FindComponentByName(componentName: CName) => (whandle:entIComponent),
		GetName() => (CName),
		IsEnabled() => (Bool),
		Toggle(on: Bool),
		QueueEntityEvent(ev: handle:redEvent),
		RegisterRenderDebug(filterName: String, functionName: CName),
		ToString() => (String),
		GetClassName() => (CName),
		IsA(className: CName) => (Bool),
		IsExactlyA(className: CName) => (Bool),
	},
	staticFunctions: {
		DetectScriptableCycles(),
	},
	properties: {
		interaction: handle:gameinteractionsComponent,
		scanningComponent: handle:gameScanningComponent,
		damageLevel: Int32,
		coolerDestro: Bool,
		submerged: Bool,
		bumperFrontState: Int32,
		bumperBackState: Int32,
		visualDestructionSet: Bool,
		healthStatPoolListener: handle:VehicleHealthStatPoolListener,
		vehicleBlackboard: whandle:gameIBlackboard,
		radioState: Bool,
		mounted: Bool,
		enterTime: Float,
		mappinID: gameNewMappinID,
		ignoreAutoDoorClose: Bool,
		timeSystemCallbackID: Uint32,
		vehicleTPPCallbackID: Uint32,
		vehicleSpeedCallbackID: Uint32,
		vehicleRPMCallbackID: Uint32,
		broadcasting: Bool,
		hasSpoiler: Bool,
		spoilerUp: Float,
		spoilerDown: Float,
		spoilerDeployed: Bool,
		hasTurboCharger: Bool,
		overheatEffectBlackboard: handle:worldEffectBlackboard,
		overheatActive: Bool,
		hornOn: Bool,
		hasSiren: Bool,
		hornPressTime: Float,
		radioPressTime: Float,
		raceClockTickID: gameDelayID,
		objectActionsCallbackCtrl: handle:gameObjectActionsCallbackController,
		mountedPlayer: whandle:PlayerPuppet,
		isIgnoredInTargetingSystem: Bool,
		arePlayerHitShapesEnabled: Bool,
		vehicleController: handle:vehicleController,
		persistentState: handle:gamePersistentState,
		name: CName,
		isReplicable: Bool,
		id: CRUID,
	}
}