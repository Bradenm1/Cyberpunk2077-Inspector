{
	name: movePoliciesComponent,
	functions: {
		AddPolicies(object: handle:movePolicies),
		PopPolicies(object: handle:movePolicies),
		GetTopPolicies() => (handle:movePolicies),
		GetDestination() => (Vector4),
		GetDistanceToDestination() => (Float),
		GetDistanceToDestinationFrom(destination: Vector4) => (Float),
		GetClosestPointToPath(point: Vector4) => (Vector4),
		GetInclineAngle() => (Float),
		ChangeMovementType(movementType: moveMovementType) => (Bool),
		IsPathfindingFailed() => (Bool),
		IsConstrainedByRestrictedArea() => (Bool),
		HasLineOfSightFailed() => (Bool),
		IsInIdle() => (Bool),
		IsOnOffMeshLink() => (Bool),
		GetOffMeshLinkType() => (Bool, type: worldOffMeshConnectionType),
		IsOnStairs() => (Bool),
		GetExplorationOffMeshLinkType() => (moveExplorationType),
		IsPausedByDynamicCollision() => (Bool),
		IsTopPolicyEvaluated() => (Bool),
		IsDestinationCalculated() => (Bool),
		IsDestinationChanged() => (Bool),
		GetEntity() => (whandle:entEntity),
		FindComponentByName(componentName: CName) => (whandle:entIComponent),
		GetName() => (CName),
		IsEnabled() => (Bool),
		Toggle(on: Bool),
		QueueEntityEvent(ev: handle:redEvent),
		RegisterRenderDebug(filterName: String, functionName: CName),
		ToString() => (String),
		GetClassName() => (CName),
		IsA(className: CName) => (Bool),
		IsExactlyA(className: CName) => (Bool),
	},
	staticFunctions: {
		DetectScriptableCycles(),
	},
	properties: {
		name: CName,
		isReplicable: Bool,
		id: CRUID,
	}
}