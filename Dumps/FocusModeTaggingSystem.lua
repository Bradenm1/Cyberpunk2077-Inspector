{
	name: FocusModeTaggingSystem,
	functions: {
		OnAttach(),
		OnDetach(),
		RegisterPlayerAttachedCallback(),
		UnregisterPlayerAttachedCallback(),
		RegisterPlayerDetachedCallback(),
		UnregisterPlayerDetachedCallback(),
		OnPlayerAttachedCallback(playerPuppet: handle:gameObject),
		OnPlayerDetachedCallback(playerPuppet: handle:gameObject),
		GetPlayerStateMachineBlackboard(playerPuppet: whandle:gameObject) => (handle:gameIBlackboard),
		GetScannerTargetID() => (entEntityID),
		GetNetworkSystem() => (handle:NetworkSystem),
		GetHudManager() => (handle:HUDManager),
		RequestUntagAll(),
		Register(source: handle:gameObject),
		Unregister(source: handle:gameObject),
		TagObject(target: handle:gameObject),
		UntagObject(target: handle:gameObject),
		UntagAll(),
		ResolveFocusClues(tag: Bool, target: handle:gameObject),
		SendForceRevealObjectEvent(reveal: Bool, target: handle:gameObject),
		SendForceVisionApperaceEvent(enable: Bool, target: handle:gameObject, highlightType: EFocusForcedHighlightType),
		IsTagged(target: handle:gameObject) => (Bool),
		IsPlayerAiming(playerPuppet: whandle:gameObject) => (Bool),
		IsPlayerInFocusMode(playerPuppet: whandle:gameObject) => (Bool),
		CanTag() => (Bool),
		OnActionWithOwner(action: gameinputScriptListenerAction, consumer: gameinputScriptListenerActionConsumer, owner: whandle:gameObject) => (Bool),
		OnTagObjectRequest(request: handle:gameTagObjectRequest),
		OnUnTagObjectRequest(request: handle:gameUnTagObjectRequest),
		OnUnTagAllObjectRequest(request: handle:UnTagAllObjectRequest),
		OnRegisterInputListenerRequest(request: handle:RegisterInputListenerRequest),
		OnUnRegisterInputListenerRequest(request: handle:UnRegisterInputListenerRequest),
		OnRegisterLitenerToTaggedList(request: handle:RegisterToListListener),
		NotifyNetworkSystem(),
		NotifyHudManager(isTagged: Bool, target: handle:gameObject),
		RefreshUI(target: handle:gameObject),
		RegisterObjectToBlackboard(target: handle:gameObject),
		UnRegisterObjectToBlackboard(target: handle:gameObject),
		UnRegisterAllObjectToBlackboard(),
		GetTaggedObjectsList() => (array:whandle:gameObject),
		AddTaggedListener(object: handle:gameObject, funcName: CName),
		CleanupTaggedObjects(listToClean: array:whandle:gameObject) => (array:whandle:gameObject),
		QueueRequest(request: handle:gameScriptableSystemRequest),
		GetGameInstance() => (ScriptGameInstance),
		WasRestored() => (Bool),
		OnAttach(),
		OnDetach(),
		OnRestored(saveVersion: Int32, gameVersion: Int32),
		IsSavingLocked() => (Bool),
		ToString() => (String),
		GetClassName() => (CName),
		IsA(className: CName) => (Bool),
		IsExactlyA(className: CName) => (Bool),
	},
	staticFunctions: {
		DetectScriptableCycles(),
	},
	properties: {
		playerAttachedCallbackID: Uint32,
		playerDetachedCallbackID: Uint32,
	}
}