{
	name: SecuritySystemControllerPS,
	functions: {
		Initialize(),
		OnInstantiated() => (Bool),
		IsRegistryReady() => (Bool),
		InitiateAgentRegistry(),
		CreateRegistry(),
		CompileSecurityAgentRegistry(),
		AddAgentRecord(agent: DeviceLink, connectedAreas: array:handle:SecurityAreaControllerPS, requestLatestOutput: Bool),
		GetSensors() => (array:handle:SensorDeviceControllerPS),
		IsSystemSafe() => (Bool),
		IsSystemAlerted() => (Bool),
		IsSystemInCombat() => (Bool),
		IsHidden() => (Bool),
		GetAgentRegistry() => (handle:AgentRegistry),
		GetSecurityState() => (ESecuritySystemState),
		GetDeviceStatusAction() => (handle:SecuritySystemStatus),
		GetSecuritySystemAttitudeGroupName() => (CName),
		IsPoliceSecuritySystem() => (Bool),
		GetReprimandReceiver(agentID: gamePersistentID) => (entEntityID),
		DetermineSecurityAreaTypeForEntityID(entityID: entEntityID) => (ESecurityAreaType),
		GetMostDangerousSecurityAreaForEntityID(entityID: entEntityID) => (handle:SecurityAreaControllerPS),
		GetMostDangerousSecurityAreaForEntityID(go: handle:gameObject) => (handle:SecurityAreaControllerPS),
		ShouldReactToTarget(suspect: entEntityID, reporter: entEntityID) => (Bool),
		GetAgentAreas(agentID: gamePersistentID) => (array:handle:SecurityAreaControllerPS),
		GetSecurityBlacklist() => (array:handle:BlacklistEntry),
		IsTargetTresspassingMyZone(suspect: entEntityID, reporter: entEntityID) => (Bool),
		IsUserInsideSystem(userToBeChecked: entEntityID) => (Bool),
		IsUserInsideSystem(userToBeChecked: entEntityID) => (Bool, highestSecurityAccessLevel: ESecurityAccessLevel),
		IsUserInsideSystem(userToBeChecked: entEntityID) => (Bool, highestSecurityAccessLevel: ESecurityAccessLevel, highestThreat: ESecurityAreaType),
		IsEntityBlacklisted(entityID: entEntityID) => (Bool),
		IsEntityBlacklisted(gameObject: handle:gameObject) => (Bool),
		IsEntityBlacklistedForAtLeast(entityID: entEntityID, reason: BlacklistReason) => (Bool),
		IsEntityBlacklistedForSpecificReason(entityID: entEntityID, reason: BlacklistReason) => (Bool),
		IsEntityBlacklistedForAtLeast(go: handle:gameObject, reason: BlacklistReason) => (Bool),
		HasEntityBeenSpottedTooManyTimes(reporter: gamePersistentID, target: entEntityID) => (Bool),
		HasEntityBeenSpottedTooManyTimes(reporter: gamePersistentID, target: handle:gameObject, notificationType: ESecurityNotificationType) => (Bool),
		HasSurpassedGlobalWarningsCount(target: entEntityID) => (Bool),
		IsReprimandOngoing() => (Bool),
		IsReprimandOngoingAgainst(suspect: entEntityID) => (Bool),
		GetReprimandPerformer(target: entEntityID) => (handle:gameObject),
		GetSecurityAreas(includeInactive: Bool, acquireOnlyDirectlyConnected: Bool) => (array:handle:SecurityAreaControllerPS),
		SetSecuritySystemAttitudeGroup(newAttitude: TweakDBID),
		NotifyAboutAttitudeChange(),
		SetSecuritySystemAttitude(desiredAttitude: EAIAttitude, input: handle:SecuritySystemInput, isComingFromQuest: Bool),
		SetSecurityState(newState: ESecuritySystemState, input: handle:SecuritySystemInput, isComingFromQuest: Bool),
		OnMadnessDebuff(evt: handle:MadnessDebuff) => (EntityNotificationType),
		OnSuppressSecuritySystemReaction(evt: handle:SuppressSecuritySystemReaction) => (EntityNotificationType),
		RevokeProtection(entityID: entEntityID),
		OnSecurityAreaCrossingPerimeter(evt: handle:SecurityAreaCrossingPerimeter) => (EntityNotificationType),
		OnAgentSpawned(evt: handle:SecurityAgentSpawnedEvent) => (EntityNotificationType),
		HasSupport(agentID: gamePersistentID) => (Bool),
		OnPlayerSpotted(evt: handle:PlayerSpotted) => (EntityNotificationType),
		SendSupportEvents(modifiedAgents: array:Agent, forceRevokeSupport: Bool),
		RequestLatestOutput(id: gamePersistentID),
		GetTurrets(area: handle:SecurityAreaControllerPS, turrets: script_ref:array:handle:SecurityTurretControllerPS) => (Bool),
		OnSecurityAreaTypeChangedNotification(evt: handle:SecurityAreaTypeChangedNotification) => (EntityNotificationType),
		HandleAreaBeingEnabled(area: handle:SecurityAreaControllerPS),
		HandleAreaBeingDisabled(area: handle:SecurityAreaControllerPS),
		DisableDevice(),
		ShouldSecuritySystemDisableItself() => (Bool),
		ProcessBreachNotificationWithRecipientsList(addresseeList: array:entEntityID, securitySystemInput: handle:SecuritySystemInput),
		ReportPotentialSituation(input: handle:SecuritySystemInput) => (Bool),
		ProcessInput(input: handle:SecuritySystemInput) => (Bool),
		ProcessHostile() => (Bool, input: handle:SecuritySystemInput),
		ProcessNeutral() => (Bool, input: handle:SecuritySystemInput),
		ProcessFriendly() => (Bool, input: handle:SecuritySystemInput),
		IsRefreshRequired() => (Bool),
		OnSecuritySystemInput(evt: handle:SecuritySystemInput) => (EntityNotificationType),
		GetValidRecipients(input: handle:SecuritySystemInput) => (array:SecuritySystemOutputData),
		ProduceOutput(input: handle:SecuritySystemInput, securityStateChanged: Bool),
		ResolveNotificationImmediately(evt: handle:SecuritySystemInput),
		DetermineSecuritySystemState(evt: handle:SecuritySystemInput, isSimulation: Bool) => (ESecuritySystemState),
		ResolveTransitionFromSafe(evt: handle:SecuritySystemInput, isSimulation: Bool) => (ESecuritySystemState),
		ResolveTransitionFromAlerted(evt: handle:SecuritySystemInput, isSimulation: Bool) => (ESecuritySystemState),
		ResolveTransitionFromCombat(evt: handle:SecuritySystemInput, isSimulation: Bool) => (ESecuritySystemState),
		ResolveReprimand(evt: handle:SecuritySystemInput, determinedState: ESecuritySystemState) => (Bool),
		SetSecurityStateAndTriggerResponse(newState: ESecuritySystemState, evt: handle:SecuritySystemInput, isComingFromQuest: Bool) => (Bool),
		SendResponseToCustomRecipients(response: handle:SecuritySystemOutput),
		RequestTargetsAssessment(providedAgents: array:Agent, target: handle:gameObject),
		IsNotificationValid(evt: handle:SecuritySystemInput) => (Bool),
		GetOverlappingAreas(input: handle:SecuritySystemInput) => (array:handle:SecurityAreaControllerPS),
		GetOverlappingAreas(bunch1: array:handle:SecurityAreaControllerPS, bunch2: array:handle:SecurityAreaControllerPS) => (array:handle:SecurityAreaControllerPS),
		IsSystemClean() => (Bool),
		SetReprimandPerformer(evt: handle:SecuritySystemInput, instructions: EReprimandInstructions),
		ReleaseAllReprimands(),
		ReleaseCurrentPerformerFromReprimand(instructions: EReprimandInstructions, target: entEntityID),
		SendReprimandEvent(evt: handle:ReprimandUpdate),
		ResolvePotentialDeescalation() => (Bool),
		InitiateAutomaticDeescalationEvent(evt: handle:SecuritySystemInput),
		CancelAutomaticDeescalationEvent(),
		OnAutomaticDeescalationEvent(evt: handle:AutomaticDeescalationEvent) => (EntityNotificationType),
		Deescalate(evt: handle:SecuritySystemInput),
		OnDeescalate(evt: handle:DeescalationEvent) => (EntityNotificationType),
		BlacklistEntityID(entityID: entEntityID, reason: BlacklistReason),
		TriggerBlacklistWipeCountdown(start: Bool, entityID: entEntityID),
		OnBlacklistPeriodEnded(evt: handle:BlacklistPeriodEnded) => (EntityNotificationType),
		BlacklistEntityID(go: handle:gameObject, reason: BlacklistReason),
		GetEntityBlacklistIndex(entityID: entEntityID) => (Int32),
		RemoveFromBlacklist(entityID: entEntityID),
		RemoveFromBlacklist(go: handle:gameObject),
		OnRemoveFromBlacklist(evt: handle:RemoveFromBlacklistEvent) => (EntityNotificationType),
		IsPlayersEntityID(entityID: entEntityID) => (Bool),
		GetSecurityAccessData(level: ESecurityAccessLevel) => (array:SecurityAccessLevelEntry),
		IsUserAuthorized(user: entEntityID, level: ESecurityAccessLevel) => (Bool),
		IsUserAuthorized(user: handle:gameObject, level: ESecurityAccessLevel) => (Bool),
		GetUserAuthorizationLevel(user: entEntityID) => (ESecurityAccessLevel),
		AddAccessLevelData(entryLevel: ESecurityAccessLevel, password: CName, keycard: TweakDBID),
		AuthorizeUser(user: entEntityID, password: CName) => (Bool),
		AuthorizeUser(user: entEntityID, level: ESecurityAccessLevel),
		OnAddUserEvent(evt: handle:AddUserEvent) => (EntityNotificationType),
		OnRevokeAuthorization(evt: handle:RevokeAuthorization) => (EntityNotificationType),
		RemoveUser(user: entEntityID) => (Bool),
		AddAccessLevelEntry(password: CName, keycard: TweakDBID) => (level: array:SecurityAccessLevelEntry),
		ProvideAccessDataLevel_0() => (array:SecurityAccessLevelEntry),
		ProvideAccessDataLevel_1() => (array:SecurityAccessLevelEntry),
		ProvideAccessDataLevel_2() => (array:SecurityAccessLevelEntry),
		ProvideAccessDataLevel_3() => (array:SecurityAccessLevelEntry),
		ProvideAccessDataLevel_4() => (array:SecurityAccessLevelEntry),
		PerformAuthorizationAttemptUsingKeycard(user: entEntityID) => (ESecurityAccessLevel),
		PerformAuthorizationAttemptUsingPassword(user: entEntityID, password: CName) => (ESecurityAccessLevel),
		IsUserAuthorizedViaCard(user: entEntityID, level: ESecurityAccessLevel) => (Bool),
		IsUserAuthorizedViaPassword(password: CName, level: ESecurityAccessLevel) => (Bool),
		GetActions(context: gameGetActionsContext) => (Bool, actions: array:handle:gamedeviceAction),
		ActionSecuritySystemStatus() => (handle:SecuritySystemStatus),
		ActionSecuritySystemBreachResponse(notificationEvent: handle:SecuritySystemInput) => (handle:SecuritySystemOutput),
		ActionFullSystemRestart() => (handle:FullSystemRestart),
		OnFullSystemRestart(evt: handle:FullSystemRestart) => (EntityNotificationType),
		OnQuestForceON(evt: handle:QuestForceON) => (EntityNotificationType),
		OnActionTakeOverSecuritySystem(evt: handle:TakeOverSecuritySystem) => (EntityNotificationType),
		OnActionForceResetDevice(evt: handle:ActionForceResetDevice) => (EntityNotificationType),
		CleanSecuritySystemMemory(),
		GetPS(agent: Agent) => (handle:gameDeviceComponentPS),
		ReduceLevelByOne(level: ESecurityAccessLevel) => (ESecurityAccessLevel),
		GetAttitudeSystem() => (handle:gameCAttitudeManager),
		GetAttitudeTowards(target: entEntityID) => (EAIAttitude),
		GetAttitudeTowards(target: handle:gameObject) => (EAIAttitude),
		GetAttitudeTowards(otherGroup: CName) => (EAIAttitude),
		OnQuestIllegalActionNotification(evt: handle:QuestIllegalActionNotification) => (EntityNotificationType),
		OnQuestCombatActionNotification(evt: handle:QuestCombatActionNotification) => (EntityNotificationType),
		OnSetSecuritySystemState(evt: handle:SetSecuritySystemState) => (EntityNotificationType),
		OnQuestAuthorizePlayer(evt: handle:AuthorizePlayerInSecuritySystem) => (EntityNotificationType),
		OnQuestBlackListPlayer(evt: handle:BlacklistPlayer) => (EntityNotificationType),
		OnQuestExclusiveQuestControl(evt: handle:SuppressSecuritySystemStateChange) => (EntityNotificationType),
		OnQuestChangeSecuritySystemAttitudeGroup(evt: handle:QuestChangeSecuritySystemAttitudeGroup) => (EntityNotificationType),
		QuestChangeSecuritySystemAttitudeGroup(evt: handle:QuestChangeSecuritySystemAttitudeGroup),
		ExtractNPCIDsFromQuestNotification(evt: handle:QuestSecuritySystemInput) => (array:entEntityID),
		QuestIllegalActionNotification(evt: handle:QuestIllegalActionNotification),
		QuestCombatActionNotification(evt: handle:QuestCombatActionNotification),
		QuestChangeSecuritySystemState(evt: handle:SetSecuritySystemState),
		QuestSuppressSecuritySystem(evt: handle:SuppressSecuritySystemStateChange),
		QuestAuthorizePlayer(evt: handle:AuthorizePlayerInSecuritySystem),
		QuestBlacklistPlayer(evt: handle:BlacklistPlayer),
		DebugGetOutputsCount() => (Int32),
		DebugGetInputsCount() => (Int32),
		Debug(instructionAdded: Bool, inputAdded: Bool, trace: String, instruction: EReprimandInstructions, input: handle:SecuritySystemInput),
		OnMaraudersMapDeviceDebug(sink: handle:worldMaraudersMapDevicesSink),
		Debug_GetReprimandID() => (Int32),
		Debug_GetPlayerBlacklistReason() => (BlacklistReason),
		Debug_GetPlayerWarningCount() => (Int32),
		GetDebugTags() => (String),
		IsUnderStrictQuestControl() => (Bool),
		SecuritySystemLog(message: String),
		SecuritySystemLog(evt: handle:ReprimandUpdate),
		GetDeviceIconTweakDBID() => (TweakDBID),
		GetBackgroundTextureTweakDBID() => (TweakDBID),
		ActionThumbnailUI() => (handle:ThumbnailUI),
		ActionGetAccess() => (handle:GetAccess),
		GetActions(context: gameGetActionsContext) => (Bool, outActions: array:handle:gamedeviceAction),
		OnGetAccess(evt: handle:GetAccess) => (EntityNotificationType),
		RevokeQuickHacks(device: handle:gameDeviceComponentPS),
		OnInstantiated() => (Bool),
		Initialize(),
		OnDeviceDynamicConnectionChange(evt: handle:gameDeviceDynamicConnectionChange) => (EntityNotificationType),
		CacheDevices(),
		GetExpectedSlaveState() => (EDeviceStatus),
		GetClearance() => (handle:gamedeviceClearance),
		DetermineGameplayViability(context: gameGetActionsContext, hasActiveActions: Bool) => (Bool),
		GetWidgetTypeName() => (CName),
		NetrunnerGiveConnectedDevices() => (array:handle:gameDeviceComponentPS),
		FillAgentsList() => (agentsList: array:PSOwnerData),
		IsMasterType() => (Bool),
		GetFirstAttachedSlave() => (handle:gameDeviceComponentPS),
		GetAllDescendants() => (outDevices: array:handle:gameDeviceComponentPS),
		GetPuppets() => (array:handle:PuppetDeviceLinkPS),
		GetImmediateSlaves() => (array:handle:gameDeviceComponentPS),
		HasAnySlave() => (Bool),
		GetImmediateDescendants() => (array:handle:gameDeviceComponentPS),
		ExtractActionFromSlave(slave: handle:gameDeviceComponentPS, actionName: CName) => (Bool, outAction: handle:gamedeviceAction),
		SendActionsToAllSlaves(actions: array:handle:ScriptableDeviceAction),
		SendActionToAllSlaves(action: handle:ScriptableDeviceAction),
		SendEventToAllSlaves(evt: handle:redEvent),
		GetQuickHacksFromSlave(context: gameGetActionsContext) => (outActions: array:handle:gamedeviceAction),
		RequestAreaEffectVisualisationUpdateOnSlaves(areaEffectID: CName, show: Bool),
		OnRequestThumbnailWidgetsUpdate(evt: handle:RequestThumbnailWidgetsUpdateEvent),
		OnRequestDeviceWidgetUpdate(evt: handle:RequestDeviceWidgetUpdateEvent),
		GetBlackboardDef() => (handle:MasterDeviceBaseBlackboardDef),
		GetThumbnailWidgets() => (array:SThumbnailWidgetPackage),
		GetDeviceWidgets() => (array:SDeviceWidgetPackage),
		GetSlaveDeviceWidget(deviceID: gamePersistentID) => (SDeviceWidgetPackage),
		RequestThumbnailWidgetsUpdate(blackboard: handle:gameIBlackboard),
		RequestDeviceWidgetsUpdate(blackboard: handle:gameIBlackboard, devices: array:gamePersistentID),
		RequestDeviceWidgetsUpdate(blackboard: handle:gameIBlackboard, deviceID: gamePersistentID),
		RequestAllDevicesWidgetsUpdate(blackboard: handle:gameIBlackboard),
		RefreshSlaves_Event(onInitialize: Bool),
		RefreshDefaultHighlightOnSlaves(),
		SetSlavesAsQuestImportant(isImportant: Bool),
		OnRefreshSlavesEvent(evt: handle:RefreshSlavesEvent) => (EntityNotificationType),
		OnFillTakeOverChainBBoardEvent(evt: handle:FillTakeOverChainBBoardEvent) => (EntityNotificationType),
		FillTakeOverChainBB(),
		RevealDevicesGrid(shouldDraw: Bool, ownerEntityPosition: Vector4, fxDefault: gameFxResource, isPing: Bool, lifetime: Float, revealSlave: Bool, revealMaster: Bool, ignoreRevealed: Bool),
		OnInstantiated() => (Bool),
		GetParents() => (outDevices: array:handle:gameDeviceComponentPS),
		GetImmediateParents() => (array:handle:gameDeviceComponentPS),
		Initialize(),
		OnGameAttached(evt: handle:GameAttachedEvent) => (EntityNotificationType),
		OnLogicReady(evt: handle:SetLogicReadyEvent) => (EntityNotificationType),
		GameAttached(),
		LogicReady(),
		SetDeviceState(state: EDeviceStatus),
		OnDeviceDynamicConnectionChange(evt: handle:gameDeviceDynamicConnectionChange) => (EntityNotificationType),
		CacheDevices(),
		InitializeRPGParams(),
		InitializeContentScale(),
		InitializeStats(),
		InitializeStatPools(),
		InitializeSkillChecks(container: handle:BaseSkillCheckContainer),
		IsInitialized() => (Bool),
		ForceResolveGameplayStateOnAttach() => (Bool),
		ForceVisibilityInAnimSystemOnLogicReady() => (Bool),
		GetDeviceName() => (String),
		GetTweakDBRecord() => (TweakDBID),
		GetTweakDBDescriptionRecord() => (TweakDBID),
		GetContentAssignmentID() => (TweakDBID),
		IsConnectedToSystem() => (Bool),
		IsPartOfSystem(systemType: ESystems) => (Bool),
		GetDurabilityState() => (EDeviceDurabilityState),
		GetActivationState() => (EActivationState),
		HasAdvancedInteractions() => (Bool),
		CanBeTrapped() => (Bool),
		CanBeDisassembled() => (Bool),
		CanBeFixed() => (Bool),
		GetDurabilityType() => (EDeviceDurabilityType),
		HasPersonalLinkSlot() => (Bool),
		CanBeScavengedBySpiderbot() => (Bool),
		HasQuickHacksDisabled() => (Bool),
		GetMinigameDefinition() => (TweakDBID),
		OnQuestMinigameRequest(),
		ShouldExposePersonalLinkAction() => (Bool),
		SetHasPersonalLinkSlot(isPersonalLinkSlotPresent: Bool),
		SetHasUICameraZoom(hasUICameraZoom: Bool),
		ToggleInteractivity(isInteractive: Bool),
		IsInteractive() => (Bool),
		IsAdvancedInteractionModeOn() => (Bool),
		IsAdvancedInteractionModeOff() => (Bool),
		GetPersonalLinkStatus() => (EPersonalLinkConnectionStatus),
		IsPersonalLinkConnected() => (Bool),
		IsPersonalLinkConnecting() => (Bool),
		IsPersonalLinkDisconnected() => (Bool),
		IsSecurityWakeUpBlocked() => (Bool),
		HasUICameraZoom() => (Bool),
		AllowsUICameraZoomDynamicSwitch() => (Bool),
		HasFullScreenUI() => (Bool),
		IsHighlightedInFocusMode() => (Bool),
		IsControlledByPlayer() => (Bool),
		CanPlayerTakeOverControl() => (Bool),
		IsRestarting() => (Bool),
		IsGlitching() => (Bool),
		IsDistracting() => (Bool),
		IsActivated() => (Bool),
		GetActiveContexts() => (array:gamedeviceRequestType),
		GetMinigameAttempt() => (Int32),
		ShouldScannerShowStatus() => (Bool),
		ShouldScannerShowNetwork() => (Bool),
		ShouldScannerShowAttitude() => (Bool),
		ShouldScannerShowRole() => (Bool),
		ShouldScannerShowHealth() => (Bool),
		CanBeInDeviceChain() => (Bool),
		ShouldShowExamineIntaraction() => (Bool),
		IsSpiderbotInteractionOrdered() => (Bool),
		OnSetIsSpiderbotInteractionOrderedEvent(evt: handle:SetIsSpiderbotInteractionOrderedEvent) => (EntityNotificationType),
		IsInDirectInteractionRange() => (Bool),
		HasActiveContext(context: gamedeviceRequestType) => (Bool),
		HasPlaystyle(playstyle: EPlaystyle) => (Bool),
		GetPlaystyles() => (array:EPlaystyle),
		HasAnyPlaystyle() => (Bool),
		PassDeviceName(deviceName: String, dbgDeviceName: CName),
		DisbaleRPGChecksForAction(actionID: TweakDBID),
		EnableRPGChecksForAction(actionID: TweakDBID),
		HasAnyActionsWithDisabledRPGChecks() => (Bool),
		IsActionRPGRequirementDisabled(actionID: TweakDBID) => (Bool),
		SetGlitchingState(isGlitching: Bool),
		AddActiveContext(context: gamedeviceRequestType),
		OnAddActiveContext(evt: handle:AddActiveContextEvent) => (EntityNotificationType),
		RemoveActiveContext(context: gamedeviceRequestType),
		OnRemoveActiveContext(evt: handle:RemoveActiveContextEvent) => (EntityNotificationType),
		RefreshPS(),
		OnPSRefreshEvent(evt: handle:PSRefreshEvent) => (EntityNotificationType),
		AddPlaystyle(playstyle: EPlaystyle),
		RemovePlaystyle(playstyle: EPlaystyle),
		DetermineInitialPlaystyle(),
		OnActionOverride(evt: handle:ActionOverride) => (EntityNotificationType),
		GetAllQuickHackVulnerabilities() => (array:TweakDBID),
		GetActiveQuickHackVulnerabilities() => (array:TweakDBID),
		HasAnyActiveQuickHackVulnerabilities() => (Bool),
		CanPlayerUseQuickHackVulnerability(data: TweakDBID) => (Bool),
		InitializeQuickHackVulnerabilities(),
		HasQuickHackVulnerability(data: TweakDBID) => (Bool),
		HasHasQuickHackVulnerabilitiesInitialized() => (Bool),
		AddQuickHackVulnerability(data: TweakDBID),
		RemoveQuickHackVoulnerability(data: TweakDBID),
		UpdateQuickHackableState(isQuickHackable: Bool),
		SetPlayerTakeOverControl(canBeControlled: Bool),
		GetJuryrigTrapState() => (EJuryrigTrapState),
		IsJuryrigTrapArmed() => (Bool),
		IsJuryrigTrapUnarmed() => (Bool),
		IsJuryrigTrapTriggered() => (Bool),
		IsON() => (Bool),
		IsOFF() => (Bool),
		IsEnabled() => (Bool),
		IsDisabled() => (Bool),
		IsPowered() => (Bool),
		IsUnpowered() => (Bool),
		GetDeviceStatus() => (String),
		GetDeviceStatusAction() => (handle:BaseDeviceStatus),
		GetScannerStatusRecord() => (TweakDBID),
		GetDeviceStatusTextData() => (handle:textTextParameterSet),
		GetActionByName(actionName: CName, entityID: entEntityID) => (handle:gamedeviceAction),
		GetActionByName(actionName: CName, context: gameGetActionsContext) => (handle:gamedeviceAction),
		GetMinigameActionByName(actionName: CName, context: gameGetActionsContext) => (handle:gamedeviceAction),
		GetTotalClearance(entityID: entEntityID) => (gameGetActionsContext),
		GetTotalClearanceValue() => (handle:gamedeviceClearance),
		GetCustomClearance(min: Int32, max: Int32) => (handle:gamedeviceClearance),
		GetClearance() => (handle:gamedeviceClearance),
		IsPlayerPerformingTakedown() => (Bool),
		GetActions(context: gameGetActionsContext) => (Bool, outActions: array:handle:gamedeviceAction),
		IsPotentiallyQuickHackable() => (Bool),
		CanCreateAnyQuickHackActions() => (Bool),
		GetQuickHackActions(context: gameGetActionsContext) => (outActions: array:handle:gamedeviceAction),
		GetMinigameActions(context: gameGetActionsContext) => (outActions: array:handle:gamedeviceAction),
		FinalizeGetQuickHackActions(context: gameGetActionsContext) => (outActions: array:handle:gamedeviceAction),
		FinalizeGetActions() => (outActions: array:handle:gamedeviceAction),
		GetQuickHackActionsExternal(context: gameGetActionsContext) => (outActions: array:handle:gamedeviceAction),
		CanCreateAnySpiderbotActions() => (Bool),
		GetSpiderbotActions(context: gameGetActionsContext) => (outActions: array:handle:gamedeviceAction),
		SetInactiveActionsWithExceptions() => (outActions: array:handle:gamedeviceAction),
		GetActionsRestrictionData() => (Bool, allowedNames: array:String, disallowedNames: array:String, inactiveReason: String),
		FindActionInTweakList(actionName: CName, allowedNames: array:String) => (Bool),
		GetLocalPassword() => (CName),
		HasAuthorizationModule() => (Bool),
		IsAuthorizationModuleOn() => (Bool),
		IsAuthorizationModuleOff() => (Bool),
		SetBlockSecurityWakeUp(value: Bool),
		GetMySecurityAccessLevel() => (ESecurityAccessLevel),
		GetSecurityAlarm() => (handle:SecurityAlarmControllerPS),
		GetDropPointSystem() => (handle:DropPointSystem),
		GetSecurityAreasWithUsersInside() => (array:handle:SecurityAreaControllerPS, uniqueUsers: array:AreaEntry),
		GetSecurityAreasWithUsersInside() => (array:handle:SecurityAreaControllerPS),
		GetSecurityAreasWithUserInside(whoToCheck: entEntityID) => (array:handle:SecurityAreaControllerPS),
		GetSecurityAreasWithUserInside(whoToCheck: handle:gameObject) => (array:handle:SecurityAreaControllerPS),
		SetCurrentSpiderbotActionPerformed(action: handle:ScriptableDeviceAction),
		GetCurrentlyQueuedSpiderbotAction() => (handle:ScriptableDeviceAction),
		IsDeviceSecured() => (Bool),
		IsDeviceSecuredWithPassword() => (Bool),
		IsDeviceSecuredWithKeycard() => (Bool),
		HasActiveStaticHackingSkillcheck() => (Bool),
		IsPlayerAuthorized() => (Bool),
		CanPayToAuthorize() => (Bool),
		IsUserAuthorized(user: entEntityID) => (Bool),
		GetUserAuthorizationLevel(user: entEntityID) => (ESecurityAccessLevel),
		CurrentlyAuthorizedUsers() => (array:SecuritySystemClearanceEntry),
		UserAuthorizationAttempt(userToAuthorize: entEntityID, password: CName) => (Bool),
		MasterUserAuthorizationAttempt(userToAuthorize: entEntityID, password: CName) => (Bool),
		ActionAuthorizeUser() => (handle:AuthorizeUser),
		OnAuthorizeUser(evt: handle:AuthorizeUser) => (EntityNotificationType),
		ActionSetAuthorizationModuleON() => (handle:SetAuthorizationModuleON),
		OnSetAuthorizationModuleON(evt: handle:SetAuthorizationModuleON) => (EntityNotificationType),
		ActionSetAuthorizationModuleOFF() => (handle:SetAuthorizationModuleOFF),
		OnSetAuthorizationModuleOFF(evt: handle:SetAuthorizationModuleOFF) => (EntityNotificationType),
		ActionPay(context: gameGetActionsContext) => (handle:Pay),
		TriggerSecuritySystemNotification(whoBreached: handle:gameObject, lastKnownPosition: Vector4, type: ESecurityNotificationType, forceNotification: Bool),
		ActionSecurityBreachNotification(lastKnownPosition: Vector4, whoBreached: handle:gameObject, type: ESecurityNotificationType) => (handle:SecuritySystemInput),
		WasQuickHacked() => (Bool),
		WasQuickHackAttempt() => (Bool),
		WasQuickHackJustPerformed(quickHackName: CName) => (Bool),
		OnSetWasQuickHacked(evt: handle:SetQuickHackEvent) => (EntityNotificationType),
		OnSetWasQuickHackedAtempt(evt: handle:SetQuickHackAttemptEvent) => (EntityNotificationType),
		IsConnectedToAccessPoint() => (Bool),
		GetNetworkSizeCount() => (Int32),
		GetBackdoorDevices() => (array:handle:ScriptableDeviceComponentPS),
		IsMainframe() => (Bool),
		GetNetworkArea() => (whandle:NetworkAreaControllerPS),
		HackingPerformed() => (Bool),
		EngineeringPerformed() => (Bool),
		DemolitionPerformed() => (Bool),
		ActionHacking(context: gameGetActionsContext) => (handle:ActionHacking),
		OnActionHacking(evt: handle:ActionHacking) => (EntityNotificationType),
		ResolveActionHackingCompleted(evt: handle:ActionHacking),
		InitializeBackdoorSkillcheck(),
		ActionEngineering(context: gameGetActionsContext) => (handle:ActionEngineering),
		OnActionEngineering(evt: handle:ActionEngineering) => (EntityNotificationType),
		ActionDemolition(context: gameGetActionsContext) => (handle:ActionDemolition),
		OnActionDemolition(evt: handle:ActionDemolition) => (EntityNotificationType),
		OnResolveSkillchecksEvent(evt: handle:ResolveSkillchecksEvent) => (EntityNotificationType),
		ResolveOtherSkillchecks(),
		GetSkillCheckContainer() => (handle:BaseSkillCheckContainer),
		HasAnySkillCheckActive() => (Bool),
		IsHackingSkillCheckActive() => (Bool),
		IsDemolitionSkillCheckActive() => (Bool),
		IsEngineeringSkillCheckActive() => (Bool),
		CanPassEngineeringSkillCheck(requester: handle:gameObject) => (Bool),
		CanPassDemolitionSkillCheck(requester: handle:gameObject) => (Bool),
		CanPassHackingSkillCheck(requester: handle:gameObject) => (Bool),
		CanPassAnySkillCheck(requester: handle:gameObject) => (Bool),
		CanPassAnySkillCheckOnMaster(requester: handle:gameObject) => (Bool),
		IsSkillCheckActive() => (Bool),
		WasHackingSkillCheckActive() => (Bool),
		WasDemolitionSkillCheckActive() => (Bool),
		WasEngineeringSkillCheckActive() => (Bool),
		PushSkillCheckActions(context: gameGetActionsContext) => (Bool, outActions: array:handle:gamedeviceAction),
		HasCyberdeck() => (Bool),
		ShouldPersonalLinkBlockActions() => (Bool),
		CreateSkillcheckInfo(context: gameGetActionsContext) => (array:UIInteractionSkillCheck),
		IsSpiderbotActionsConditionsFulfilled() => (Bool),
		ActionSpiderbotDistraction() => (handle:SpiderbotDistraction),
		ActionQuickHackDistraction() => (handle:QuickHackDistraction),
		IsInvestigated() => (Bool),
		FinishDistraction(),
		OnQuickHackDistraction(evt: handle:QuickHackDistraction) => (EntityNotificationType),
		OnQuickHackAuthorization(evt: handle:QuickHackAuthorization) => (EntityNotificationType),
		GetConnectionHighlightObjects() => (array:NodeRef),
		ShouldDrawGridLink() => (Bool),
		IsLinkDynamic() => (Bool),
		ShouldRevealDevicesGrid() => (Bool),
		CanRevealDevicesGridWhenUnpowered() => (Bool),
		GetVirtualNetworkShapeID() => (TweakDBID),
		GetCityLightSystem() => (handle:CityLightSystem),
		GetEquipmentSystem() => (handle:EquipmentSystem),
		CheckIfMyBackdoorsWereRevealedInNetworkPing() => (Bool),
		ShouldRevealNetworkGrid() => (Bool),
		SetFocusModeData(isHighlighted: Bool),
		OnForceUpdateDefaultHighlightEvent(evt: handle:ForceUpdateDefaultHighlightEvent) => (EntityNotificationType),
		RevealNetworkGrid(shouldDraw: Bool, ownerEntityPosition: Vector4, fxDefault: gameFxResource, fxBreached: gameFxResource, isPing: Bool, lifetime: Float, revealSlave: Bool, revealMaster: Bool, ignoreRevealed: Bool),
		FinalizeNetworkLinkRegistration(registerAsMaster: Bool, relevantDevices: array:handle:gameDeviceComponentPS, breachedResource: gameFxResource, defaultResource: gameFxResource, isPing: Bool, lifetime: Float, revealSlave: Bool, revealMaster: Bool),
		RevealDevicesGrid(shouldDraw: Bool, ownerEntityPosition: Vector4, fxDefault: gameFxResource, isPing: Bool, lifetime: Float, revealSlave: Bool, revealMaster: Bool, ignoreRevealed: Bool),
		RevealDevicesGridOnEntity_Event(shouldDraw: Bool, target: entEntityID),
		OnRevealNetworkGridEvent(evt: handle:RevealNetworkGridEvent) => (EntityNotificationType),
		OnRevealDevicesGridEvent(evt: handle:RevealDevicesGridEvent) => (EntityNotificationType),
		OnPingNetworkGridEvent(evt: handle:PingNetworkGridEvent) => (EntityNotificationType),
		ShouldDebug() => (Bool),
		GetDebugName() => (String),
		GetDebugPath() => (CName),
		GetDebugTags() => (String),
		LogActionDetails(action: handle:ScriptableDeviceAction, cachedStatus: handle:BaseDeviceStatus, context: String, status: String, overrideStatus: Bool),
		GetWidgetTypeName() => (CName),
		GetDeviceIconPath() => (String),
		GetDeviceIconID() => (CName),
		OnRequestActionWidgetsUpdate(evt: handle:RequestActionWidgetsUpdateEvent),
		OnRequestUIRefresh(evt: handle:RequestUIRefreshEvent),
		ResloveUIOnAction(action: handle:ScriptableDeviceAction),
		GetVirtualSystem() => (Bool, vs: handle:VirtualSystemPS),
		GetInkWidgetTweakDBID(context: gameGetActionsContext) => (TweakDBID),
		OnThumbnailUI(evt: handle:ThumbnailUI) => (EntityNotificationType),
		RefreshUI(blackboard: handle:gameIBlackboard),
		RequestBreadCrumbUpdate(blackboard: handle:gameIBlackboard, data: SBreadCrumbUpdateData),
		ResolveDeviceWidgetTweakDBData(data: SDeviceWidgetPackage) => (SDeviceWidgetPackage),
		GetWidgetVisualState() => (EWidgetState),
		GetDeviceWidget(context: gameGetActionsContext) => (SDeviceWidgetPackage),
		GetThumbnailWidget() => (SThumbnailWidgetPackage),
		GetActionWidgets(context: gameGetActionsContext) => (array:SActionWidgetPackage),
		RequestActionWidgetsUpdate(blackboard: handle:gameIBlackboard),
		RequestDeviceWidgetsUpdate(blackboard: handle:gameIBlackboard),
		ResolveBaseActionOperation(action: handle:ScriptableDeviceAction),
		GetDeviceOperationsContainer() => (handle:DeviceOperationsContainer),
		StorePerformedActionID(oryginalAction: handle:ScriptableDeviceAction),
		ResetPerformedActionsStorage(),
		GetPerformedActionsIDs() => (array:CName),
		GetPerformedActions() => (array:SPerformedActions),
		WasActionPerformed(actionID: CName) => (Int32),
		WasDeviceActionPerformed(actionID: CName) => (Bool),
		WasActionPerformed(actionID: CName, context: EActionContext) => (Bool),
		IsIniatialStateOperationPerformed() => (Bool),
		SetInitialStateOperataionPerformed(value: Bool),
		DetermineInteractionState(interactionComponent: handle:gameinteractionsComponent, context: gameGetActionsContext),
		PushInactiveInteractionChoice(context: gameGetActionsContext) => (choices: array:gameinteractionsChoice),
		DetermineAreaHintIndicatorState(context: gameGetActionsContext),
		PushChoicesToInteractionComponent(interactionComponent: handle:gameinteractionsComponent, context: gameGetActionsContext, choices: array:gameinteractionsChoice),
		TutorialProcessSkillcheck(choices: array:gameinteractionsChoice),
		GenerateContext(requestType: gamedeviceRequestType, providedClearance: handle:gamedeviceClearance, providedProcessInitiator: handle:gameObject, providedRequestor: entEntityID) => (gameGetActionsContext),
		DetermineGameplayViability(context: gameGetActionsContext, hasActiveActions: Bool) => (Bool),
		PushReturnActions(context: gameGetActionsContext) => (Bool, outActions: array:handle:gamedeviceAction),
		SetActionIllegality(isIllegal: Bool) => (outActions: array:handle:gamedeviceAction),
		GetRemoteActions(context: gameGetActionsContext) => (outActions: array:handle:gamedeviceAction),
		EvaluateActionsRPGAvailabilty(context: gameGetActionsContext) => (outActions: array:handle:gamedeviceAction),
		SetActionsQuickHacksExecutioner() => (outActions: array:handle:gamedeviceAction),
		MarkActionsAsQuickHacks() => (actionsToMark: array:handle:gamedeviceAction),
		MarkActionsAsSpiderbotActions() => (actionsToMark: array:handle:gamedeviceAction),
		ExtractActions(actionNames: array:CName) => (array:handle:gamedeviceAction),
		GetQuestActions(context: gameGetActionsContext) => (outActions: array:handle:gamedeviceAction),
		ActionDeviceStatus() => (handle:BaseDeviceStatus),
		ActionToggleActivation() => (handle:ToggleActivation),
		OnToggleActivation(evt: handle:ToggleActivation) => (EntityNotificationType),
		ActionToggleActivate() => (handle:ToggleActivate),
		OnToggleActivate(evt: handle:ToggleActivate) => (EntityNotificationType),
		ActionActivateDevice() => (handle:ActivateDevice),
		OnActivateDevice(evt: handle:ActivateDevice) => (EntityNotificationType),
		ActionDeactivateDevice() => (handle:DeactivateDevice),
		OnDeactivateDevice(evt: handle:DeactivateDevice) => (EntityNotificationType),
		ActionTogglePower() => (handle:TogglePower),
		OnTogglePower(evt: handle:TogglePower) => (EntityNotificationType),
		ActionToggleON() => (handle:ToggleON),
		OnToggleON(evt: handle:ToggleON) => (EntityNotificationType),
		ActionSetDeviceON() => (handle:SetDeviceON),
		OnSetDeviceON(evt: handle:SetDeviceON) => (EntityNotificationType),
		ActionSetDeviceOFF() => (handle:SetDeviceOFF),
		OnSetDeviceOFF(evt: handle:SetDeviceOFF) => (EntityNotificationType),
		ActionSetDevicePowered() => (handle:SetDevicePowered),
		OnSetDevicePowered(evt: handle:SetDevicePowered) => (EntityNotificationType),
		ActionSetDeviceUnpowered() => (handle:SetDeviceUnpowered),
		OnSetDeviceUnpowered(evt: handle:SetDeviceUnpowered) => (EntityNotificationType),
		ActionTogglePersonalLink(executor: whandle:gameObject, questForcesDisconnection: Bool, skipMinigame: Bool) => (handle:TogglePersonalLink),
		OnTogglePersonalLink(evt: handle:TogglePersonalLink) => (EntityNotificationType),
		ResolvePersonalLinkConnection(evt: handle:TogglePersonalLink, abortOperations: Bool),
		DisconnectPersonalLink(executor: handle:gameObject, layer: CName, isForcedByQuest: Bool),
		DisconnectPersonalLink(evt: handle:ScriptableDeviceAction, isForcedByQuest: Bool),
		ActionRemoteBreach() => (handle:RemoteBreach),
		OnActionRemoteBreach(evt: handle:RemoteBreach) => (EntityNotificationType),
		ActionPing() => (handle:PingDevice),
		OnActionPing(evt: handle:PingDevice) => (EntityNotificationType),
		GetNetworkBlackboardDef() => (handle:NetworkBlackboardDef),
		GetNetworkBlackboard() => (handle:gameIBlackboard),
		OnPingSquadEvent(evt: handle:ForwardPingToSquadEvent) => (EntityNotificationType),
		PingSquad(),
		ActionToggleNetrunnerDive(abortDive: Bool, skipMinigame: Bool, isRemote: Bool) => (handle:ToggleNetrunnerDive),
		OnToggleNetrunnerDive(evt: handle:ToggleNetrunnerDive) => (EntityNotificationType),
		ResolveDive(isBackdoor: Bool),
		HackingMinigameEnded(state: gameuiHackingMinigameState),
		SetMinigameState(state: gameuiHackingMinigameState),
		WasHackingMinigameSucceeded() => (Bool),
		WashackingMinigameFailed() => (Bool),
		FinalizeNetrunnerDive(state: gameuiHackingMinigameState),
		ActionToggleZoomInteraction() => (handle:ToggleZoomInteraction),
		ActionQuestForceCameraZoom(value: Bool) => (handle:QuestForceCameraZoom),
		ActionQuestForceCameraZoomNoWorkspot(value: Bool) => (handle:QuestForceCameraZoom),
		ActionOpenFullscreenUI() => (handle:OpenFullscreenUI),
		OnToggleZoomInteraction(evt: handle:ToggleZoomInteraction) => (EntityNotificationType),
		OnQuestForceCameraZoom(evt: handle:QuestForceCameraZoom) => (EntityNotificationType),
		OnSetCustomPersonalLinkReason(evt: handle:SetCustomPersonalLinkReason) => (EntityNotificationType),
		OnOpenFullscreenUI(evt: handle:OpenFullscreenUI) => (EntityNotificationType),
		ActionDisassembleDevice() => (handle:DisassembleDevice),
		ActionFixDevice() => (handle:FixDevice),
		OnFixDevice(evt: handle:FixDevice) => (EntityNotificationType),
		OnDisassembleDevice(evt: handle:DisassembleDevice) => (EntityNotificationType),
		ActionToggleJuryrigTrap() => (handle:ToggleJuryrigTrap),
		OnToggleJuryrigTrap(evt: handle:ToggleJuryrigTrap) => (EntityNotificationType),
		ActionScavenge(context: gameGetActionsContext) => (handle:ActionScavenge),
		OnActionScavenge(evt: handle:ActionScavenge) => (EntityNotificationType),
		ActionSetExposeQuickHacks() => (handle:SetExposeQuickHacks),
		OnSetExposeQuickHacks(evt: handle:SetExposeQuickHacks) => (EntityNotificationType),
		OnRevokeQuickHackAccess(evt: handle:RevokeQuickHackAccess) => (Bool),
		ActionQuickHackToggleON() => (handle:QuickHackToggleON),
		OnQuickHackToggleOn(evt: handle:QuickHackToggleON) => (EntityNotificationType),
		ActionGlitchScreen(actionID: TweakDBID, programID: TweakDBID, timeout: Float) => (handle:GlitchScreen),
		OnGlitchScreen(evt: handle:GlitchScreen) => (EntityNotificationType),
		ActionQuestForceEnabled() => (handle:QuestForceEnabled),
		OnQuestForceEnabled(evt: handle:QuestForceEnabled) => (EntityNotificationType),
		ActionQuestForceDisabled() => (handle:QuestForceDisabled),
		OnQuestForceDisabled(evt: handle:QuestForceDisabled) => (EntityNotificationType),
		ActionQuestForcePower() => (handle:QuestForcePower),
		OnQuestForcePower(evt: handle:QuestForcePower) => (EntityNotificationType),
		ActionQuestForceUnpower() => (handle:QuestForceUnpower),
		OnQuestForceUnpower(evt: handle:QuestForceUnpower) => (EntityNotificationType),
		ActionQuestForceON() => (handle:QuestForceON),
		OnQuestForceON(evt: handle:QuestForceON) => (EntityNotificationType),
		ActionQuestForceOFF() => (handle:QuestForceOFF),
		OnQuestForceOFF(evt: handle:QuestForceOFF) => (EntityNotificationType),
		ActionQuestForceDestructible() => (handle:QuestForceDestructible),
		OnQuestForceDestructible(evt: handle:QuestForceDestructible) => (EntityNotificationType),
		ActionQuestForceIndestructible() => (handle:QuestForceIndestructible),
		OnQuestForceIndestructible(evt: handle:QuestForceIndestructible) => (EntityNotificationType),
		ActionQuestForceInvulnerable() => (handle:QuestForceInvulnerable),
		OnQuestForceInvulnerable(evt: handle:QuestForceInvulnerable) => (EntityNotificationType),
		ActionQuestForceAuthorizationEnabled() => (handle:QuestForceAuthorizationEnabled),
		OnQuestForceAuthorizationEnabled(evt: handle:QuestForceAuthorizationEnabled) => (EntityNotificationType),
		ActionQuestEnableFixing() => (handle:QuestEnableFixing),
		ActionQuestDisableFixing() => (handle:QuestDisableFixing),
		OnQuestEnableFixing(evt: handle:QuestEnableFixing) => (EntityNotificationType),
		OnQuestDisableFixing(evt: handle:QuestDisableFixing) => (EntityNotificationType),
		ActionQuestRemoveQuickHacks() => (handle:QuestRemoveQuickHacks),
		OnQuestRemoveQuickHacks(evt: handle:QuestRemoveQuickHacks) => (EntityNotificationType),
		ActionQuestResetPerfomedActionsStorage() => (handle:QuestResetPerformedActionsStorage),
		OnQuestResetPerfomedActionsStorage(evt: handle:QuestResetPerformedActionsStorage) => (EntityNotificationType),
		ActionQuestBreachAccessPoint() => (handle:QuestBreachAccessPoint),
		OnQuestBreachAccessPoint(evt: handle:QuestBreachAccessPoint) => (EntityNotificationType),
		ActionQuestForceAuthorizationDisabled() => (handle:QuestForceAuthorizationDisabled),
		OnQuestForceAuthorizationDisabled(evt: handle:QuestForceAuthorizationDisabled) => (EntityNotificationType),
		ActionQuestForceDisconnectPersonalLink() => (handle:QuestForceDisconnectPersonalLink),
		OnQuestForceDisconnectPersonalLink(evt: handle:QuestForceDisconnectPersonalLink) => (EntityNotificationType),
		ActionQuestForcePersonalLinkUnderStrictQuestControl() => (handle:QuestForcePersonalLinkUnderStrictQuestControl),
		OnQuestForcePersonalLinkUnderStrictQuestControl(evt: handle:QuestForcePersonalLinkUnderStrictQuestControl) => (EntityNotificationType),
		ActionQuestForceJuryrigTrapArmed() => (handle:QuestForceJuryrigTrapArmed),
		OnQuestForceJuryrigTrapArmed(evt: handle:QuestForceJuryrigTrapArmed) => (EntityNotificationType),
		ActionQuestForceJuryrigTrapDeactivated() => (handle:QuestForceJuryrigTrapDeactivated),
		OnQuestForceJuryrigTrapDeactivated(evt: handle:QuestForceJuryrigTrapDeactivated) => (EntityNotificationType),
		ActionQuestResetDeviceToInitialState() => (handle:QuestResetDeviceToInitialState),
		OnQuestResetDeviceToInitialState(evt: handle:QuestResetDeviceToInitialState) => (EntityNotificationType),
		ActionQuestStartGlitch() => (handle:QuestStartGlitch),
		OnQuestStartGlitch(evt: handle:QuestStartGlitch) => (EntityNotificationType),
		ActionQuestStopGlitch() => (handle:QuestStopGlitch),
		OnQuestStopGlitch(evt: handle:QuestStopGlitch) => (EntityNotificationType),
		OnSetAsQuestImportantEvent(evt: handle:gameSetAsQuestImportantEvent) => (EntityNotificationType),
		ActionQuestForceSecuritySystemSafe() => (handle:QuestForceSecuritySystemSafe),
		OnQuestForceSecuritySystemSafe(evt: handle:QuestForceSecuritySystemSafe) => (EntityNotificationType),
		ActionQuestForceSecuritySystemAlarmed() => (handle:QuestForceSecuritySystemAlarmed),
		OnQuestForceSecuritySystemAlarmed(evt: handle:QuestForceSecuritySystemAlarmed) => (EntityNotificationType),
		ActionQuestForceSecuritySystemArmed() => (handle:QuestForceSecuritySystemArmed),
		OnQuestForceSecuritySystemArmed(evt: handle:QuestForceSecuritySystemArmed) => (EntityNotificationType),
		ActionQuestForceTakeControlOverCamera() => (handle:QuestForceTakeControlOverCamera),
		ActionQuestForceTakeControlOverCameraWithChain() => (handle:QuestForceTakeControlOverCameraWithChain),
		ActionQuestForceStopTakeControlOverCamera() => (handle:QuestForceStopTakeControlOverCamera),
		ActionQuestForceActivate() => (handle:QuestForceActivate),
		OnQuestForceActivate(evt: handle:QuestForceActivate) => (EntityNotificationType),
		ActionQuestForceDeactivate() => (handle:QuestForceDeactivate),
		OnQuestForceDeactivate(evt: handle:QuestForceDeactivate) => (EntityNotificationType),
		ActionTakeOverSecuritySystem(executor: handle:gameObject) => (handle:TakeOverSecuritySystem),
		OnSecuritySystemOutput(evt: handle:SecuritySystemOutput) => (EntityNotificationType),
		OnSecuritySystemForceAttitudeChange(evt: handle:SecuritySystemForceAttitudeChange) => (EntityNotificationType),
		OnSecurityAlarmBreachResponse(evt: handle:SecurityAlarmBreachResponse) => (EntityNotificationType),
		OnSecurityAreaCrossingPerimeter(evt: handle:SecurityAreaCrossingPerimeter) => (EntityNotificationType),
		OnTargetAssessmentRequest(evt: handle:TargetAssessmentRequest) => (EntityNotificationType),
		OnActionForceResetDevice(evt: handle:ActionForceResetDevice) => (EntityNotificationType),
		OnFullSystemRestart(evt: handle:FullSystemRestart) => (EntityNotificationType),
		PerformRestart(),
		TriggerWakeUpDelayedEvent(duration: Int32),
		OnWakeUpEvent(evt: handle:WakeUpFromRestartEvent) => (EntityNotificationType),
		CanPerformReprimand() => (Bool),
		ActionSetDeviceAttitude() => (handle:SetDeviceAttitude),
		Notify(notifier: handle:ActionNotifier, action: handle:ScriptableDeviceAction),
		SendPSChangedEvent(),
		NotifyParents(),
		NotifyParents_Event(),
		OnNotifyParents(evt: handle:NotifyParentsEvent) => (EntityNotificationType),
		UseNotifier(action: handle:ScriptableDeviceAction),
		SendActionFailedEvent(failedAction: handle:ScriptableDeviceAction, whereToSend: entEntityID, context: String) => (EntityNotificationType),
		WakeUpDevice() => (Bool),
		PowerDevice(),
		UnpowerDevice(),
		DisableDevice(),
		ForceDisableDevice(),
		ForceEnableDevice(),
		ForceDeviceON(),
		BreakDevice(),
		EnableDevice(),
		GetFullAuthorizationData() => (array:SecurityAccessLevelEntryClient),
		IsAuthorizationValid() => (Bool),
		GetFullAuthorizationDataSegregated() => (passwords: array:CName, keycards: array:TweakDBID),
		GetPasswords() => (array:CName),
		GetKeycards() => (array:TweakDBID),
		ExtractKeycardsFromAuthorizationData(data: array:SecurityAccessLevelEntryClient) => (array:TweakDBID),
		ExtractPasswordsFromAuthorizationData(data: array:SecurityAccessLevelEntryClient) => (array:CName),
		ExtractKeycardsFromAuthorizationData(data: array:SecurityAccessLevelEntry) => (array:TweakDBID),
		ExtractPasswordsFromAuthorizationData(data: array:SecurityAccessLevelEntry) => (array:CName),
		FindCurrentAuthorizationLevelForUser(user: entEntityID) => (ESecurityAccessLevel),
		AddUser(user: entEntityID, level: ESecurityAccessLevel) => (Bool),
		OnAddUserEvent(evt: handle:AddUserEvent) => (EntityNotificationType),
		IsUserAlreadyOnTheList(entityID: entEntityID) => (Int32),
		RemoveUser(user: entEntityID) => (Bool),
		GetKeycardRecord(record: TweakDBID) => (handle:gamedataItem_Record),
		GetKeycardLocalizedString(record: TweakDBID) => (String),
		TurnAuthorizationModuleON() => (Bool),
		TurnAuthorizationModuleOFF(),
		ExecutePSAction(action: handle:ScriptableDeviceAction, layerTag: CName),
		ExecutePSAction(action: handle:ScriptableDeviceAction, persistentState: handle:gamePersistentState),
		ExecutePSActionWithDelay(action: handle:ScriptableDeviceAction, persistentState: handle:gamePersistentState, forcedDelay: Float),
		OnDelayedActionEvent(evt: handle:DelayedDeviceActionEvent) => (EntityNotificationType),
		ExecuteCurrentSpiderbotActionPerformed(),
		ExtractIDs(persistentStates: array:handle:gamePersistentState) => (persistentIDs: array:gamePersistentID),
		ExtractEntityID(evt: handle:entTriggerEvent) => (entEntityID),
		GetAvailableQuickHacks() => (array:CName),
		HasAnyAvailableQuickHack() => (Bool),
		HasAnyQuickHack() => (Bool),
		UpdateAvailAbleQuickHacks(actions: array:handle:gamedeviceAction),
		AddAvailableQuickHack(quickHackName: CName),
		RemoveAvailableQuickHack(quickHackName: CName),
		ClearAvailableQuickHacks(),
		GetAvailableSpiderbotActions() => (array:CName),
		HasAnyAvailableSpiderbotActions() => (Bool),
		HasAnySpiderbotAction() => (Bool),
		UpdateAvailableSpiderbotActions(actions: array:handle:gamedeviceAction),
		AddAvailableSpiderbotActions(SpiderbotActionName: CName),
		RemoveAvailableSpiderbotActions(SpiderbotActionName: CName),
		ClearAvailableSpiderbotActions(),
		GetPlayerEntityID() => (entEntityID),
		GetPlayerMainObject() => (handle:gameObject),
		GetLocalPlayerControlledGameObject() => (handle:gameObject),
		GetLocalPlayer() => (handle:gameObject),
		RegisterDebugEnableQuickHacksListener(),
		EnableDebugQuickHacks(val: Int32),
		GetMasterDevicesTweaks() => (array:TweakDBID),
		IsLogInExclusiveMode() => (Bool),
		OnNotifyHighlightedDevice(evt: handle:NotifyHighlightedDevice) => (EntityNotificationType),
		SetDurabilityType(durabilityType: EDeviceDurabilityType),
		SetJuryrigTrapActiveState(newState: Bool),
		SetJuryrigTrapArmedState(newState: EJuryrigTrapState),
		SetDurabilityState(newState: EDeviceDurabilityState),
		GetDistractionDuration(effectName: CName) => (Float),
		GetUniqueConnectionTypes() => (array:DeviceConnectionScannerData),
		GetDistractionDuration(action: handle:ScriptableDeviceAction) => (Float),
		IsConnectedToActionsSequencer() => (Bool),
		GetActionsSequencer() => (handle:ActionsSequencerControllerPS),
		OnSequencerLock(evt: handle:SequencerLock) => (EntityNotificationType),
		IsLockedViaSequencer() => (Bool),
		IsControlledByThePlayer() => (Bool),
		IsBroken() => (Bool),
		SetAdvancedInteractionModeOn(value: Bool),
		CanBeScavenged() => (Bool),
		IsConnectedToMaintenanceSystem() => (Bool),
		PushPersistentData(data: BaseDeviceData),
		PushResaveData(data: BaseResaveData),
		LogResaveInfo(),
		SendSpiderbotToPerformAction(action: handle:ScriptableDeviceAction, oryginalExecutor: whandle:gameObject),
		QuestResolveSkillchecks(),
		QuestSetSkillchecks(container: handle:BaseSkillCheckContainer),
		ErasePassedSkillchecks(),
		OnActionCooldownEvent(evt: handle:ActionCooldownEvent) => (EntityNotificationType),
		GetHudManager() => (handle:HUDManager),
		GetTakeOverControlSystem() => (handle:TakeOverControlSystem),
		IsConnectedToCLS() => (Bool),
		OnToggleTakeOverControl(evt: handle:ToggleTakeOverControl) => (EntityNotificationType),
		ActionToggleTakeOverControl() => (handle:ToggleTakeOverControl),
		OnTCSTakeOverControlActivate(evt: handle:TCSTakeOverControlActivate) => (EntityNotificationType),
		SendDeviceNotOperationalEvent(),
		OnTCSTakeOverControlDeactivate(evt: handle:TCSTakeOverControlDeactivate) => (EntityNotificationType),
		SetPSMPostpondedParameterBool(value: Bool),
		ActionProgramSetDeviceOff() => (handle:ProgramSetDeviceOff),
		OnProgramSetDeviceOff(evt: handle:ProgramSetDeviceOff) => (EntityNotificationType),
		ActionProgramSetDeviceAttitude() => (handle:ProgramSetDeviceAttitude),
		OnProgramSetDeviceAttitude(evt: handle:ProgramSetDeviceAttitude) => (EntityNotificationType),
		AddWillingInvestigator(id: entEntityID),
		HasWillingInvestigator(id: entEntityID) => (Bool),
		GetWillingInvestigators() => (array:entEntityID),
		ClearWillingInvestigators(),
		IsSomeoneUsingNPCWorkspot() => (Bool),
		ActionOverloadDevice() => (handle:OverloadDevice),
		OnOverloadDevice(evt: handle:OverloadDevice) => (EntityNotificationType),
		ShouldNPCWorkspotFinishLoop() => (Bool),
		HasNPCWorkspotKillInteraction() => (Bool),
		GetDeviceState() => (EDeviceStatus),
		CacheDeviceState(state: EDeviceStatus),
		SetDeviceState(state: EDeviceStatus),
		EvaluateDeviceState(),
		QueuePSEvent(targetPS: whandle:gamePersistentState, evt: handle:redEvent),
		QueuePSEvent(targetID: gamePersistentID, psClassName: CName, evt: handle:redEvent),
		QueuePSEventWithDelay(targetPS: whandle:gamePersistentState, evt: handle:redEvent, delay: Float),
		QueuePSEventWithDelay(targetID: gamePersistentID, psClassName: CName, evt: handle:redEvent, delay: Float),
		QueueEntityEvent(entityID: entEntityID, evt: handle:redEvent),
		IsPartOfSystem(systemType: ESystems) => (Bool),
		IsConnectedToSecuritySystem() => (Bool),
		IsConnectedToSecuritySystem() => (Bool, level: ESecurityAccessLevel),
		GetSecurityAccessLevel() => (ESecurityAccessLevel),
		FindHighestSecurityAccessLevel(securityAreas: array:handle:SecurityAreaControllerPS) => (ESecurityAccessLevel),
		IsBreached() => (Bool),
		HasNetworkBackdoor() => (Bool),
		IsConnectedToBackdoorDevice() => (Bool),
		GetBackdoorAccessPoint() => (handle:AccessPointControllerPS),
		GetAccessPoints() => (array:handle:AccessPointControllerPS),
		GetNetworkName() => (String),
		CheckMasterConnectedClassTypes() => (ConnectedClassTypes),
		WasRevealedInNetworkPing() => (Bool),
		SetRevealedInNetworkPing(wasRevealed: Bool),
		OnSetRevealedInNetwork(evt: handle:SetRevealedInNetwork) => (EntityNotificationType),
		IsPuppet() => (Bool),
		GetNativeActions(context: gameGetActionsContext) => (outActions: array:handle:gamedeviceAction),
		GetClearance() => (handle:gamedeviceClearance),
		GetDeviceName() => (String),
		GetDeviceStatus() => (String),
		GetDeviceIconPath() => (String),
		GetWidgetTypeName() => (CName),
		GetPS(deviceLink: DeviceLink) => (handle:gameDeviceComponentPS),
		IsStatic() => (Bool),
		IsAttachedToGame() => (Bool),
		IsLogicReady() => (Bool),
		GetActions(context: gameGetActionsContext) => (Bool, outActions: array:handle:gamedeviceAction),
		GetQuestActions(context: gameGetActionsContext) => (outActions: array:handle:gamedeviceAction),
		GetActionsToNative(context: gameGetActionsContext) => (array:handle:gamedeviceAction),
		GetQuestActionsToNative(context: gameGetActionsContext) => (array:handle:gamedeviceAction),
		OnMaraudersMapDeviceDebug(sink: handle:worldMaraudersMapDevicesSink),
		GetFirstAttachedSlave() => (handle:gameDeviceComponentPS),
		GetBackdoorObjectiveData() => (handle:BackDoorObjectiveData),
		GetControlPanelObjectiveData() => (handle:ControlPanelObjectiveData),
		InitializeGameplayObjectives(),
		InitializeQuestDBCallbacksForQuestmark(),
		UnInitializeQuestDBCallbacksForQuestmark(),
		GetOwnerEntityWeak() => (whandle:entEntity),
		GetNetworkSystem() => (handle:NetworkSystem),
		ExposeQuickHacks(shouldExpose: Bool),
		ExposeQuickHacks(),
		IsQuickHacksExposed() => (Bool),
		IsScanned() => (Bool),
		GetSecurityAreas(includeInactive: Bool, returnOnlyDirectlyConnected: Bool) => (array:handle:SecurityAreaControllerPS),
		GetSecuritySystem() => (handle:SecuritySystemControllerPS),
		GetPersistentStateName() => (CName),
		GetChildren() => (outDevices: array:handle:gameDeviceComponentPS),
		GetParents() => (outDevices: array:handle:gameDeviceComponentPS),
		GetImmediateParents() => (array:handle:gameDeviceComponentPS),
		GetAncestors() => (outDevices: array:handle:gameDeviceComponentPS),
		HasAnySlave() => (Bool),
		HasAnyDeviceConnection() => (Bool),
		IsMasterType() => (Bool),
		HackGetOwner() => (handle:entEntity),
		IsBeingScanned() => (Bool),
		IsMarkedAsQuest() => (Bool),
		IsAutoTogglingQuestMark() => (Bool),
		GetFactToDisableQuestMarkName() => (CName),
		IsAnyMasterFlaggedAsQuest() => (Bool),
		GetVirtualSystemType() => (EVirtualSystem),
		GetDeviceIconID() => (CName),
		GetDeviceWidget(context: gameGetActionsContext) => (SDeviceWidgetPackage),
		GetBlackboardDef() => (handle:DeviceBaseBlackboardDef),
		GetBlackboard() => (handle:gameIBlackboard),
		GetInkWidgetLibraryPath() => (redResourceReferenceScriptToken),
		GetInkWidgetLibraryID(context: gameGetActionsContext) => (CName),
		GetInkWidgetTweakDBID(context: gameGetActionsContext) => (TweakDBID),
		GetBackgroundTextureTweakDBID() => (TweakDBID),
		GetDeviceIconTweakDBID() => (TweakDBID),
		GetThumbnailWidget() => (SThumbnailWidgetPackage),
		GetActionWidgets(context: gameGetActionsContext) => (array:SActionWidgetPackage),
		GetThumbnailAction() => (handle:ThumbnailUI),
		SetIsMarkedAsQuest(isQuest: Bool),
		SetIsBeingScannedFlag(isBeingScanned: Bool),
		SetIsScanComplete(isComplete: Bool),
		DetermineInteractionState(interactionComponent: handle:gameinteractionsComponent, context: gameGetActionsContext),
		PassBlackboard(blackboard: handle:gameIBlackboard),
		GetVirtualSystem(slave: handle:gameDeviceComponentPS) => (Bool, vs: handle:VirtualSystemPS),
		GetVirtualSystem(id: gamePersistentID) => (Bool, vs: handle:VirtualSystemPS),
		GetVirtualSystem() => (Bool, vs: handle:VirtualSystemPS),
		ResloveUIOnAction(action: handle:ScriptableDeviceAction),
		RefreshUI(blackboard: handle:gameIBlackboard),
		RequestBreadCrumbUpdate(blackboard: handle:gameIBlackboard, data: SBreadCrumbUpdateData),
		RequestActionWidgetsUpdate(blackboard: handle:gameIBlackboard),
		ActionThumbnailUI() => (handle:ThumbnailUI),
		GetMyEntityID() => (entEntityID),
		GetID() => (gamePersistentID),
		GetPersistencySystem() => (handle:gamePersistencySystem),
		GetGameInstance() => (ScriptGameInstance),
		ForcePersistentStateChanged(),
		ToString() => (String),
		GetClassName() => (CName),
		IsA(className: CName) => (Bool),
		IsExactlyA(className: CName) => (Bool),
	},
	staticFunctions: {
		DetectScriptableCycles(),
	},
	properties: {
		level_0: array:SecurityAccessLevelEntry,
		level_1: array:SecurityAccessLevelEntry,
		level_2: array:SecurityAccessLevelEntry,
		level_3: array:SecurityAccessLevelEntry,
		level_4: array:SecurityAccessLevelEntry,
		allowSecuritySystemToDisableItself: Bool,
		attitudeGroup: TweakDBID,
		suppressAbilityToModifyAttitude: Bool,
		attitudeChangeMode: EShouldChangeAttitude,
		performAutomaticResetAfter: Time,
		hideAreasOnMinimap: Bool,
		isUnderStrictQuestControl: Bool,
		securitySystemState: ESecuritySystemState,
		agentsRegistry: handle:AgentRegistry,
		securitySystem: handle:SecuritySystemControllerPS,
		latestOutputEngineTime: Float,
		updateInterval: Float,
		restartDuration: Int32,
		protectedEntityIDs: array:entEntityID,
		entitiesRemainingAtGate: array:entEntityID,
		blacklist: array:handle:BlacklistEntry,
		currentReprimandID: Int32,
		blacklistDelayValid: Bool,
		blacklistDelayID: gameDelayID,
		maxGlobalWarningsCount: Int32,
		delayIDValid: Bool,
		deescalationEventID: gameDelayID,
		outputsSend: Int32,
		inputsReceived: Int32,
		quickHacksEnabled: Bool,
		clearance: handle:gamedeviceClearance,
		isInitialized: Bool,
		forceResolveStateOnAttach: Bool,
		forceVisibilityInAnimSystemOnLogicReady: Bool,
		masters: array:handle:gameDeviceComponentPS,
		mastersCached: Bool,
		deviceName: String,
		activationState: EActivationState,
		drawGridLink: Bool,
		isLinkDynamic: Bool,
		fullDepth: Bool,
		virtualNetworkShapeID: TweakDBID,
		tweakDBRecord: TweakDBID,
		tweakDBDescriptionRecord: TweakDBID,
		contentScale: TweakDBID,
		skillCheckContainer: handle:BaseSkillCheckContainer,
		hasUICameraZoom: Bool,
		allowUICameraZoomDynamicSwitch: Bool,
		hasFullScreenUI: Bool,
		hasAuthorizationModule: Bool,
		hasPersonalLinkSlot: Bool,
		backdoorBreachDifficulty: EGameplayChallengeLevel,
		shouldSkipNetrunnerMinigame: Bool,
		minigameDefinition: TweakDBID,
		minigameAttempt: Int32,
		hackingMinigameState: gameuiHackingMinigameState,
		disablePersonalLinkAutoDisconnect: Bool,
		canHandleAdvancedInteraction: Bool,
		canBeTrapped: Bool,
		disassembleProperties: DisassembleOptions,
		flatheadScavengeProperties: SpiderbotScavengeOptions,
		destructionProperties: DestructionData,
		canPlayerTakeOverControl: Bool,
		canBeInDeviceChain: Bool,
		personalLinkForced: Bool,
		personalLinkCustomInteraction: TweakDBID,
		personalLinkStatus: EPersonalLinkConnectionStatus,
		isAdvancedInteractionModeOn: Bool,
		juryrigTrapState: EJuryrigTrapState,
		isControlledByThePlayer: Bool,
		isHighlightedInFocusMode: Bool,
		wasQuickHacked: Bool,
		wasQuickHackAttempt: Bool,
		lastPerformedQuickHack: CName,
		isGlitching: Bool,
		isRestarting: Bool,
		blockSecurityWakeUp: Bool,
		isLockedViaSequencer: Bool,
		distractExecuted: Bool,
		distractionTimeCompleted: Bool,
		hasNPCWorkspotKillInteraction: Bool,
		shouldNPCWorkspotFinishLoop: Bool,
		durabilityState: EDeviceDurabilityState,
		hasBeenScavenged: Bool,
		currentlyAuthorizedUsers: array:SecuritySystemClearanceEntry,
		performedActions: array:SPerformedActions,
		isInitialStateOperationPerformed: Bool,
		illegalActions: IllegalActionTypes,
		disableQuickHacks: Bool,
		availableQuickHacks: array:CName,
		isKeyloggerInstalled: Bool,
		actionsWithDisabledRPGChecks: array:TweakDBID,
		availableSpiderbotActions: array:CName,
		currentSpiderbotActionPerformed: handle:ScriptableDeviceAction,
		isSpiderbotInteractionOrdered: Bool,
		shouldScannerShowStatus: Bool,
		shouldScannerShowNetwork: Bool,
		shouldScannerShowAttitude: Bool,
		shouldScannerShowRole: Bool,
		shouldScannerShowHealth: Bool,
		debugDevice: Bool,
		debugName: CName,
		debugExposeQuickHacks: Bool,
		debugPath: CName,
		debugID: Uint32,
		deviceOperationsSetup: handle:DeviceOperationsContainer,
		connectionHighlightObjects: array:NodeRef,
		activeContexts: array:gamedeviceRequestType,
		playstyles: array:EPlaystyle,
		quickHackVulnerabilties: array:TweakDBID,
		quickHackVulnerabiltiesInitialized: Bool,
		willingInvestigators: array:entEntityID,
		isInteractive: Bool,
		deviceState: EDeviceStatus,
		authorizationProperties: AuthorizationData,
		wasStateCached: Bool,
		wasStateSet: Bool,
		cachedDeviceState: EDeviceStatus,
		revealDevicesGrid: Bool,
		revealDevicesGridWhenUnpowered: Bool,
		wasRevealedInNetworkPing: Bool,
		hasNetworkBackdoor: Bool,
		markAsQuest: Bool,
		autoToggleQuestMark: Bool,
		factToDisableQuestMark: CName,
		callbackToDisableQuestMarkID: Uint32,
		backdoorObjectiveData: handle:BackDoorObjectiveData,
		controlPanelObjectiveData: handle:ControlPanelObjectiveData,
		blackboard: whandle:gameIBlackboard,
		isScanned: Bool,
		isBeingScanned: Bool,
		exposeQuickHacks: Bool,
		isAttachedToGame: Bool,
		isLogicReady: Bool,
	}
}