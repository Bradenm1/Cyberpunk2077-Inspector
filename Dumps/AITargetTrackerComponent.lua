{
	name: AITargetTrackerComponent,
	functions: {
		RegisterListener(et: handle:entEntity, listener: handle:AIScriptsTargetTrackingListener),
		GetThreats(onlyVisible: Bool) => (array:AITrackedLocation),
		GetHostileThreats(onlyVisible: Bool) => (array:AITrackedLocation),
		GetTopHostileThreat(onlyVisible: Bool) => (Bool, threat: AITrackedLocation),
		AddThreat(et: handle:entEntity, isHostile: Bool, pos: Vector4, accuracy: Float, cooldown: Float, isPersistent: Bool) => (Uint32),
		AddThreatOnPosition(pos: Vector4, timeToLive: Float) => (Uint32),
		SetThreatPersistence(et: handle:entEntity, isPersistent: Bool, src: Uint32),
		GetThreatPersistence(et: handle:entEntity) => (AIThreatPersistenceStatus),
		SetCurrentThreatsPersistence(isPersistent: Bool, src: Uint32),
		SetThreatBaseMul(et: handle:entEntity, threatValue: Float),
		ClearThreats(),
		SetThreatAccuracy(et: handle:entEntity, accuracy: Float),
		SetThreatBeliefAccuracy(et: handle:entEntity, accuracy: Float),
		RequestThreatBeliefAccuracyMinValue(et: handle:entEntity, reason: CName, minAccuracy: Float),
		RemoveThreatBeliefAccuracyMinValue(et: handle:entEntity, reason: CName),
		RemoveThreat(id: Uint32),
		MapThreat(et: handle:entEntity) => (Uint32),
		ResetDroppingCooldown(et: handle:entEntity),
		AddDroppingCooldown(et: handle:entEntity, value: Float),
		GetDroppingCooldown(et: handle:entEntity) => (Float),
		GetCurrentPreset() => (TweakDBID),
		SetCurrentPreset(presetId: TweakDBID),
		PushSquadSync(sqType: AISquadType),
		PullSquadSync(sqType: AISquadType),
		HasHostileThreat(onlyVisible: Bool) => (Bool),
		ThreatFromEntity(et: handle:entEntity) => (Bool, threat: AITrackedLocation),
		SetThreatPriorityDmgCurve(curveName: CName) => (Bool),
		SetThreatPriorityDistCurve(curveName: CName) => (Bool),
		SetThreatPriorityHisteresisCurve(curveName: CName) => (Bool),
		SetThreatPriorityAttackersCurve(curveName: CName) => (Bool),
		GetThreatPriorityModFromDmgCurve(timeSinceLastDmg: Float) => (Float),
		GetThreatPriorityModFromDistCurve(distanceFromThreat: Float) => (Float),
		GetThreatPriorityModFromHisteresisCurve(timeSinceTargetChange: Float) => (Float),
		GetThreatPriorityModFromAttackersCurve(attackers: Uint32) => (Float),
		IsPositionValid(pos: Vector4) => (Bool),
		SetForceDetect(),
		ClearForceDetected(),
		CollectTrackers(onlyHostiles: Bool, onlyInContact: Bool) => (array:handle:entEntity),
		GetThreatLastKnownPositionProvider(threat: whandle:entEntity, offset: Vector3, failIfVisible: Bool, slotName: CName, failSafeProvider: handle:entIPositionProvider) => (handle:entIPositionProvider),
		GetThreatBeliefPositionProvider(threat: whandle:entEntity, offset: Vector3, failIfVisible: Bool, slotName: CName, failSafeProvider: handle:entIPositionProvider) => (handle:entIPositionProvider),
		GetThreatSharedLastKnownPositionProvider(threat: whandle:entEntity, offset: Vector3, failIfVisible: Bool, slotName: CName, failSafeProvider: handle:entIPositionProvider) => (handle:entIPositionProvider),
		GetThreatSharedBeliefPositionProvider(threat: whandle:entEntity, offset: Vector3, failIfVisible: Bool, slotName: CName, failSafeProvider: handle:entIPositionProvider) => (handle:entIPositionProvider),
		GetEntity() => (whandle:entEntity),
		FindComponentByName(componentName: CName) => (whandle:entIComponent),
		GetName() => (CName),
		IsEnabled() => (Bool),
		Toggle(on: Bool),
		QueueEntityEvent(ev: handle:redEvent),
		RegisterRenderDebug(filterName: String, functionName: CName),
		ToString() => (String),
		GetClassName() => (CName),
		IsA(className: CName) => (Bool),
		IsExactlyA(className: CName) => (Bool),
	},
	staticFunctions: {
		DetectScriptableCycles(),
	},
	properties: {
		TriggersCombat: Bool,
		name: CName,
		isReplicable: Bool,
		id: CRUID,
	}
}