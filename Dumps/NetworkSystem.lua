{
	name: NetworkSystem,
	functions: {
		OnAttach(),
		OnDetach(),
		GetPlayerStateMachineBlackboard(playerPuppet: whandle:gameObject) => (handle:gameIBlackboard),
		OnPlayerSpawnedCallback(playerPuppet: handle:gameObject),
		RegisterPlayerSpawnedCallback(),
		RegisterVisionModeCallback(player: handle:gameObject),
		RegisterFocusModeCallback(),
		RegisterPlayerTargetCallback(),
		UnregisterVisionModeCallback(),
		UnregisterFocusModeCallback(),
		UnregisterPlayerTargetCallback(),
		UnregisterPlayerSpawnedCallback(),
		AddNetworkLink(linkData: SNetworkLinkData),
		DeterminNetworkLinkPriority(linkData: SNetworkLinkData) => (EPriority),
		RemoveNetworkLinksByID(ID: entEntityID),
		RemoveNetworkLinksBetweenTwoEntitities(firstID: entEntityID, secondID: entEntityID, onlyRemoveWeakLink: Bool),
		RemoveNetworkLinkByData(linkData: SNetworkLinkData),
		RemoveNetworkLinkByType(linkType: ELinkType),
		RemoveNetworkLinkByIdAndType(linkType: ELinkType, ID: entEntityID),
		RemoveNetworkLink(index: Int32, instant: Bool),
		UnregisterNetworkLinkWithDelay(linkData: SNetworkLinkData) => (gameDelayID),
		RegisterNetworkLinkWithDelay(linkData: SNetworkLinkData, delay: Float),
		HasNetworkLink(linkData: SNetworkLinkData) => (Bool, index: Int32),
		HasNetworkLink(linkData: SNetworkLinkData) => (Bool),
		UpdateNetworkLinkData(linkData: SNetworkLinkData, indexToUpdate: Int32),
		CancelNetworkLinkDelay(linkData: SNetworkLinkData),
		CompareLinks(linkData1: SNetworkLinkData, linkData2: SNetworkLinkData) => (Bool),
		CompareLinksData(linkData1: SNetworkLinkData, linkData2: SNetworkLinkData) => (Bool),
		HasNetworkLinkWithHigherPriority(linkData: SNetworkLinkData) => (Bool),
		HasNetworkLink(ID: entEntityID) => (Bool),
		HasNetworkLink(ID: entEntityID, ignorePingLinks: Bool) => (Bool),
		HasNetworkLink(masterID: entEntityID, slaveID: entEntityID, linkType: ELinkType) => (Bool),
		HasAnyActiveNetworkLink(ID: entEntityID) => (Bool),
		GetNetworkBeam(linkData: SNetworkLinkData) => (handle:gameFxInstance),
		OnNewBackdoorDeviceRequest(request: handle:NewBackdoorDeviceRequest),
		OnMarkBackdoorAsRevealedRequest(request: handle:MarkBackdoorAsRevealedRequest),
		OnUnregisterAllNetworkLinksRequest(request: handle:UnregisterAllNetworkLinksRequest),
		OnDeactivateAllNetworkLinksRequest(request: handle:DeactivateAllNetworkLinksRequest),
		KillAllNetworkBeams(),
		ResolveNetworkSystemCleanupDelay(),
		CleanNetwork(),
		RemoveAllNetworkLinks(),
		OnUnregisterNetworkLinksByIDRequest(request: handle:UnregisterNetworkLinksByIDRequest),
		OnUnregisterNetworkLinksByIdAndTypeRequest(request: handle:UnregisterNetworkLinksByIdAndTypeRequest),
		OnUnregisterNetworkLinkRequest(request: handle:UnregisterNetworkLinkRequest),
		OnUnregisterNetworkLinkBetweenTwoEntitiesRequest(request: handle:UnregisterNetworkLinkBetweenTwoEntitiesRequest),
		KillNetworkBeamsByID(ID: entEntityID),
		KillNetworkBeamByIndex(index: Int32),
		KillNetworkBeamsByID(slaveID: entEntityID, masterID: entEntityID),
		KillNetworkBeamByData(linkData: SNetworkLinkData),
		KillNetworkBeam(index: Int32, instant: Bool),
		OnRegisterNetworkLinkRequest(request: handle:RegisterNetworkLinkRequest),
		RegisterNetworkLink(linkData: SNetworkLinkData),
		OnUpdateNetworkVisualisationRequest(request: handle:UpdateNetworkVisualisationRequest),
		UpdateNetworkVisualisation(),
		DeterminNetworkLinkVisibility(linkIndex: Int32) => (Bool),
		ActivateNetworkLinkByIndex(linkIndex: Int32),
		DrawNetworkBeamByIndex(linkIndex: Int32) => (Bool),
		DrawNetworkBeam(linkData: SNetworkLinkData),
		ResolveConnectionHighlight(enable: Bool, linkData: SNetworkLinkData),
		SendConnectionHighlightEvent(enable: Bool, target: entEntityID, source: entEntityID, linkData: SNetworkLinkData),
		OnEvaluateVisionModeRequest(request: handle:EvaluateVisionModeRequest),
		OnVisionModeChanged(value: Int32) => (Bool),
		EvaluateVisionMode(visionType: gameVisionModeType),
		OnFocusModeToggle(value: Bool) => (Bool),
		OnPlayerTargetChanged(value: entEntityID) => (Bool),
		EvaluatelastTargets(newTarget: entEntityID) => (Bool),
		GetNetworkRelation(sourceID: entEntityID, targetID: entEntityID) => (ENetworkRelation),
		EvaluateLastSlaveTarget(masterID: entEntityID),
		EvaluateLastMasterTarget(slaveID: entEntityID),
		IsMaster(targetEntityID: entEntityID) => (Bool),
		IsLastSlaveTarget(entityID: entEntityID) => (Bool),
		IsLastMasterTarget(entityID: entEntityID) => (Bool),
		IsCurrentTarget(entityID: entEntityID) => (Bool),
		IsCurrentTargetValid() => (Bool),
		IsCurrentTargetValidInNetwork() => (Bool),
		IsInNetwork(id: entEntityID) => (Bool),
		IsSlaveInNetwork(id: entEntityID) => (Bool),
		GetAllSlavesOfMaster(masterID: entEntityID) => (array:entEntityID),
		IsMasterInNetwork(id: entEntityID) => (Bool),
		GetAllMastersOfSlave(slaveID: entEntityID) => (array:entEntityID),
		GetCurrentTargetID() => (entEntityID),
		GetCurrentTarget() => (whandle:gameObject),
		GetObjectFromID(entityID: entEntityID) => (whandle:gameObject),
		IsTagged(id: entEntityID) => (Bool),
		OnRegisterPingLinkRequest(request: handle:RegisterPingNetworkLinkRequest),
		KillSingleOldestFreeLink(),
		KillSingleOldestFreeLinkWitoutRevealPing(),
		IsFreeLinkLimitReached(linkData: SNetworkLinkData) => (Bool),
		OnStartPingingNetworkRequest(request: handle:StartPingingNetworkRequest),
		OnStopingingNetworkRequest(request: handle:StopPingingNetworkRequest),
		AddActivePing(source: handle:gameObject, pingType: EPingType, duration: Float, linkType: ELinkType, revealNetworkAtEnd: Bool, fxResource: gameFxResource, virtualNetworkShapeID: TweakDBID),
		CreateVirtualNetwork(sourcePing: handle:PingCachedData),
		IsVirtualNetworkWithinDistanceLimit(sourcePing: handle:PingCachedData) => (Bool),
		CreateVirtualLinksForPing1(ping: handle:PingCachedData),
		CreateVirtualLinksForPing(ping: handle:PingCachedData),
		CreateForksForVirtualLink1(linkData: SNetworkLinkData, ping: handle:PingCachedData, sphereCentre: Vector4, radius: Float, direction: Vector4, vertices: array:Vector4),
		CreateForksForVirtualLink1(linkData: SNetworkLinkData, ping: handle:PingCachedData, sphereCentre: Vector4, radius: Float, direction: Vector4, connectionPoint: Vector4),
		CreateForksForVirtualLink(linkData: SNetworkLinkData, ping: handle:PingCachedData, sphereCentre: Vector4, radius: Float, slice: Int32),
		RemoveActivePing(index: Int32),
		RemoveActivePingBySource(sourceID: entEntityID),
		RemoveAllActivePings(),
		RemoveAllActiveFakePings(),
		RemoveAllPingLinks(),
		RemoveAllPingLinksByType(linkType: ELinkType),
		RemovePingLinksBySourceAndType(linkType: ELinkType, sourceID: entEntityID),
		RemovePingLinksBySource(sourceID: entEntityID, intant: Bool),
		RemovePingLinksBySourceAndFxResource(sourceID: entEntityID, fxResource: gameFxResource, intant: Bool),
		RemovePingLinksByFxResource(fxResource: gameFxResource, intant: Bool),
		RemoveActivePingBySourceAndType(sourceID: entEntityID, pingType: EPingType),
		HasActivePing(sourceID: entEntityID) => (Bool),
		GetActivePing(sourceID: entEntityID) => (handle:PingCachedData),
		GetInitialPingSourceID() => (entEntityID),
		GetInitialPingSource() => (whandle:gameObject),
		GetPingType(sourceID: entEntityID) => (EPingType),
		HasAnyActivePing() => (Bool),
		HasAnyActivePingWithRevealNetwork() => (Bool),
		HasActivePingWithRevealNetwork(sourceID: entEntityID) => (Bool),
		GetLastActivePingWithRevealNetwork() => (handle:PingCachedData),
		IncreasePingLinbksCounter(),
		DecreasePingLinbksCounter(),
		IsPingLinksLimitReached() => (Bool),
		IsActivePingsLimitReached() => (Bool),
		HasDiffrentParentsThanTargets(sourceID: entEntityID, targets: array:entEntityID) => (Bool),
		HasDiffrentChildrenThanTargets(sourceID: entEntityID, targets: array:entEntityID) => (Bool),
		ResolveNetworkRevealTarget(linkData: SNetworkLinkData),
		AddNetworkRevealTarget(target: entEntityID),
		RemoveNetworkRevealTarget(index: Int32),
		RevealNetworkOnCachedTarget(targets: array:entEntityID),
		RevealEntireNetworkOnTarget(target: entEntityID),
		OnRevealNetworkRequestRequest(request: handle:RevealNetworkRequestRequest),
		SendRevealNetworkEvent(target: entEntityID, delay: Float),
		SendRevealNetworkGridRequest(target: entEntityID),
		IsIdValid(id: entEntityID) => (Bool),
		GetVirtualNetworkRecord() => (whandle:gamedataVirtualNetwork_Record),
		GetVirtualNetworkSegmentMarker(virtualNetworkRecord: whandle:gamedataVirtualNetwork_Record) => (Vector4),
		GetMaxNumberOfSegmentsForVirtualNetwork(virtualNetworkRecord: whandle:gamedataVirtualNetwork_Record) => (Int32),
		GetPingRange() => (Float),
		GetSpacePingDuration() => (Float),
		GetSpacePingAppearModifier() => (Float),
		GetNetworkReavealDuration() => (Float),
		ShouldNetworkElementsPersistAfterFocus() => (Bool),
		ShouldForceInstantBeamKill() => (Bool),
		GetRevealMasterAfterLeavingFocusDuration() => (Float),
		GetRevealLinksAfterLeavingFocusDuration() => (Float),
		GetPingRevealDuration() => (Float),
		GetAmmountOfPingDurationIntervals() => (Int32),
		GetMaxFreePingLinks() => (Int32),
		GetMaximumNumberOfFreeLinksPerTarget() => (Int32),
		GetMaximumNumberOfActivePings() => (Int32),
		GetNumberOfVirtualLinksPerObject() => (Int32),
		GetVirtualLinkDepth() => (Int32),
		GetVirtualLinkAngleTollerance() => (Float),
		GetVirtualLinkForkAngleTollerance() => (Float),
		GetMaxAmountOfVirtualLinkForks() => (Int32),
		GetVirtualLinksSphereRadius() => (Float),
		ShouldRevealMasterOnPulse() => (Bool),
		ShouldRevealSlaveOnPulse() => (Bool),
		SuppressPingIfBackdoorsFound() => (Bool),
		AllowSimultanousPinging() => (Bool),
		ShouldRevealNetworkAfterPulse() => (Bool),
		ShouldUsePulseOnPing() => (Bool),
		GetPulseRange() => (Float),
		ShouldPulsRealObject() => (Bool),
		ShouldShowLinksOnMaster() => (Bool),
		QuickHacksExposedByDefault() => (Bool),
		ShouldShowOnlyTargetQuickHacks() => (Bool),
		GetPingPresetRecord() => (whandle:gamedataNetworkPingingParameteres_Record),
		SetupPingPresetRecord(),
		GetLastPingSourceID() => (entEntityID),
		FindBestMatchingVertice(point: Vector4, direction: Vector4, angle: Float, radius: Float, excludeVertice: Vector4, vertices: array:Vector4) => (Vector4),
		GetRandomPoint(direction: Vector4, radius: Float, angle: Float) => (Vector4),
		GetRandomPointOnSphere(sphereCentre: Vector4, radius: Float, slice: Int32) => (Vector4),
		GetRandomPointOnSphere(sphereCentre: Vector4, radius: Float) => (Vector4),
		GetRandomPointOnSphereQuadrant0() => (Vector4),
		GetRandomPointOnSphereInFacingQuadrant(sphereCenter: Vector4, radius: Float, facePoint: Vector4) => (Vector4),
		GetHudManager() => (handle:HUDManager),
		QueueRequest(request: handle:gameScriptableSystemRequest),
		GetGameInstance() => (ScriptGameInstance),
		WasRestored() => (Bool),
		OnAttach(),
		OnDetach(),
		OnRestored(saveVersion: Int32, gameVersion: Int32),
		IsSavingLocked() => (Bool),
		ToString() => (String),
		GetClassName() => (CName),
		IsA(className: CName) => (Bool),
		IsExactlyA(className: CName) => (Bool),
	},
	staticFunctions: {
		DetectScriptableCycles(),
	},
	properties: {
		networkLinks: array:SNetworkLinkData,
		networkRevealTargets: array:entEntityID,
		sessionStarted: Bool,
		visionModeChangedCallback: Uint32,
		focusModeToggleCallback: Uint32,
		playerSpawnCallback: Uint32,
		currentPlayerTargetCallbackID: Uint32,
		lastTargetSlaveID: entEntityID,
		lastTargetMasterID: entEntityID,
		unregisterLinksRequestDelay: gameDelayID,
		focusModeActive: Bool,
		lastBeamResource: gameFxResource,
		pingNetworkEffect: handle:gameEffectInstance,
		pingCachedData: handle:PingCachedData,
		lastPingSourceID: entEntityID,
		activePings: array:handle:PingCachedData,
		pingLinksCounter: Int32,
		networkPresetTBDID: TweakDBID,
		networkPresetRecord: whandle:gamedataNetworkPingingParameteres_Record,
		backdoors: array:gamePersistentID,
		revealedBackdoorsCount: Int32,
		debugCashedPingFxResource: gameFxResource,
		debugQueryNumber: Int32,
	}
}